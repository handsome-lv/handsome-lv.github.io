<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>HANDSOME_LV&#39;S BLOG</title>
  
  
  <link href="https://handsomelv.top/atom.xml" rel="self"/>
  
  <link href="https://handsomelv.top/"/>
  <updated>2021-12-09T06:59:21.194Z</updated>
  <id>https://handsomelv.top/</id>
  
  <author>
    <name>HANDSOME_LV</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>闲时再会</title>
    <link href="https://handsomelv.top/2021/12/09/going/"/>
    <id>https://handsomelv.top/2021/12/09/going/</id>
    <published>2021-12-09T06:57:22.000Z</published>
    <updated>2021-12-09T06:59:21.194Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>这半年尤其的快，小站也没时间运营，下一步就是决定在以后的日子里，<del>闲时更新</del>，届时再见！安好</p><span id="more"></span>]]></content>
    
    
    <summary type="html">&lt;p&gt;这半年尤其的快，小站也没时间运营，下一步就是决定在以后的日子里，&lt;del&gt;闲时更新&lt;/del&gt;，届时再见！安好&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>LSP协议被劫持解决方法</title>
    <link href="https://handsomelv.top/2021/07/17/Web_Plm/LSP_Plm/"/>
    <id>https://handsomelv.top/2021/07/17/Web_Plm/LSP_Plm/</id>
    <published>2021-07-17T02:11:22.000Z</published>
    <updated>2021-12-09T06:53:19.402Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>事情是这样的：</p><center>就在昨天，学习了一丢丢Java爬虫方面的知识，爬了一下自己的这个小站，结果今天早上起来发现，连上网络之后，某些网站可以访问，某些不可以，啊这，这可就难受了，在网上搜了一下，发现是LSP协议被劫持了</center>解决方法在下面</blockquote><span id="more"></span><blockquote><p>LSP就是 TCP/IP 等协议的接口．LSP用在正途上可以方便程序员们编写监视系统网络通讯情况的Sniffer，可是现在常见的LSP都被用于 浏览器劫持 。 另外，LSP是指一个FEC在MPLS网络中经过的路径称为标签交换路径LSP（Label Switched Path），是从入口到出口的一个单向路径。<br>LSP协议被劫持导致不能上网《传说中的”浏览器劫持”》<br>故障表现:本地连接显示止常，登陆QQ显示网络连接超时，打开浏览器不能显示网页，网络丢包率达到了100%，本地连接数据包收到为0，查杀木马、病毒也不能解决问题。<br>原因分析:Winsock LSP全称Windows Socket Laycred Scrvice Providcr(分层服务提供商)，它是Windows底层网络Socker通信需要经过的大门。一些流氓软件可以把自已加进去，就可以截取、访问、修改网络的数据包，可以随意添加广告，还能获取你的浏览习惯.如果加进的是木马，后果可想而知。而且因LSP工.作在底层，所以无论你用什么浏览器，都逃不了经过它。而LSP中的dll文件被删除后，就会出现无法上网的情况。</p></blockquote><h2 id="检测工具直接修复"><a href="#检测工具直接修复" class="headerlink" title="检测工具直接修复"></a>检测工具直接修复</h2><blockquote><p>首先，360和火绒等主流电脑管家工具中都有相关功能.<br>使用360急救箱网络修复或360安全卫士LSP修复功能来修复（如果提示你的“LSP没有异常，不用修复”，但是你还是上不了网，执行ping命令，在ip地址处会出现（无法ping通外网。那么你就用360的“恢复Winsock LSP到初始状态”的功能。）<br>用LSPFix这个工具在断开网络下修复。<br>火绒则是在“安全工具”-&gt;“断网修复”，进行全面检查，在检查出LSP协议被劫持后，点击修复即可。</p></blockquote><h2 id="命令行工具修复"><a href="#命令行工具修复" class="headerlink" title="命令行工具修复"></a>命令行工具修复</h2><blockquote><p>Windows XP Service Pack 2 中有两个新增的 Netsh 命令。<br>“ netsh winsock reset catalog   该命令将 Winsock 目录重置为默认配置。如果安装了可导致网络连接丢失的不正确的 LSP，该命令会很有用。尽管使用该命令可以还原网络连接，但应该慎重使用，因为以前安装的 LSP 都将需要重新安装。” netsh winsock show catalog   该命令会显示安装在计算机上的 Winsock LSP 列表</p></blockquote><h2 id="重装网卡驱动"><a href="#重装网卡驱动" class="headerlink" title="重装网卡驱动"></a>重装网卡驱动</h2><blockquote><p>在完成上述操作后，如果还是无法上网，建议重装一下电脑网卡驱动（本人是需要这一步。</p></blockquote><h2 id="重新联网"><a href="#重新联网" class="headerlink" title="重新联网"></a>重新联网</h2><blockquote><p>最后，重置一下网络连接，也就是重新联网。</p></blockquote>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;事情是这样的：&lt;/p&gt;
&lt;center&gt;就在昨天，学习了一丢丢Java爬虫方面的知识，爬了一下自己的这个小站，
结果今天早上起来发现，连上网络之后，某些网站可以访问，某些不可以，啊这，
这可就难受了，在网上搜了一下，发现是LSP协议被劫持了&lt;/center&gt;
解决方法在下面
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="Problem_Slv" scheme="https://handsomelv.top/categories/Problem-Slv/"/>
    
    
    <category term="WEB" scheme="https://handsomelv.top/tags/WEB/"/>
    
  </entry>
  
  <entry>
    <title>猜数字小游戏</title>
    <link href="https://handsomelv.top/2021/07/15/Java_Stu/university_2_summ_holid/GuessNumGame/"/>
    <id>https://handsomelv.top/2021/07/15/Java_Stu/university_2_summ_holid/GuessNumGame/</id>
    <published>2021-07-15T04:56:22.000Z</published>
    <updated>2021-12-12T15:42:48.513Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><img src="/images/posts/Java_Stu/university_2_summ_holid/GuessNumGame/%E6%95%88%E6%9E%9C.jpg" alt="效果" loading="lazy"></p><blockquote><center>一个猜数字小游戏，大二实训自做</center></blockquote><span id="more"></span><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote><p>刚做出来,没什么好说的，本来也就不是啥大项目<br>初代版本，没改字体颜色大小啥的，可以自己改<br>不过自己能做出来，很高兴<br>废话不多说，直接放源码</p></blockquote><h2 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h2><blockquote><p>一个GuessNumFrame类<br>同时还用了一个封装好的本地工具类：LocationUtil<br>注意代码中图片地址非确定，改为自己的</p></blockquote><p>GuessNumFrame类:</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">top<span class="token punctuation">.</span>handsomelv<span class="token punctuation">.</span>study<span class="token punctuation">.</span>test</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>awt<span class="token punctuation">.</span></span><span class="token class-name">Color</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>awt<span class="token punctuation">.</span>event<span class="token punctuation">.</span></span><span class="token class-name">ActionEvent</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>awt<span class="token punctuation">.</span>event<span class="token punctuation">.</span></span><span class="token class-name">ActionListener</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Random</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>swing<span class="token punctuation">.</span></span><span class="token class-name">ImageIcon</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>swing<span class="token punctuation">.</span></span><span class="token class-name">JButton</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>swing<span class="token punctuation">.</span></span><span class="token class-name">JFrame</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>swing<span class="token punctuation">.</span></span><span class="token class-name">JLabel</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>swing<span class="token punctuation">.</span></span><span class="token class-name">JOptionPane</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>swing<span class="token punctuation">.</span></span><span class="token class-name">JTextArea</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">top<span class="token punctuation">.</span>handsomelv<span class="token punctuation">.</span>study<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">LocationUtil</span><span class="token punctuation">;</span><span class="token comment">/** *  * &lt;p>项目名称: GuessNumGame &lt;/p>  * &lt;p>文件名称: GuessNumFrame &lt;/p>  * &lt;p>创建时间: 2021/7/15/12:56 &lt;/p> * @author &lt;a href="mail to: handsomelvv@qq.com">HANDSOME_LV&lt;/a> * @version v1.0 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GuessNumFrame</span> <span class="token keyword">extends</span> <span class="token class-name">JFrame</span> <span class="token keyword">implements</span> <span class="token class-name">ActionListener</span> <span class="token punctuation">&#123;</span><span class="token comment">//生成随机数</span><span class="token class-name">Random</span> rand <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//用Random产生随机数</span><span class="token keyword">int</span> randNum <span class="token operator">=</span> rand<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//接收随机数randNum在[0,100)内</span><span class="token comment">//添加按钮</span><span class="token keyword">private</span> <span class="token class-name">JButton</span> close<span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token class-name">JButton</span> go<span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token class-name">JButton</span> again<span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token class-name">JButton</span> tel<span class="token punctuation">;</span><span class="token comment">//添加文本输入输出框</span><span class="token keyword">private</span> <span class="token class-name">JTextArea</span> getnum<span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token class-name">JTextArea</span> outnum<span class="token punctuation">;</span><span class="token comment">//重写构造器</span><span class="token keyword">public</span> <span class="token class-name">GuessNumFrame</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"构造器"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">JLabel</span> mainJLabel <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JLabel</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ImageIcon</span><span class="token punctuation">(</span><span class="token string">"image/case02/background.jpg"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setIconImage</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ImageIcon</span><span class="token punctuation">(</span><span class="token string">"image/case02/icon.jpg"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getImage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setUndecorated</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>mainJLabel<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//设置界面可以跟随鼠标移动</span><span class="token class-name">LocationUtil</span> util <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LocationUtil</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setBounds</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span><span class="token number">50</span><span class="token punctuation">,</span><span class="token number">400</span><span class="token punctuation">,</span><span class="token number">300</span><span class="token punctuation">)</span><span class="token punctuation">;</span>close <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JButton</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ImageIcon</span><span class="token punctuation">(</span><span class="token string">"image/case02/close.png"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>close<span class="token punctuation">.</span><span class="token function">setContentAreaFilled</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>close<span class="token punctuation">.</span><span class="token function">setBorderPainted</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>close<span class="token punctuation">.</span><span class="token function">setBounds</span><span class="token punctuation">(</span><span class="token number">365</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">24</span><span class="token punctuation">,</span><span class="token number">23</span><span class="token punctuation">)</span><span class="token punctuation">;</span>mainJLabel<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>close<span class="token punctuation">)</span><span class="token punctuation">;</span>go <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JButton</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ImageIcon</span><span class="token punctuation">(</span><span class="token string">"image/case02/go.png"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>go<span class="token punctuation">.</span><span class="token function">setContentAreaFilled</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>go<span class="token punctuation">.</span><span class="token function">setBorderPainted</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>go<span class="token punctuation">.</span><span class="token function">setBounds</span><span class="token punctuation">(</span><span class="token number">295</span><span class="token punctuation">,</span><span class="token number">123</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>mainJLabel<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>go<span class="token punctuation">)</span><span class="token punctuation">;</span>again <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JButton</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ImageIcon</span><span class="token punctuation">(</span><span class="token string">"image/case02/again_press.png"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>again<span class="token punctuation">.</span><span class="token function">setContentAreaFilled</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>again<span class="token punctuation">.</span><span class="token function">setBorderPainted</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>again<span class="token punctuation">.</span><span class="token function">setBounds</span><span class="token punctuation">(</span><span class="token number">233</span><span class="token punctuation">,</span><span class="token number">164</span><span class="token punctuation">,</span><span class="token number">80</span><span class="token punctuation">,</span><span class="token number">26</span><span class="token punctuation">)</span><span class="token punctuation">;</span>mainJLabel<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>again<span class="token punctuation">)</span><span class="token punctuation">;</span>tel <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JButton</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ImageIcon</span><span class="token punctuation">(</span><span class="token string">"image/case02/tel_press.png"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>tel<span class="token punctuation">.</span><span class="token function">setContentAreaFilled</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>tel<span class="token punctuation">.</span><span class="token function">setBorderPainted</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>tel<span class="token punctuation">.</span><span class="token function">setBounds</span><span class="token punctuation">(</span><span class="token number">88</span><span class="token punctuation">,</span><span class="token number">164</span><span class="token punctuation">,</span><span class="token number">80</span><span class="token punctuation">,</span><span class="token number">26</span><span class="token punctuation">)</span><span class="token punctuation">;</span>mainJLabel<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>tel<span class="token punctuation">)</span><span class="token punctuation">;</span>getnum <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JTextArea</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>getnum<span class="token punctuation">.</span><span class="token function">setBackground</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Color</span><span class="token punctuation">(</span><span class="token number">240</span><span class="token punctuation">,</span><span class="token number">173</span><span class="token punctuation">,</span><span class="token number">43</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>getnum<span class="token punctuation">.</span><span class="token function">setBounds</span><span class="token punctuation">(</span><span class="token number">206</span><span class="token punctuation">,</span><span class="token number">126</span><span class="token punctuation">,</span> <span class="token number">39</span><span class="token punctuation">,</span> <span class="token number">17</span><span class="token punctuation">)</span><span class="token punctuation">;</span>mainJLabel<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>getnum<span class="token punctuation">)</span><span class="token punctuation">;</span>outnum <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JTextArea</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>outnum<span class="token punctuation">.</span><span class="token function">setBackground</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Color</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">,</span><span class="token number">191</span><span class="token punctuation">,</span><span class="token number">31</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>outnum<span class="token punctuation">.</span><span class="token function">setBounds</span><span class="token punctuation">(</span><span class="token number">86</span><span class="token punctuation">,</span><span class="token number">218</span><span class="token punctuation">,</span> <span class="token number">230</span><span class="token punctuation">,</span> <span class="token number">60</span><span class="token punctuation">)</span><span class="token punctuation">;</span>mainJLabel<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>outnum<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//添加事件</span>close<span class="token punctuation">.</span><span class="token function">addActionListener</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>go<span class="token punctuation">.</span><span class="token function">addActionListener</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>again<span class="token punctuation">.</span><span class="token function">addActionListener</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>tel<span class="token punctuation">.</span><span class="token function">addActionListener</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setVisible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setDefaultCloseOperation</span><span class="token punctuation">(</span>EXIT_ON_CLOSE<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">actionPerformed</span><span class="token punctuation">(</span><span class="token class-name">ActionEvent</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">==</span>close<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"关闭游戏"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">==</span>go<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"确定答案"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>getnum<span class="token punctuation">.</span><span class="token function">getText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">==</span>randNum<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">JOptionPane</span><span class="token punctuation">.</span><span class="token function">showMessageDialog</span><span class="token punctuation">(</span><span class="token class-name">GuessNumFrame</span><span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">,</span><span class="token string">"恭喜你答对了，数字是"</span><span class="token operator">+</span>randNum<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>getnum<span class="token punctuation">.</span><span class="token function">getText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">></span>randNum<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"猜的有点大"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>outnum<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span><span class="token string">"猜的有点大"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>getnum<span class="token punctuation">.</span><span class="token function">getText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&lt;</span>randNum<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"猜的有点小"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>outnum<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span><span class="token string">"猜的有点小"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">==</span>again<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"再来一次"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>getnum<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>outnum<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>randNum <span class="token operator">=</span> rand<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">==</span>tel<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"告诉我吧"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"数字是"</span><span class="token operator">+</span>randNum<span class="token punctuation">)</span><span class="token punctuation">;</span>outnum<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span><span class="token string">"数字是"</span><span class="token operator">+</span>randNum<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">GuessNumFrame</span> frame <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GuessNumFrame</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>LocationUtil 类:</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">top<span class="token punctuation">.</span>handsomelv<span class="token punctuation">.</span>study<span class="token punctuation">.</span>util</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>awt<span class="token punctuation">.</span>event<span class="token punctuation">.</span></span><span class="token class-name">MouseAdapter</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>awt<span class="token punctuation">.</span>event<span class="token punctuation">.</span></span><span class="token class-name">MouseEvent</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>awt<span class="token punctuation">.</span>event<span class="token punctuation">.</span></span><span class="token class-name">MouseMotionAdapter</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>swing<span class="token punctuation">.</span></span><span class="token class-name">JFrame</span><span class="token punctuation">;</span><span class="token comment">/* * 封装一个工具类 * 设计模式的一种：高内聚，低耦合 * 1）点击窗口的时候，输出点击的位置x,y * 2）鼠标操作，窗体跟随鼠标移动 *  */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LocationUtil</span> <span class="token punctuation">&#123;</span><span class="token class-name">JFrame</span> fram<span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token keyword">boolean</span> isDraging <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token keyword">int</span> xx<span class="token punctuation">,</span>yy<span class="token punctuation">;</span><span class="token comment">//重写构造器，添加形参</span><span class="token keyword">public</span> <span class="token class-name">LocationUtil</span><span class="token punctuation">(</span><span class="token class-name">JFrame</span> frame<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>fram <span class="token operator">=</span>frame<span class="token punctuation">;</span><span class="token comment">//监听事件</span>fram<span class="token punctuation">.</span><span class="token function">addMouseListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MouseAdapter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">mousePressed</span><span class="token punctuation">(</span><span class="token class-name">MouseEvent</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">mousePressed</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>isDraging <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>xx <span class="token operator">=</span> e<span class="token punctuation">.</span><span class="token function">getX</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>yy <span class="token operator">=</span> e<span class="token punctuation">.</span><span class="token function">getY</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"=="</span><span class="token operator">+</span>xx<span class="token operator">+</span><span class="token string">":"</span><span class="token operator">+</span>yy<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">mouseReleased</span><span class="token punctuation">(</span><span class="token class-name">MouseEvent</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">mouseReleased</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>isDraging <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>fram<span class="token punctuation">.</span><span class="token function">addMouseMotionListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MouseMotionAdapter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">mouseDragged</span><span class="token punctuation">(</span><span class="token class-name">MouseEvent</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">mouseDragged</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>isDraging<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">int</span> left <span class="token operator">=</span> fram<span class="token punctuation">.</span><span class="token function">getLocation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>x<span class="token punctuation">;</span><span class="token keyword">int</span> top <span class="token operator">=</span> fram<span class="token punctuation">.</span><span class="token function">getLocation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>y<span class="token punctuation">;</span>fram<span class="token punctuation">.</span><span class="token function">setLocation</span><span class="token punctuation">(</span>left<span class="token operator">+</span>e<span class="token punctuation">.</span><span class="token function">getX</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>top<span class="token operator">+</span>e<span class="token punctuation">.</span><span class="token function">getY</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h2 id="效果结果图"><a href="#效果结果图" class="headerlink" title="效果结果图"></a>效果结果图</h2><p><img src="/images/posts/Java_Stu/university_2_summ_holid/GuessNumGame/%E6%95%88%E6%9E%9C%E7%BB%93%E6%9E%9C%E5%9B%BE.png" alt="效果结果图" loading="lazy"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;/images/posts/Java_Stu/university_2_summ_holid/GuessNumGame/%E6%95%88%E6%9E%9C.jpg&quot; alt=&quot;效果&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;center&gt;一个猜数字小游戏，大二实训自做&lt;/center&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="OUT_LEARN" scheme="https://handsomelv.top/categories/OUT-LEARN/"/>
    
    <category term="_PLAY" scheme="https://handsomelv.top/categories/OUT-LEARN/PLAY/"/>
    
    
    <category term="java" scheme="https://handsomelv.top/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>Java Study Part 2</title>
    <link href="https://handsomelv.top/2021/07/11/Java_Stu/Part2/"/>
    <id>https://handsomelv.top/2021/07/11/Java_Stu/Part2/</id>
    <published>2021-07-11T08:25:22.000Z</published>
    <updated>2021-07-12T04:50:21.225Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><img src="https://www.w3cschool.cn/attachments/image/20161101/1477969977993875.png" alt="java" loading="lazy"><br> <center><font size=5>Java学习 Part 2</font></center></p><blockquote><center>数据——变量——运算</center></blockquote><span id="more"></span><h2 id="基本数据类型之间的运算规则"><a href="#基本数据类型之间的运算规则" class="headerlink" title="基本数据类型之间的运算规则:"></a>基本数据类型之间的运算规则:</h2><blockquote><p>前提:这里讨论只是7种基本数据类型变量间的运算。不包含boolean类型的。<br>1．自动类型提升:<br>结论:当容量小的数据类型的变量与容量大的数据类型的变量做运算时，结果自动提升为容量byte . char . short –&gt; int –&gt; long –&gt;float –&gt; double<br>特别的:当byte、char、 short三种类型的变量做运算时，结果为int型<br>说明:此时的容量大小指的是，表示数的范围的大和小。比如: float容量要大于long的容量<br>2.强制类型转换:<br>自动类型转换的逆过程，将容量大的数据类型转换为容量小的数据类型。使用时要加上强制转换符:()，但可能造成精度降低或溢出,格外要注意<br>通常，字符串不能直接转换为基本类型，但通过基本类型对应的包装类则可以实现把字符串转换成基本类型。<br>如: String a =“43”; int i = Integer.parselnt(a);&gt;boolean类型不可以转换为其它的数据类型。</p></blockquote><h2 id="String类型变量的使用"><a href="#String类型变量的使用" class="headerlink" title="String类型变量的使用"></a>String类型变量的使用</h2><blockquote><ol><li>String属于引用数据类型,翻译为:字符串<br>2．声明string类型变量时,使用一对””</li><li>String可以和8种基本数据类型变量做运算，且运算只能是连接运算:+4．运算的结果仍然是String类型</li></ol></blockquote><h2 id="运算表格"><a href="#运算表格" class="headerlink" title="运算表格"></a>运算表格</h2><table><thead><tr><th align="center">运算符</th><th align="center">运算</th><th align="center">范例</th><th align="center">结果</th></tr></thead><tbody><tr><td align="center">+</td><td align="center">正号</td><td align="center">+3</td><td align="center">3</td></tr><tr><td align="center">-</td><td align="center">负号</td><td align="center">b=4;-b</td><td align="center">-4</td></tr><tr><td align="center">+</td><td align="center">加</td><td align="center">5+5</td><td align="center">10</td></tr><tr><td align="center">-</td><td align="center">减</td><td align="center">6-4</td><td align="center">2</td></tr><tr><td align="center">*</td><td align="center">乘</td><td align="center">3*4</td><td align="center">12</td></tr><tr><td align="center">/</td><td align="center">除</td><td align="center">5/5</td><td align="center">1</td></tr><tr><td align="center">%</td><td align="center">取模(取余)</td><td align="center">7%5</td><td align="center">2</td></tr><tr><td align="center">++</td><td align="center">自增(前):先运算后取值</td><td align="center">a=2,b=++a;</td><td align="center">a=3;b=3</td></tr><tr><td align="center">++</td><td align="center">自增(后):先取值后运算</td><td align="center">a=2;b=a++;</td><td align="center">a=3;b=2</td></tr><tr><td align="center">–</td><td align="center">自减(前):先运算后取值</td><td align="center">a=2;b=–a</td><td align="center">a=1;b=1</td></tr><tr><td align="center">–</td><td align="center">自减(后):先取值后运算</td><td align="center">a=2;b=a–</td><td align="center">a=1;b=2</td></tr><tr><td align="center">+</td><td align="center">字符串连接</td><td align="center">“He””+ llo”</td><td align="center">“Hello”</td></tr></tbody></table><h2 id="运算符号"><a href="#运算符号" class="headerlink" title="运算符号"></a>运算符号</h2><blockquote><p>当“=”两侧数据类型不一致时，可以使用自动类取转换或使用强制类型转换原则进行处理。<br>支持连续赋值。<br>扩展赋值运算符:+=，-=，*=，/=，%=</p></blockquote><h2 id="比较运算符"><a href="#比较运算符" class="headerlink" title="比较运算符"></a>比较运算符</h2><table><thead><tr><th align="center">运算符</th><th align="center">运算</th><th align="center">范例</th><th align="center">结果</th></tr></thead><tbody><tr><td align="center">==</td><td align="center">相等于</td><td align="center">4==3</td><td align="center">false</td></tr><tr><td align="center">!=</td><td align="center">不等于</td><td align="center">4!=3</td><td align="center">true</td></tr><tr><td align="center">&lt;</td><td align="center">小于</td><td align="center">4&lt;3</td><td align="center">false</td></tr><tr><td align="center">&gt;</td><td align="center">大于</td><td align="center">4&gt;3</td><td align="center">true</td></tr><tr><td align="center">&lt;=</td><td align="center">小于等于</td><td align="center">4&lt;=3</td><td align="center">false</td></tr><tr><td align="center">&gt;=</td><td align="center">大于等于</td><td align="center">4&gt;=3</td><td align="center">true</td></tr><tr><td align="center">instanceof</td><td align="center">检查是否是类的对象</td><td align="center">“Hello”instanceof String</td><td align="center">true</td></tr></tbody></table><blockquote><p>比较运算符的结果都是boolean型，也就是要么是true，要么是false。<br>比较运算符“==”不能误写成“=”。</p></blockquote>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://www.w3cschool.cn/attachments/image/20161101/1477969977993875.png&quot; alt=&quot;java&quot;&gt;&lt;br&gt; &lt;center&gt;&lt;font size=5&gt;Java学习 Part 2&lt;/font&gt;&lt;/center&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;center&gt;数据——变量——运算&lt;/center&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="OUT_LEARN" scheme="https://handsomelv.top/categories/OUT-LEARN/"/>
    
    
    <category term="java" scheme="https://handsomelv.top/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>Java Study Part 1</title>
    <link href="https://handsomelv.top/2021/07/08/Java_Stu/Part1/"/>
    <id>https://handsomelv.top/2021/07/08/Java_Stu/Part1/</id>
    <published>2021-07-08T02:59:22.000Z</published>
    <updated>2021-07-12T04:50:41.399Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><img src="https://www.w3cschool.cn/attachments/image/20161101/1477969977993875.png" alt="java" loading="lazy"><br> <center><font size=5>Java学习 Part 1</font></center></p><blockquote><center>重新学习</center></blockquote><span id="more"></span><h2 id="第一个java程序"><a href="#第一个java程序" class="headerlink" title="第一个java程序"></a>第一个java程序</h2><p>初学一门编程语言当然先学的是Hello World!<br>代码如下：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Hello</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Hello world!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h2 id="注释种类"><a href="#注释种类" class="headerlink" title="注释种类"></a>注释种类</h2><p>java的注释和C语言极其相似<br>单行注释：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Hello world!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//Hello world 输出语句</span></code></pre><p>多行注释：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">/*以下为Hello world 源程序*/</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Hello</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Hello world!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>文档注释（Java特有)&gt;格式:</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">/**@author指定java程序的作者@version指定源文件的版本*/</span></code></pre><p>注释内容可以被JDK提供的工具 javadoc所解析，生成一套以网页文件形式体现的该程序的说明文档。</p><h2 id="标识符及命名规则"><a href="#标识符及命名规则" class="headerlink" title="标识符及命名规则"></a>标识符及命名规则</h2><p>标识符:</p><blockquote><p>Java对各种变量、方法和类等要素命名时使用的字符序列称为标识符&gt;技巧:凡是自己可以起名字的地方都叫标识符。<br>定义合法标识符规则:<br>由26个英文字母大小写，0-9，_或$组成≥数字不可以开头。<br>不可以使用关键字和保留字，但能包含关键字和保留字。&gt;Java中严格区分大小写，长度无限制。<br>标识符不能包含空格。</p></blockquote><h2 id="Java中的名称命名规范"><a href="#Java中的名称命名规范" class="headerlink" title="Java中的名称命名规范"></a>Java中的名称命名规范</h2><blockquote><p>包名:多单词组成时所有字母都小写:xxxyyyzzz<br>类名、接口名:多单词组成时，所有单词的首字母大写:XxxYyyZzz<br>变量名、方法名:多单词组成时，第一个单词首字母小写，第二个单词开始每个单词首字母大写:xxxYyyZzz<br>常量名:所有字母都大写。多单词时每个单词用下划线连接:XXX_YYY_zzz</p></blockquote><div class="warning"><blockquote><p>注意1。在起名字时，为了提高阅读性，要尽量有意义，“见名知意”。<br>注意2、 java采用unicode字符集，因此标识符也可以使用汉字声明，但是不建议使用。</p></blockquote></div><h2 id="变量数据类型"><a href="#变量数据类型" class="headerlink" title="变量数据类型"></a>变量数据类型</h2><p>Java定义的数据类型<br>一、变量按照数据类型来分:<br>基本数据类型:<br>整型:byte \ short \ int \ long浮点型:float \ double<br>字符型:char<br>布尔型:boolean<br>引用数据类型:<br>类(class)<br>接口(interface)数组(array)<br>二、变量在类中声明的位置:<br>成员变量vs局部变量</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://www.w3cschool.cn/attachments/image/20161101/1477969977993875.png&quot; alt=&quot;java&quot;&gt;&lt;br&gt; &lt;center&gt;&lt;font size=5&gt;Java学习 Part 1&lt;/font&gt;&lt;/center&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;center&gt;重新学习&lt;/center&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="OUT_LEARN" scheme="https://handsomelv.top/categories/OUT-LEARN/"/>
    
    
    <category term="java" scheme="https://handsomelv.top/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>动态规划——最大字段和</title>
    <link href="https://handsomelv.top/2021/05/07/C_C++/algorithm/dongtai/sum_array/"/>
    <id>https://handsomelv.top/2021/05/07/C_C++/algorithm/dongtai/sum_array/</id>
    <published>2021-05-07T01:55:36.715Z</published>
    <updated>2021-12-12T15:46:48.657Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="【问题描述】"><a href="#【问题描述】" class="headerlink" title="【问题描述】"></a>【问题描述】</h2><p>给定由n个整数组成的序列a1,a2,…,an，求该序列子段和的最大值。当所有整数均为负值时定义其最大子段和为0。<br>依此定义， 例如， 当(a1,a2, a3, a4, a5,a6)=(-2, 11, -4, 13, -5, -2)时，最大子段和为20。</p><span id="more"></span><h2 id="【问题分析】"><a href="#【问题分析】" class="headerlink" title="【问题分析】"></a>【问题分析】</h2><p><img src="/images/posts/C_C++/algorithm/dongtai/sum_array/%E5%AD%90%E9%97%AE%E9%A2%98%E7%95%8C%E5%AE%9A.png" alt="子问题界定" loading="lazy"><br><img src="/images/posts/C_C++/algorithm/dongtai/sum_array/%E9%80%92%E5%BD%92%E6%96%B9%E7%A8%8B.png" alt="递归方程" loading="lazy"></p><h2 id="【代码实现】"><a href="#【代码实现】" class="headerlink" title="【代码实现】"></a>【代码实现】</h2><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> <span class="token function">get_max</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> <span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">;</span><span class="token comment">//输入数组的个数</span><span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token number">1000</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//记录所输入的数组</span><span class="token keyword">int</span> i<span class="token punctuation">,</span>max<span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"输入数组的长度："</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"请输入数组元素：\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>max <span class="token operator">=</span> <span class="token function">get_max</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"该数组序列最大字段和为：\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> max<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">get_max</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> <span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> c<span class="token punctuation">[</span><span class="token number">1000</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> i<span class="token punctuation">;</span><span class="token keyword">int</span> max <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>c<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//核心算法求最大子树和并记录在max中</span><span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>c<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span>c<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> c<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">else</span>c<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>c<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">></span>max<span class="token punctuation">)</span>max <span class="token operator">=</span> c<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> max<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h2 id="【运行结果】"><a href="#【运行结果】" class="headerlink" title="【运行结果】"></a>【运行结果】</h2><blockquote><p>运行结果仅供参考</p></blockquote><p><img src="/images/posts/C_C++/algorithm/dongtai/sum_array/%E6%9C%80%E5%A4%A7%E5%AD%97%E6%AE%B5%E5%92%8C.png" alt="最大字段和" loading="lazy"></p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;【问题描述】&quot;&gt;&lt;a href=&quot;#【问题描述】&quot; class=&quot;headerlink&quot; title=&quot;【问题描述】&quot;&gt;&lt;/a&gt;【问题描述】&lt;/h2&gt;&lt;p&gt;给定由n个整数组成的序列a1,a2,…,an，求该序列子段和的最大值。当所有整数均为负值时定义其最大子段和为0。&lt;br&gt;依此定义， 例如， 当(a1,a2, a3, a4, a5,a6)=(-2, 11, -4, 13, -5, -2)时，最大子段和为20。&lt;/p&gt;</summary>
    
    
    
    <category term="S_LEARN" scheme="https://handsomelv.top/categories/S-LEARN/"/>
    
    
    <category term="C" scheme="https://handsomelv.top/tags/C/"/>
    
    <category term="算法" scheme="https://handsomelv.top/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>动态规划——最大公共子序列</title>
    <link href="https://handsomelv.top/2021/05/07/C_C++/algorithm/dongtai/max_array/"/>
    <id>https://handsomelv.top/2021/05/07/C_C++/algorithm/dongtai/max_array/</id>
    <published>2021-05-07T01:55:01.744Z</published>
    <updated>2021-12-12T15:46:28.191Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="【问题描述】"><a href="#【问题描述】" class="headerlink" title="【问题描述】"></a>【问题描述】</h2><p>字符序列的子序列是指从给定字符序列中随意地（不一定连续）去掉若干个字符（可能一个也不去掉）后所形成的字符序列。<br>  给定两个字符序列A和B，如果字符序列Z既是A的子序列，又是B的子序列，则称序列Z是A和B的公共子序列。该问题是求两序列A和B的最长公共子序列（LCS）。</p><span id="more"></span><h2 id="【问题分析】"><a href="#【问题分析】" class="headerlink" title="【问题分析】"></a>【问题分析】</h2><p>b[i][j]为子序列（x0，x1，…，xi-1）和（y0，y1，…，yj-1）的最长公共子序列的长度。</p><h2 id="【解决思路】"><a href="#【解决思路】" class="headerlink" title="【解决思路】"></a>【解决思路】</h2><p>引进一个二维数组c[][]，用c[i][j]记录X[i]与Y[j] 的LCS 的长度，b[i][j]记录c[i][j]是通过哪一个子问题的值求得的，以决定搜索的方向。<br>我们是自底向上进行递推计算，那么在计算c[i,j]之前，c[i-1][j-1]，c[i-1][j]与c[i][j-1]均已计算出来。此时我们根据X[i] = Y[j]还是X[i] != Y[j]，就可以计算出c[i][j]。<br>递归方程为：<img src="/images/posts/C_C++/algorithm/dongtai/max_array/%E9%80%92%E5%BD%92.png" alt="递归.PNG" loading="lazy"><br>回溯输出最长公共子序列过程：<img src="/images/posts/C_C++/algorithm/dongtai/max_array/%E5%9B%9E%E6%BA%AF.png" alt="回溯.PNG" loading="lazy"></p><h2 id="【代码实现】"><a href="#【代码实现】" class="headerlink" title="【代码实现】"></a>【代码实现】</h2><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">N</span> <span class="token expression"><span class="token number">100</span></span></span><span class="token keyword">void</span> <span class="token function">LCSLength</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>x<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>y<span class="token punctuation">,</span> <span class="token keyword">int</span> m<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">,</span> <span class="token keyword">int</span> c<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> i<span class="token punctuation">,</span> j<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> m<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> c<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> c<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">&lt;=</span> m<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>x<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> y<span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                c<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> c<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>                b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>c<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">>=</span> c<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                c<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> c<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">else</span><span class="token punctuation">&#123;</span>                c<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> c<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">PrintLCS</span><span class="token punctuation">(</span><span class="token keyword">int</span> b<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>x<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">int</span> j<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> j <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">PrintLCS</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> x<span class="token punctuation">,</span> i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%c "</span><span class="token punctuation">,</span> x<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span>    <span class="token function">PrintLCS</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> x<span class="token punctuation">,</span> i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">else</span>    <span class="token function">PrintLCS</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> x<span class="token punctuation">,</span> i<span class="token punctuation">,</span> j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">char</span> x<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span>y<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment">//char x[N] = &#123;"ABCBDAB"&#125;;</span>    <span class="token comment">//char y[N] = &#123;"BDCABA"&#125;;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"分别输入字符序列x和y：\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> b<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> c<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> m<span class="token punctuation">,</span> n<span class="token punctuation">;</span>    m <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>    n <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">LCSLength</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> m<span class="token punctuation">,</span> n<span class="token punctuation">,</span> c<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"最大公共子序列为：\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">PrintLCS</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> x<span class="token punctuation">,</span> m<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h2 id="【运行结果】"><a href="#【运行结果】" class="headerlink" title="【运行结果】"></a>【运行结果】</h2><blockquote><p>运行结果仅供参考</p></blockquote><p><img src="/images/posts/C_C++/algorithm/dongtai/max_array/%E8%BF%90%E8%A1%8C%E7%BB%93%E6%9E%9C.png" alt="运行结果" loading="lazy"></p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;【问题描述】&quot;&gt;&lt;a href=&quot;#【问题描述】&quot; class=&quot;headerlink&quot; title=&quot;【问题描述】&quot;&gt;&lt;/a&gt;【问题描述】&lt;/h2&gt;&lt;p&gt;字符序列的子序列是指从给定字符序列中随意地（不一定连续）去掉若干个字符（可能一个也不去掉）后所形成的字符序列。&lt;br&gt;  给定两个字符序列A和B，如果字符序列Z既是A的子序列，又是B的子序列，则称序列Z是A和B的公共子序列。该问题是求两序列A和B的最长公共子序列（LCS）。&lt;/p&gt;</summary>
    
    
    
    <category term="S_LEARN" scheme="https://handsomelv.top/categories/S-LEARN/"/>
    
    
    <category term="C" scheme="https://handsomelv.top/tags/C/"/>
    
    <category term="算法" scheme="https://handsomelv.top/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>动态规划——收花生</title>
    <link href="https://handsomelv.top/2021/05/01/C_C++/algorithm/dongtai/peanuts/"/>
    <id>https://handsomelv.top/2021/05/01/C_C++/algorithm/dongtai/peanuts/</id>
    <published>2021-05-01T02:01:44.930Z</published>
    <updated>2021-12-13T04:41:29.495Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="【问题描述】收获花生问题"><a href="#【问题描述】收获花生问题" class="headerlink" title="【问题描述】收获花生问题"></a>【问题描述】收获花生问题</h3><p>咚咚想摘点花生送给她喜欢的米老鼠。她来到一片有网格状道路的矩形花生地(如下图)，从西北角进去，东南角出来。地里每个道路的交叉点上都有种着一株花生苗，上面有若干颗花生，经过一株花生苗就能摘走该它上面所有的花生。咚咚只能向东或向南走，不能向西或向北走。问咚咚最多能够摘到多少颗花生。<img src="/images/posts/C_C++/algorithm/dongtai/peanuts/tian.jpg" alt="tian" loading="lazy"></p><span id="more"></span><h4 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h4><p>第一行是一个整数T，代表一共有多少组数据。1&lt;=T &lt;= 100<br>接下来是T组数据。<br>每组数据的第一行是两个整数，分别代表花生苗的行数R和列数 C ( 1&lt;= R,C &lt;=100)<br>每组数据的接下来R行数据，从北向南依次描述每行花生苗的情况。每行数据有 C 个整数，按从西向东的顺序描述了该行每株花生苗上的花生数目 M ( 0&lt;= M &lt;= 1000)。</p><h4 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h4><p>对每组输入数据，输出一行，内容为咚咚能摘到得最多的花生颗数。</p><h3 id="【问题分析】"><a href="#【问题分析】" class="headerlink" title="【问题分析】"></a>【问题分析】</h3><p>这道题要用递推，根据题目，只能向东或者向南走，不能向西或向北走。所以这道题不用判断是不是访问过，直接选取最大的经过的数来代替，然后把最后一个数输出就大功告成了。以下是具体思路图片。<img src="/images/posts/C_C++/algorithm/dongtai/peanuts/tgg.png" alt="tgg" loading="lazy"></p><h3 id="【代码实现】"><a href="#【代码实现】" class="headerlink" title="【代码实现】"></a>【代码实现】</h3><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> <span class="token function">max</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span><span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> a<span class="token operator">></span>b<span class="token operator">?</span>a<span class="token operator">:</span>b<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> num<span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"读入数据的次数："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//读入数据的数量</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> t<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>t<span class="token operator">&lt;=</span>num<span class="token punctuation">;</span>t<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//循环t次</span>        <span class="token keyword">int</span> x<span class="token punctuation">,</span>y<span class="token punctuation">,</span>a<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"输入数矩的规格："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>x<span class="token punctuation">,</span><span class="token operator">&amp;</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//读入数矩的大小</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"输入花生苗上花生粒的数量：\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>x<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>y<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>                <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//读入</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>x<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>y<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>                a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">+=</span><span class="token function">max</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//递归查找最大</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"最终获得%d颗花生\n"</span><span class="token punctuation">,</span>a<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//输出最大的结果</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="【输出样例】"><a href="#【输出样例】" class="headerlink" title="【输出样例】"></a>【输出样例】</h3><blockquote><p>输出结果仅供参考</p></blockquote><p><img src="/images/posts/C_C++/algorithm/dongtai/peanuts/%E7%BB%93%E6%9E%9C.png" alt="结果" loading="lazy"></p>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;【问题描述】收获花生问题&quot;&gt;&lt;a href=&quot;#【问题描述】收获花生问题&quot; class=&quot;headerlink&quot; title=&quot;【问题描述】收获花生问题&quot;&gt;&lt;/a&gt;【问题描述】收获花生问题&lt;/h3&gt;&lt;p&gt;咚咚想摘点花生送给她喜欢的米老鼠。她来到一片有网格状道路的矩形花生地(如下图)，从西北角进去，东南角出来。地里每个道路的交叉点上都有种着一株花生苗，上面有若干颗花生，经过一株花生苗就能摘走该它上面所有的花生。咚咚只能向东或向南走，不能向西或向北走。问咚咚最多能够摘到多少颗花生。&lt;img src=&quot;/images/posts/C_C++/algorithm/dongtai/peanuts/tian.jpg&quot; alt=&quot;tian&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="S_LEARN" scheme="https://handsomelv.top/categories/S-LEARN/"/>
    
    
    <category term="C" scheme="https://handsomelv.top/tags/C/"/>
    
    <category term="算法" scheme="https://handsomelv.top/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>动态规划——数塔问题</title>
    <link href="https://handsomelv.top/2021/05/01/C_C++/algorithm/dongtai/pyramid%20of%20numbers/"/>
    <id>https://handsomelv.top/2021/05/01/C_C++/algorithm/dongtai/pyramid%20of%20numbers/</id>
    <published>2021-05-01T01:53:35.751Z</published>
    <updated>2021-12-12T15:46:43.128Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="【问题描述】"><a href="#【问题描述】" class="headerlink" title="【问题描述】"></a>【问题描述】</h3><p>有如下图所示的一个数塔，从顶部出发，在每一结点可以选择向左走或是向右走，一直走到底层，要求找出一条路径，使路径上的数值和最大。<br><img src="/images/posts/C_C++/algorithm/dongtai/pyramidofnumbers/%E6%95%B0%E5%A1%94.png" alt="数塔" loading="lazy"></p><span id="more"></span><h3 id="【问题分析】"><a href="#【问题分析】" class="headerlink" title="【问题分析】"></a>【问题分析】</h3><p>有一个r行的数塔，数塔上有若干数字。问从数塔的最高点到底部，在所有的路径中，经过的数字的和最大为多少？</p><pre class="language-bash" data-language="bash"><code class="language-bash">        <span class="token number">9</span>      <span class="token number">12</span> <span class="token number">15</span>    <span class="token number">10</span>  <span class="token number">6</span>  <span class="token number">8</span>  <span class="token number">2</span>  <span class="token number">18</span>  <span class="token number">9</span>   <span class="token number">5</span><span class="token number">19</span>  <span class="token number">7</span>  <span class="token number">10</span>  <span class="token number">4</span>  <span class="token number">16</span></code></pre><p>如上图，是一个5行的数塔，其中9—12—10—18—10的路径经过数字和最大，为59。<br>1.2 解法思路<br>面对数塔问题，使用贪心算法显然是行不通的，比如给的样例，如果使用贪心算法，那选择的路径应当是7—8—1—7—5，其经过数字和只有28，并不是最大。而用深搜DFS很容易算出时间复杂度为 O2^n （因为每个数字都有向左下和右下两种选择），行数一多必定超时。</p><p>所以，数塔问题需要使用动态规划算法。</p><p>我们可以从上往下遍历。</p><p>可以发现，要想经过一个数字，只能从左上角或右上角的数字往下到达。</p><p>所以显然，经过任一数字A时，路径所经过的数字最大和——是这个数字A左上方的数字B以及右上方的数字C两个数字中，所能达到的数字最大和中较大的那一个，再加上该数字A。</p><p>故状态转移方程为： dp[i][j]=max(dp[i-1][j],dp[i-1][j-1])+num[i][j] </p><p>其中i，j表示行数和列数，dp表示储存的最大和，num表示位置上的数字。</p><p> dp[i-1][j] 表示左上角， dp[i-1][j-1] 表示右上角。</p><p>以样例来说明：在经过第三行的数字1时，我们先看它左上角的数字12和右上角的数字15其能达到的最大和。12显然只有9—12一条路径，故最大和是21；15显然也只有9—15一条路径，其最大和是24；两者中较大的是24，故经过6所能达到的最大和是24+6=30。</p><p>这样一步步向下遍历，最后经过每一个位置所能达到的最大和都求出来了，只要从最底下的一行里寻找最大值并输出即可。</p><p>我们也可以从下往上遍历。</p><p>一条路径不管是从上往下走还是从下往上走，其经过的数字和都是一样的，所以这题完全可以变成求——从最底层到最高点所经过的最大数字和。</p><p>其写法与顺序遍历是一样的，只是状态转移时，变成从该数字的左下角和右下角来取max了。逆序遍历的写法相比于顺序遍历优点在于：少了最后一步求最后一行max的过程，可以直接输出最高点所储存的值。</p><h3 id="【代码实现】"><a href="#【代码实现】" class="headerlink" title="【代码实现】"></a>【代码实现】</h3><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> num<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//用于储存数塔每个位置的数字</span><span class="token keyword">int</span> dp<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//用于储存经过数塔每个位置所能达到的最大和</span><span class="token keyword">int</span> <span class="token function">max</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span><span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> a<span class="token operator">></span>b<span class="token operator">?</span>a<span class="token operator">:</span>b<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> r<span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"输入数塔行数："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//输入数塔行数</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"输入数塔数据：\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>r<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>i<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>num<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//输入数塔数据，注意i和j要从1开始，防止数组越界</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>r<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token comment">//共计r行</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>i<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token comment">//每行有j个数字</span>            dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span>dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">+</span>num<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment">//经过该数字的最大和，为左上角和右上角中的max，再加上该数字</span>    <span class="token keyword">int</span> ans<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>r<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>        ans<span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>ans<span class="token punctuation">,</span>dp<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//从最后一行中找到最大数</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"数塔路径和值最大为：%d\n"</span><span class="token punctuation">,</span>ans<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//就是答案</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="【运行结果】"><a href="#【运行结果】" class="headerlink" title="【运行结果】"></a>【运行结果】</h3><blockquote><p>运行结果仅供参考</p></blockquote><p><img src="/images/posts/C_C++/algorithm/dongtai/pyramidofnumbers/%E6%95%B0%E5%A1%94%E7%BB%93%E6%9E%9C.png" alt="数塔结果" loading="lazy"></p>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;【问题描述】&quot;&gt;&lt;a href=&quot;#【问题描述】&quot; class=&quot;headerlink&quot; title=&quot;【问题描述】&quot;&gt;&lt;/a&gt;【问题描述】&lt;/h3&gt;&lt;p&gt;有如下图所示的一个数塔，从顶部出发，在每一结点可以选择向左走或是向右走，一直走到底层，要求找出一条路径，使路径上的数值和最大。&lt;br&gt;&lt;img src=&quot;/images/posts/C_C++/algorithm/dongtai/pyramidofnumbers/%E6%95%B0%E5%A1%94.png&quot; alt=&quot;数塔&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="S_LEARN" scheme="https://handsomelv.top/categories/S-LEARN/"/>
    
    
    <category term="C" scheme="https://handsomelv.top/tags/C/"/>
    
    <category term="算法" scheme="https://handsomelv.top/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>云端空调</title>
    <link href="https://handsomelv.top/2021/04/28/Play/air-conditioner/"/>
    <id>https://handsomelv.top/2021/04/28/Play/air-conditioner/</id>
    <published>2021-04-27T22:48:28.323Z</published>
    <updated>2021-05-29T09:20:25.306Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><iframe height="750" src="https://ac.yunyoujun.cn/"></iframe><span id="more"></span><blockquote><p>本空调直接转载于<a href="https://ac.yunyoujun.cn/">云游君大佬的空调</a><br>本空调功能完善，就是没有风</p></blockquote>]]></content>
    
    
    <summary type="html">&lt;iframe height=&quot;750&quot; src=&quot;https://ac.yunyoujun.cn/&quot;&gt;&lt;/iframe&gt;</summary>
    
    
    
    <category term="PLAY" scheme="https://handsomelv.top/categories/PLAY/"/>
    
    
    <category term="OTHER" scheme="https://handsomelv.top/tags/OTHER/"/>
    
  </entry>
  
  <entry>
    <title>SQL ORDER</title>
    <link href="https://handsomelv.top/2021/04/23/Database/sql/"/>
    <id>https://handsomelv.top/2021/04/23/Database/sql/</id>
    <published>2021-04-23T14:29:25.000Z</published>
    <updated>2021-12-12T15:08:58.255Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><img src="/images/posts/Database/sql/mysql.png" alt="mysql" loading="lazy"><br>MYSQL的一些指令，省的自己记不住🙃🙃🙃</p><span id="more"></span><p>MYSQL常用指令</p><h3 id="连接MYSQL"><a href="#连接MYSQL" class="headerlink" title="连接MYSQL"></a>连接MYSQL</h3><p>1、连接到本机上的MySQ：<br>首先在打开cmd窗口，输入mysql -uroot -p ，然后空格进入MySQL控制台，MySQL的提示符是： mysql&gt;。</p><pre class="language-sql" data-language="sql"><code class="language-sql">mysql <span class="token operator">-</span>uroot <span class="token operator">-</span>p <span class="token comment">/*如果刚安装好MySQL，root是没有密码的*/</span></code></pre><p>2、连接到远程主机上的MySQL：<br>假设远程主机的IP为：192.168.206.100，用户名为root,密码为12345678。</p><pre class="language-sql" data-language="sql"><code class="language-sql">mysql<span class="token operator">></span> mysql <span class="token operator">-</span>h192<span class="token punctuation">.</span><span class="token number">168.206</span><span class="token number">.100</span> <span class="token operator">-</span>uroot <span class="token operator">-</span>p12345678<span class="token punctuation">;</span> <span class="token comment">/*u与root可以不加空格*/</span></code></pre><p>3、退出MySQL命令： exit 或 quit（回车）：</p><pre class="language-sql" data-language="sql"><code class="language-sql">mysql<span class="token operator">></span> <span class="token keyword">exit</span><span class="token operator">/</span>quit<span class="token punctuation">;</span></code></pre><h3 id="用户设置"><a href="#用户设置" class="headerlink" title="用户设置"></a>用户设置</h3><h4 id="MySQL–修改密码"><a href="#MySQL–修改密码" class="headerlink" title="MySQL–修改密码"></a>MySQL–修改密码</h4><p>1、root密码为空时，设置root密码：</p><pre class="language-sql" data-language="sql"><code class="language-sql">mysql<span class="token operator">></span> mysqladmin <span class="token operator">-</span>uroot newpassword<span class="token punctuation">;</span>   <span class="token comment">-- 因为开始时root没有密码，所以-p旧密码 可以省略</span></code></pre><p>2、使用 sqladmin 命令修改密码：</p><pre class="language-sql" data-language="sql"><code class="language-sql">mysql<span class="token operator">></span> mysqladmin <span class="token operator">-</span>uroot <span class="token operator">-</span>p123456 password <span class="token number">12345678</span><span class="token punctuation">;</span></code></pre><p>3、使用set passsword命令修改密码：</p><pre class="language-sql" data-language="sql"><code class="language-sql">mysql<span class="token operator">></span> <span class="token keyword">set</span> password <span class="token keyword">for</span> 用户名<span class="token variable">@localhost</span> <span class="token operator">=</span> password<span class="token punctuation">(</span><span class="token string">'新密码'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>4、忘记root密码情况下：<br>    ①关闭正在运行的MySQL服务。<br>    ②打开DOS窗口，转到mysql\bin目录。<br>    ③输入mysqld –skip-grant-tables 回车。–skip-grant-tables 的意思是启动MySQL服务的时候跳过权限表认证。<br>    ④再开一个DOS窗口（因为刚才那个DOS窗口已经不能动了），输入mysql回车，如果成功，将出现MySQL提示符 &gt;。<br>    ⑤连接权限数据库： use mysql; 。<br>    ⑥改密码：update user set password=password(“新密码”) where user=”root”;（别忘了最后加分号） 。<br>    ⑦刷新权限（必须步骤）：flush privileges;　。<br>    ⑧退出mysql  quit；。</p><pre class="language-sql" data-language="sql"><code class="language-sql">mysqld <span class="token comment">--skip-grant-tables   </span>mysql<span class="token operator">></span> <span class="token keyword">use</span> mysql<span class="token punctuation">;</span>   <span class="token comment">--连接权限数据库</span>mysql<span class="token operator">></span> <span class="token keyword">update</span> <span class="token keyword">user</span> <span class="token keyword">set</span> password<span class="token operator">=</span>password<span class="token punctuation">(</span><span class="token string">"新密码"</span><span class="token punctuation">)</span> <span class="token keyword">where</span> <span class="token keyword">user</span><span class="token operator">=</span><span class="token string">"root"</span><span class="token punctuation">;</span>   <span class="token comment">-- 改密码</span>mysql<span class="token operator">></span> flush <span class="token keyword">privileges</span><span class="token punctuation">;</span>    <span class="token comment">-- 刷新权限</span>mysql<span class="token operator">></span> quit<span class="token punctuation">;</span>    <span class="token comment">-- 退出mysql</span></code></pre><h4 id="增加新用户"><a href="#增加新用户" class="headerlink" title="增加新用户"></a>增加新用户</h4><p>注意：和上面不同，下面的因为是MYSQL环境中的命令，所以后面都带一个分号作为命令结束符</p><p>格式：grant select on 数据库.* to 用户名@登录主机 identified by “密码”</p><p>1、增加一个用户test1密码为abc，让他可以在任何主机上登录，并对所有数据库有查询、插入、修改、删除的权限。首先用root用户连入MYSQL，然后键入以下命令：</p><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">grant</span> <span class="token keyword">select</span><span class="token punctuation">,</span><span class="token keyword">insert</span><span class="token punctuation">,</span><span class="token keyword">update</span><span class="token punctuation">,</span><span class="token keyword">delete</span> <span class="token keyword">on</span> <span class="token operator">*</span><span class="token punctuation">.</span><span class="token operator">*</span> <span class="token keyword">to</span> <span class="token punctuation">[</span>email<span class="token operator">=</span>test1@”<span class="token operator">%</span><span class="token punctuation">]</span>test1@”<span class="token operator">%</span><span class="token punctuation">[</span><span class="token operator">/</span>email<span class="token punctuation">]</span>” Identified <span class="token keyword">by</span> “abc”<span class="token punctuation">;</span></code></pre><p>但增加的用户是十分危险的，你想如某个人知道test1的密码，那么他就可以在internet上的任何一台电脑上登录你的mysql数据库并对你的数据可以为所欲为了，解决办法见2。</p><p>2、增加一个用户test2密码为abc,让他只可以在localhost上登录，并可以对数据库mydb进行查询、插入、修改、删除的操作（localhost指本地主机，即MYSQL数据库所在的那台主机），这样用户即使用知道test2的密码，他也无法从internet上直接访问数据库，只能通过MYSQL主机上的web页来访问了。</p><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">grant</span> <span class="token keyword">select</span><span class="token punctuation">,</span><span class="token keyword">insert</span><span class="token punctuation">,</span><span class="token keyword">update</span><span class="token punctuation">,</span><span class="token keyword">delete</span> <span class="token keyword">on</span> mydb<span class="token punctuation">.</span><span class="token operator">*</span> <span class="token keyword">to</span> <span class="token punctuation">[</span>email<span class="token operator">=</span>test2<span class="token variable">@localhost</span><span class="token punctuation">]</span>test2<span class="token variable">@localhost</span><span class="token punctuation">[</span><span class="token operator">/</span>email<span class="token punctuation">]</span> identified <span class="token keyword">by</span> “abc”<span class="token punctuation">;</span></code></pre><p>如果你不想test2有密码，可以再打一个命令将密码消掉。</p><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">grant</span> <span class="token keyword">select</span><span class="token punctuation">,</span><span class="token keyword">insert</span><span class="token punctuation">,</span><span class="token keyword">update</span><span class="token punctuation">,</span><span class="token keyword">delete</span> <span class="token keyword">on</span> mydb<span class="token punctuation">.</span><span class="token operator">*</span> <span class="token keyword">to</span> <span class="token punctuation">[</span>email<span class="token operator">=</span>test2<span class="token variable">@localhost</span><span class="token punctuation">]</span>test2<span class="token variable">@localhost</span><span class="token punctuation">[</span><span class="token operator">/</span>email<span class="token punctuation">]</span> identified <span class="token keyword">by</span> “”<span class="token punctuation">;</span></code></pre><h3 id="MySQL–常用命令"><a href="#MySQL–常用命令" class="headerlink" title="MySQL–常用命令"></a>MySQL–常用命令</h3><h4 id="创建数据库（Create）"><a href="#创建数据库（Create）" class="headerlink" title="创建数据库（Create）"></a>创建数据库（Create）</h4><pre class="language-sql" data-language="sql"><code class="language-sql">mysql<span class="token operator">></span> <span class="token keyword">create</span> <span class="token keyword">database</span> db_name<span class="token punctuation">;</span>  <span class="token comment">-- 创建数据库</span>mysql<span class="token operator">></span> <span class="token keyword">show</span> <span class="token keyword">databases</span><span class="token punctuation">;</span>           <span class="token comment">-- 显示所有的数据库</span>mysql<span class="token operator">></span> <span class="token keyword">drop</span> <span class="token keyword">database</span> db_name<span class="token punctuation">;</span>    <span class="token comment">-- 删除数据库</span>mysql<span class="token operator">></span> <span class="token keyword">use</span> db_name<span class="token punctuation">;</span>              <span class="token comment">-- 选择数据库</span>mysql<span class="token operator">></span> <span class="token keyword">create</span> <span class="token keyword">table</span> tb_name <span class="token punctuation">(</span>字段名 <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">,</span> 字段名 <span class="token keyword">char</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">-- 创建数据表模板</span>mysql<span class="token operator">></span> <span class="token keyword">show</span> <span class="token keyword">tables</span><span class="token punctuation">;</span>              <span class="token comment">-- 显示数据表</span>mysql<span class="token operator">></span> <span class="token keyword">desc</span> tb_name<span class="token punctuation">;</span>           <span class="token comment">-- 显示表结构</span>mysql<span class="token operator">></span> <span class="token keyword">drop</span> <span class="token keyword">table</span> tb_name<span class="token punctuation">;</span>      <span class="token comment">-- 删除表</span></code></pre><p>   例如：</p><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token comment">/*创建学生表*/</span><span class="token keyword">create</span> <span class="token keyword">table</span> Student<span class="token punctuation">(</span>     Sno <span class="token keyword">char</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token keyword">primary</span> <span class="token keyword">key</span><span class="token punctuation">,</span>     Sname <span class="token keyword">char</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token keyword">unique</span><span class="token punctuation">,</span>     Ssex <span class="token keyword">char</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>     Sage <span class="token keyword">smallint</span><span class="token punctuation">,</span>     Sdept <span class="token keyword">char</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="插入数据（Insert）"><a href="#插入数据（Insert）" class="headerlink" title="插入数据（Insert）"></a>插入数据（Insert）</h4><pre><code> insert into 语句用于向表格中插入新的行：</code></pre><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token comment">/*第一种形式无需指定要插入数据的列名，只需提供被插入的值即可：*/</span>mysql<span class="token operator">></span> <span class="token keyword">insert</span> <span class="token keyword">into</span> tb_name <span class="token keyword">values</span> <span class="token punctuation">(</span>value1<span class="token punctuation">,</span>value2<span class="token punctuation">,</span>value3<span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/*第二种形式需要指定列名及被插入的值：*/</span>mysql<span class="token operator">></span> <span class="token keyword">insert</span> <span class="token keyword">into</span> tb_name <span class="token punctuation">(</span>column1<span class="token punctuation">,</span>column2<span class="token punctuation">,</span>column3<span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span> <span class="token keyword">values</span> <span class="token punctuation">(</span>value1<span class="token punctuation">,</span>value2<span class="token punctuation">,</span>value3<span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><pre><code> 例如：</code></pre><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token comment">/*插入数据*/</span> mysql<span class="token operator">></span> <span class="token keyword">insert</span> <span class="token keyword">into</span> Student <span class="token keyword">values</span> <span class="token punctuation">(</span> <span class="token number">20180001</span><span class="token punctuation">,</span><span class="token string">'张三'</span><span class="token punctuation">,</span><span class="token string">'男'</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token string">'CS'</span>）<span class="token punctuation">;</span>mysql<span class="token operator">></span> <span class="token keyword">insert</span> <span class="token keyword">into</span> Student <span class="token keyword">values</span> <span class="token punctuation">(</span> <span class="token number">20180002</span><span class="token punctuation">,</span><span class="token string">'李四'</span><span class="token punctuation">,</span><span class="token string">'男'</span><span class="token punctuation">,</span><span class="token number">19</span><span class="token punctuation">,</span><span class="token string">'CS'</span>）<span class="token punctuation">;</span>mysql<span class="token operator">></span> <span class="token keyword">insert</span> <span class="token keyword">into</span> Student <span class="token punctuation">(</span>Sno<span class="token punctuation">,</span>Sname<span class="token punctuation">,</span>Ssex<span class="token punctuation">,</span>Sage<span class="token punctuation">,</span>Sdept<span class="token punctuation">)</span> <span class="token keyword">values</span> <span class="token punctuation">(</span> <span class="token number">20180003</span><span class="token punctuation">,</span><span class="token string">'王五'</span><span class="token punctuation">,</span><span class="token string">'男'</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">,</span><span class="token string">'MA'</span>）<span class="token punctuation">;</span>mysql<span class="token operator">></span> <span class="token keyword">insert</span> <span class="token keyword">into</span> Student <span class="token punctuation">(</span>Sno<span class="token punctuation">,</span>Sname<span class="token punctuation">,</span>Ssex<span class="token punctuation">,</span>Sage<span class="token punctuation">,</span>Sdept<span class="token punctuation">)</span> <span class="token keyword">values</span> <span class="token punctuation">(</span> <span class="token number">20180004</span><span class="token punctuation">,</span><span class="token string">'赵六'</span><span class="token punctuation">,</span><span class="token string">'男'</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token string">'IS'</span>）<span class="token punctuation">;</span></code></pre><h4 id="查询数据-Select"><a href="#查询数据-Select" class="headerlink" title="查询数据(Select)"></a>查询数据(Select)</h4><h5 id="基础命令"><a href="#基础命令" class="headerlink" title="基础命令"></a>基础命令</h5><p>       select语句除了可以查看数据库中的表格和视图的信息外,还可以查看 SQL Server的系统信息、复制、创建数据表。其查询功能强大，是SQL语言的灵魂语句，也是SQL中使用频率最高的语句。<br>基本select语句：<br>      一个基本的select语句可分解成三个部分：查找什么数据（select）、从哪里查找（from）、查找的条件是什么（where）。<br>      select 语句的一般格式如下：</p><pre class="language-sql" data-language="sql"><code class="language-sql">                                   <span class="token keyword">select</span> <span class="token operator">&lt;</span>目标列表达式列表<span class="token operator">></span>                                   <span class="token punctuation">[</span><span class="token keyword">into</span> 新表名<span class="token punctuation">]</span>                                   <span class="token keyword">from</span> 表名或视图名                                   <span class="token punctuation">[</span><span class="token keyword">where</span> <span class="token operator">&lt;</span>条件<span class="token operator">></span><span class="token punctuation">]</span>                                   <span class="token punctuation">[</span><span class="token keyword">group</span> <span class="token keyword">by</span> <span class="token operator">&lt;</span>分组表达式<span class="token operator">></span><span class="token punctuation">]</span>                                   <span class="token punctuation">[</span><span class="token keyword">having</span> <span class="token operator">&lt;</span>条件<span class="token operator">></span><span class="token punctuation">]</span>                                   <span class="token punctuation">[</span><span class="token keyword">order</span> <span class="token keyword">by</span> <span class="token operator">&lt;</span>排序表达式<span class="token operator">></span><span class="token punctuation">[</span><span class="token keyword">ASC</span><span class="token operator">|</span><span class="token keyword">DESC</span><span class="token punctuation">]</span><span class="token punctuation">]</span></code></pre><p>(一)查询指定的列<br>        1.查询表中所有列<br>              在select语句指定列的位置上使用*号时，表示查询表的所有列。</p><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> tb_name<span class="token punctuation">;</span></code></pre><p>        2.查询表中指定的列<br>              查询多列时，列名之间要用逗号隔开。</p><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> tb_name<span class="token punctuation">.</span><span class="token operator">&lt;</span>字符型字段<span class="token operator">></span><span class="token punctuation">,</span><span class="token operator">&lt;</span>字符型字段<span class="token operator">></span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token keyword">from</span>  tb_name<span class="token punctuation">;</span></code></pre><p>        3.指定查询结果中的列标题<br>              通过指定列标题（也叫列别名）可使输出结果更容易被人理解。<br>              指定列标题时，可在列名之后使用AS子句；也可使用:列别名=&lt;表达式&gt;的形式指定列标题。<br>              AS子句的格式为：列名或计算表达式 [AS] 列标题</p><pre class="language-sql" data-language="sql"><code class="language-sql">              <span class="token keyword">select</span> <span class="token operator">&lt;</span>字符型字段<span class="token operator">></span> <span class="token keyword">as</span> 列标题<span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">&lt;</span>字符型字段<span class="token operator">></span> <span class="token keyword">as</span> 列标题<span class="token number">2</span><span class="token punctuation">,</span> <span class="token operator">&lt;</span>字符型字段<span class="token operator">></span> <span class="token keyword">as</span> 列标题<span class="token number">3</span> <span class="token keyword">from</span> bt_name<span class="token punctuation">;</span></code></pre><p>        4.查询经过计算的列（即表达式的值）<br>             使用select对列进行查询时，不仅可以直接以列的原始值作为结果，而且还可以将列值进行计算后所得值作为查询结果，即select子句可以查询表达式的值,表达式可由列名、常量及算术运算符组成。<br>              查询结果计算列显示“无列名”,一般要给计算列加列标题。<br>              其中：表达式中可以使用的运算符有：加+、减-、乘*、除/、取余%</p><pre class="language-sql" data-language="sql"><code class="language-sql">              <span class="token keyword">select</span> <span class="token operator">&lt;</span>字符型字段<span class="token operator">></span><span class="token punctuation">,</span><span class="token operator">&lt;</span>字符型字段<span class="token operator">></span><span class="token punctuation">,</span>列标题 <span class="token operator">=</span> <span class="token operator">&lt;</span>字符型字段<span class="token operator">></span> <span class="token operator">*</span> n <span class="token keyword">from</span> tb_name<span class="token punctuation">;</span></code></pre><p>(二)选择行：选择表中的部分行或全部行作为查询的结果</p><pre class="language-sql" data-language="sql"><code class="language-sql">        <span class="token keyword">select</span> <span class="token punctuation">[</span><span class="token keyword">all</span><span class="token operator">|</span><span class="token keyword">distinct</span><span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token keyword">top</span> n<span class="token punctuation">[</span><span class="token keyword">percent</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">&lt;</span>目标列表达式列表<span class="token operator">></span> <span class="token keyword">from</span> 表名<span class="token punctuation">;</span></code></pre><p>        1. 消除查询结果中的重复行<br>              对于关系数据库来说，表中的每一行都必须是不同的(即无重复行)。但当对表进行查询时若只选择其中的某些列，查询结果中就可能会出现重复行。<br>              在select语句中使用distinct关键字可以消除结果集中的重复行,</p><pre class="language-sql" data-language="sql"><code class="language-sql">              <span class="token keyword">select</span> <span class="token keyword">distinct</span> <span class="token operator">&lt;</span>字符型字段<span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">,</span><span class="token operator">&lt;</span>字符型字段<span class="token operator">></span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">]</span> <span class="token keyword">from</span> tb_name<span class="token punctuation">;</span></code></pre><p>        2. 限制查询结果中的返回行数<br>              使用top选项可限制查询结果的返回行数，即返回指定个数的记录数。<br>              其中：n是一个正整数，表示返回查询结果集的前n行；若带percent关键字，则表示返回结果集的前n%行。</p><pre class="language-sql" data-language="sql"><code class="language-sql">              <span class="token keyword">select</span>  <span class="token keyword">top</span> n <span class="token keyword">from</span> tb_name<span class="token punctuation">;</span> <span class="token comment">/*查询前 n 的数据*/</span>              <span class="token keyword">select</span> <span class="token keyword">top</span> n <span class="token keyword">percent</span> <span class="token keyword">from</span> tb_name<span class="token punctuation">;</span> <span class="token comment">/*查询前 n% tb_name的数据*/</span></code></pre><p>(三)查询满足条件的行: 用where子句实现条件查询<br>            通过where子句实现,该子句必须紧跟在From子句之后。</p><pre class="language-sql" data-language="sql"><code class="language-sql">            <span class="token keyword">select</span> <span class="token punctuation">[</span><span class="token keyword">all</span><span class="token operator">|</span><span class="token keyword">distinct</span><span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token keyword">top</span> n<span class="token punctuation">[</span><span class="token keyword">percent</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">&lt;</span>目标列表达式列表<span class="token operator">></span> <span class="token keyword">from</span> 表名 <span class="token keyword">where</span> <span class="token operator">&lt;</span>条件<span class="token operator">></span><span class="token punctuation">;</span></code></pre><p>            说明：在查询条件中可使用以下运算符或表达式：<br>                  运算符                 运算符标识<br>                  比较运算符         &lt;=，&lt;，=，&gt;，&gt;=，!=，&lt;&gt;，!&gt;，!&lt;<br>                  范围运算符         between… and，not between… and<br>                  列举运算符         in，not in<br>                  模糊匹配运算符 like，not like<br>                  空值运算符         is null，is not null<br>                  逻辑运算符         and，or，not<br>        1.使用比较运算符：</p><pre class="language-sql" data-language="sql"><code class="language-sql">              <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> tb_name <span class="token keyword">where</span> <span class="token operator">&lt;</span>字符型字段<span class="token operator">></span> <span class="token operator">>=</span> n <span class="token punctuation">;</span></code></pre><p>        2.指定范围：<br>              用于指定范围的关键字有两个：between…and和 not between…and。</p><pre class="language-sql" data-language="sql"><code class="language-sql">              <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> tb_name <span class="token keyword">where</span> <span class="token punctuation">[</span><span class="token operator">not</span><span class="token punctuation">]</span> <span class="token operator">between</span> <span class="token operator">&lt;</span>表达式<span class="token number">1</span><span class="token operator">></span> <span class="token operator">and</span> <span class="token operator">&lt;</span>表达式<span class="token number">2</span><span class="token operator">></span><span class="token punctuation">;</span></code></pre><p>              其中：between关键字之后的是范围的下限（即低值）,and关键字之后的是范围的上限（即高值）<br>              用于查找字段值在（或不在）指定范围的行。<br>       3.使用列举:<br>             使用in关键字可以指定一个值的集合，集合中列出所有可能的值，当表达式的值与集合中的任一元素个匹配时，即返回true，否则返回false。</p><pre class="language-sql" data-language="sql"><code class="language-sql">             模板：<span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> tb_name <span class="token keyword">where</span> <span class="token operator">&lt;</span>字符型字段<span class="token operator">></span> <span class="token punctuation">[</span><span class="token operator">not</span><span class="token punctuation">]</span> <span class="token operator">in</span><span class="token punctuation">(</span>值<span class="token number">1</span><span class="token punctuation">,</span>值<span class="token number">2</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">,</span>值n<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>       4.使用通配符进行模糊查询:<br>             可用like 子句进行字符串的模糊匹配查询，like子句将返回逻辑值（true或False）。</p><pre class="language-sql" data-language="sql"><code class="language-sql">             <span class="token operator">like</span>子句的格式： <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> tb_name <span class="token keyword">where</span> <span class="token operator">&lt;</span>字符型字段<span class="token operator">></span> <span class="token punctuation">[</span><span class="token operator">not</span><span class="token punctuation">]</span> <span class="token operator">like</span> <span class="token operator">&lt;</span>匹配串<span class="token operator">></span><span class="token punctuation">;</span></code></pre><p>             其含义是：查找指定字段值与匹配串相匹配的记录。匹配串中通常含有通配符%和_（下划线）。<br>             其中:  %：代表任意长度（包括0）的字符串<br>       5.使用null的查询<br>             当需要判定一个表达式的值是否为空值时，使用 is null关键字。<br>             当不使用not时，若表达式的值为空值，则返回true，否则返回false；当使用not时，结果刚好相反。</p><pre class="language-sql" data-language="sql"><code class="language-sql">             <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> tb_name <span class="token keyword">where</span> <span class="token operator">&lt;</span>字符型字段<span class="token operator">></span> <span class="token operator">is</span> <span class="token punctuation">[</span><span class="token operator">not</span><span class="token punctuation">]</span> <span class="token boolean">null</span><span class="token punctuation">;</span></code></pre><p>        6.多重条件查询：使用逻辑运算符<br>             逻辑运算符and（与：两个条件都要满足）和or（或：满足其中一个条件即可）可用来联接多个查询条件。and的优先级高于or,但若使用括号可以改变优先级。</p><pre class="language-sql" data-language="sql"><code class="language-sql">             <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> tb_name <span class="token keyword">where</span> <span class="token operator">&lt;</span>字符型字段<span class="token operator">></span> <span class="token operator">=</span> <span class="token string">'volues'</span> <span class="token operator">and</span> <span class="token operator">&lt;</span>字符型字段<span class="token operator">></span> <span class="token operator">></span> n<span class="token punctuation">;</span></code></pre><p>(四)对查询结果排序<br>        order by子句可用于对查询结果按照一个或多个字段的值（或表达式的值）进行升序（ASC）或降序（DESC）排列，默认为升序。</p><pre class="language-sql" data-language="sql"><code class="language-sql">        <span class="token keyword">order</span> <span class="token keyword">by</span> &#123;排序表达式<span class="token punctuation">[</span><span class="token keyword">ASC</span><span class="token operator">|</span><span class="token keyword">DESC</span><span class="token punctuation">]</span>&#125;<span class="token punctuation">[</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span></code></pre><p>        其中：排序表达式既可以是单个的一个字段，也可以是由字段、函数、常量等组成的表达式，或一个正整数。</p><pre class="language-sql" data-language="sql"><code class="language-sql">        <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> tb_name <span class="token keyword">order</span> <span class="token keyword">by</span> <span class="token operator">&lt;</span>排序表达式<span class="token operator">></span> <span class="token operator">&lt;</span>排序方法<span class="token operator">></span><span class="token punctuation">;</span></code></pre><p>(五)使用统计函数:又称集函数，聚合函数<br>        在对表进行检索时，经常需要对结果进行计算或统计，T-SQL提供了一些统计函数（也称集函数或聚合函数），用来增强检索功能。统计函数用于计算表中的数据，即利用这些函数对一组数据进行计算，并返回单一的值。<br>        常用统计函数表<br>              函数名      功能<br>              AVG         求平均值<br>              count        求记录个数，返回int类型整数<br>              max          求最大值<br>              min           求最小值<br>              sum          求和<br>        1. SUM和AVG<br>             功能：求指定的数值型表达式的和或平均值。</p><pre class="language-sql" data-language="sql"><code class="language-sql">             <span class="token keyword">select</span> <span class="token function">avg</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>字符型字段<span class="token operator">></span><span class="token punctuation">)</span> <span class="token keyword">as</span> 平均数<span class="token punctuation">,</span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>字符型字段<span class="token operator">></span><span class="token punctuation">)</span> <span class="token keyword">as</span> 总数 <span class="token keyword">from</span> tb_name <span class="token keyword">where</span> <span class="token operator">&lt;</span>字符型字段<span class="token operator">></span> <span class="token operator">=</span><span class="token string">'字符串'</span><span class="token punctuation">;</span></code></pre><p>        2. Max和Min<br>             功能：求指定表达式的最大值或最小值。</p><pre class="language-sql" data-language="sql"><code class="language-sql">             <span class="token keyword">select</span> <span class="token function">max</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>字符型字段<span class="token operator">></span><span class="token punctuation">)</span> <span class="token keyword">as</span> 最大值<span class="token punctuation">,</span><span class="token function">min</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>字符型字段<span class="token operator">></span><span class="token punctuation">)</span> <span class="token keyword">as</span> 最小值 <span class="token keyword">from</span> tb_name<span class="token punctuation">;</span></code></pre><p>        3. count<br>             该函数有两种格式：count(<em>)和count([all]|[distinct] 字段名），为避免出错，查询记录个数一般使用count(</em>)，而查询某字段有几种取值用count(distinct 字段名）。<br>             (1).count(*):<br>                 功能：统计记录总数。</p><pre class="language-sql" data-language="sql"><code class="language-sql">                 <span class="token keyword">select</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">as</span> 总数 <span class="token keyword">from</span> tb_name<span class="token punctuation">;</span></code></pre><p>             (2).count([all]|[distinct] 字段名）<br>                 功能：统计指定字段值不为空的记录个数，字段的数据类型可以是text、image、ntext、uniqueidentifier之外的任何类型。</p><pre class="language-sql" data-language="sql"><code class="language-sql">                 <span class="token keyword">select</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>字符型字段<span class="token operator">></span><span class="token punctuation">)</span> <span class="token keyword">as</span> 总数 <span class="token keyword">from</span> tb_name<span class="token punctuation">;</span></code></pre><p>(六)对查询结果分组<br>        group by子句用于将查询结果表按某一列或多列值进行分组，列值相等的为一组，每组统计出一个结果。该子句常与统计函数一起使用进行分组统计。<br>        格式为：group by 分组字段[,…n][having &lt;条件表达式&gt;]；<br>        1.在使用group by子句后<br>             select列表中只能包含：group by子句中所指定的分组字段及统计函数。<br>        2.having子句的用法<br>             having子句必须与group by 子句配合使用，用于对分组后的结果进行筛选（筛选条件中常含有统计函数）。<br>        3. 分组查询时不含统计函数的条件<br>             通常使用where子句；含有统计函数的条件,则只能用having子句。</p><pre class="language-sql" data-language="sql"><code class="language-sql">             <span class="token keyword">select</span> <span class="token operator">&lt;</span>字符型字段<span class="token operator">></span><span class="token punctuation">,</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">as</span> 列标题 <span class="token keyword">from</span> tb_name <span class="token keyword">where</span> <span class="token operator">&lt;</span>字符型字段<span class="token operator">>=</span><span class="token string">'字符串'</span> <span class="token keyword">group</span> <span class="token keyword">by</span> <span class="token operator">&lt;</span>字符型字段<span class="token operator">></span><span class="token punctuation">;</span></code></pre><h5 id="特殊功能"><a href="#特殊功能" class="headerlink" title="特殊功能"></a>特殊功能</h5><p>1.显示MYSQL的版本</p><pre class="language-sql" data-language="sql"><code class="language-sql">mysql<span class="token operator">></span> <span class="token keyword">select</span> version<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> </code></pre><ol start="2"><li>显示当前时间<pre class="language-sql" data-language="sql"><code class="language-sql">mysql<span class="token operator">></span> <span class="token keyword">select</span> <span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> </code></pre></li><li>显示年月日<pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> DAYOFMONTH<span class="token punctuation">(</span><span class="token keyword">CURRENT_DATE</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">select</span> <span class="token keyword">MONTH</span><span class="token punctuation">(</span><span class="token keyword">CURRENT_DATE</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">select</span> <span class="token keyword">YEAR</span><span class="token punctuation">(</span><span class="token keyword">CURRENT_DATE</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">select</span> <span class="token keyword">YEAR</span><span class="token punctuation">(</span><span class="token keyword">CURRENT_DATE</span><span class="token punctuation">)</span><span class="token punctuation">;</span> </code></pre></li><li>显示字符串<pre class="language-sql" data-language="sql"><code class="language-sql">mysql<span class="token operator">></span> <span class="token keyword">select</span> <span class="token string">"welecome to my blog!"</span><span class="token punctuation">;</span> </code></pre></li><li>当计算器用<pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">4</span> <span class="token operator">*</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">10</span> <span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">25</span><span class="token punctuation">;</span> </code></pre></li><li>串接字符串<pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> CONCAT<span class="token punctuation">(</span>f_name<span class="token punctuation">,</span> <span class="token string">" "</span><span class="token punctuation">,</span> l_name<span class="token punctuation">)</span> <span class="token keyword">as</span> Name <span class="token keyword">from</span> employee_data <span class="token keyword">where</span> title <span class="token operator">=</span> <span class="token string">'Marketing Executive'</span><span class="token punctuation">;</span> </code></pre></li></ol><h4 id="修改数据-Update）"><a href="#修改数据-Update）" class="headerlink" title="修改数据(Update）"></a>修改数据(Update）</h4><p>    Update 语句用于修改表中的数据。</p><pre class="language-sql" data-language="sql"><code class="language-sql">          <span class="token keyword">update</span> tb_name <span class="token keyword">set</span> 列名称 <span class="token operator">=</span> 新值 <span class="token keyword">where</span> 列名称 <span class="token operator">=</span> 某值<span class="token punctuation">;</span></code></pre><h4 id="删除数据-Delete"><a href="#删除数据-Delete" class="headerlink" title="删除数据(Delete)"></a>删除数据(Delete)</h4><p>      删除单行</p><pre class="language-sql" data-language="sql"><code class="language-sql">          <span class="token keyword">delete</span> <span class="token keyword">from</span> tb_name <span class="token keyword">where</span> 列名称 <span class="token operator">=</span> 某值<span class="token punctuation">;</span></code></pre><p>      删除所有行<br>          可以在不删除表的情况下删除所有的行。这意味着表的结构、属性和索引都是完整的：</p><pre class="language-sql" data-language="sql"><code class="language-sql">          格式：<span class="token keyword">delete</span> <span class="token operator">*</span> <span class="token keyword">from</span> tb_name   或  <span class="token keyword">delete</span> <span class="token keyword">from</span> tb_name<span class="token punctuation">;</span></code></pre><h3 id="MySQL-–-alter命令"><a href="#MySQL-–-alter命令" class="headerlink" title="MySQL – alter命令"></a>MySQL – alter命令</h3><p>alter add命令用来增加表的字段。<br>alter add命令格式：alter table 表名 add字段 类型 其他;</p><p>例如，在表MyClass中添加了一个字段passtest，类型为int(4)，默认值为0：</p><pre class="language-sql" data-language="sql"><code class="language-sql">mysql<span class="token operator">></span> <span class="token keyword">alter</span> <span class="token keyword">table</span> MyClass <span class="token keyword">add</span> passtest <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token string">'0'</span><span class="token punctuation">;</span></code></pre><p>添加两个字段 </p><pre class="language-sql" data-language="sql"><code class="language-sql">mysql<span class="token operator">></span> <span class="token keyword">alter</span> <span class="token keyword">table</span> Person <span class="token keyword">add</span> age <span class="token keyword">int</span><span class="token punctuation">,</span><span class="token keyword">add</span> address <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">;</span> </code></pre><p>删除两个字段</p><pre class="language-sql" data-language="sql"><code class="language-sql">mysql<span class="token operator">></span> <span class="token keyword">alter</span> <span class="token keyword">table</span> Person <span class="token keyword">drop</span> <span class="token keyword">column</span> age<span class="token punctuation">,</span><span class="token keyword">drop</span> <span class="token keyword">column</span> address<span class="token punctuation">;</span></code></pre><p>修改字段的注释</p><pre class="language-sql" data-language="sql"><code class="language-sql">mysql<span class="token operator">></span> <span class="token keyword">alter</span> <span class="token keyword">table</span> <span class="token punctuation">`</span>student<span class="token punctuation">`</span> <span class="token keyword">modify</span> <span class="token keyword">column</span> <span class="token punctuation">`</span>id<span class="token punctuation">`</span> <span class="token keyword">comment</span> <span class="token string">'学号'</span><span class="token punctuation">;</span></code></pre><ol><li>加索引<br> mysql&gt; alter table 表名 add index 索引名 (字段名1[，字段名2 …]);<pre class="language-sql" data-language="sql"><code class="language-sql">mysql<span class="token operator">></span> <span class="token keyword">alter</span> <span class="token keyword">table</span> employee <span class="token keyword">add</span> <span class="token keyword">index</span> emp_name <span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li>加主关键字的索引<br> mysql&gt; alter table 表名 add primary key (字段名);<pre class="language-sql" data-language="sql"><code class="language-sql">mysql<span class="token operator">></span> <span class="token keyword">alter</span> <span class="token keyword">table</span> employee <span class="token keyword">add</span> <span class="token keyword">primary</span> <span class="token keyword">key</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li>加唯一限制条件的索引<br> mysql&gt; alter table 表名 add unique 索引名 (字段名);<pre class="language-sql" data-language="sql"><code class="language-sql">mysql<span class="token operator">></span> <span class="token keyword">alter</span> <span class="token keyword">table</span> employee <span class="token keyword">add</span> <span class="token keyword">unique</span> emp_name2<span class="token punctuation">(</span>cardnumber<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li>删除某个索引<br> mysql&gt; alter table 表名 drop index 索引名;<pre class="language-sql" data-language="sql"><code class="language-sql">mysql<span class="token operator">></span><span class="token keyword">alter</span> <span class="token keyword">table</span> employee <span class="token keyword">drop</span> <span class="token keyword">index</span> emp_name<span class="token punctuation">;</span></code></pre></li><li>增加字段<pre class="language-sql" data-language="sql"><code class="language-sql">mysql<span class="token operator">></span> <span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> table_name <span class="token keyword">ADD</span> field_name field_type<span class="token punctuation">;</span></code></pre></li><li>修改原字段名称及类型<pre class="language-sql" data-language="sql"><code class="language-sql">mysql<span class="token operator">></span> <span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> table_name CHANGE old_field_name new_field_name field_type<span class="token punctuation">;</span></code></pre></li><li>删除字段<pre class="language-sql" data-language="sql"><code class="language-sql">MySQL <span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> table_name <span class="token keyword">DROP</span> field_name<span class="token punctuation">;</span></code></pre><h3 id="备份数据库"><a href="#备份数据库" class="headerlink" title="备份数据库"></a>备份数据库</h3></li></ol><blockquote><p>命令在DOS的[url=file://\mysql\bin]\mysql\bin[/url]目录下执行</p></blockquote><hr><p>1.导出整个数据库<br>导出文件默认是存在mysql\bin目录下</p><pre class="language-sql" data-language="sql"><code class="language-sql">mysqldump <span class="token operator">-</span>u 用户名 <span class="token operator">-</span>p 数据库名 <span class="token operator">></span> 导出的文件名mysqldump <span class="token operator">-</span>u user_name <span class="token operator">-</span>p123456 database_name <span class="token operator">></span> outfile_name<span class="token punctuation">.</span><span class="token keyword">sql</span></code></pre><p>2.导出一个表</p><pre class="language-sql" data-language="sql"><code class="language-sql">mysqldump <span class="token operator">-</span>u 用户名 <span class="token operator">-</span>p 数据库名 表名<span class="token operator">></span> 导出的文件名mysqldump <span class="token operator">-</span>u user_name <span class="token operator">-</span>p database_name table_name <span class="token operator">></span> outfile_name<span class="token punctuation">.</span><span class="token keyword">sql</span></code></pre><p>3.导出一个数据库结构</p><pre class="language-sql" data-language="sql"><code class="language-sql">mysqldump <span class="token operator">-</span>u user_name <span class="token operator">-</span>p <span class="token operator">-</span>d –<span class="token keyword">add</span><span class="token operator">-</span><span class="token keyword">drop</span><span class="token operator">-</span><span class="token keyword">table</span> database_name <span class="token operator">></span> outfile_name<span class="token punctuation">.</span><span class="token keyword">sql</span><span class="token operator">-</span>d 没有数据 –<span class="token keyword">add</span><span class="token operator">-</span><span class="token keyword">drop</span><span class="token operator">-</span><span class="token keyword">table</span> 在每个<span class="token keyword">create</span>语句之前增加一个<span class="token keyword">drop</span> <span class="token keyword">table</span></code></pre><p>4.带语言参数导出</p><pre class="language-sql" data-language="sql"><code class="language-sql">mysqldump <span class="token operator">-</span>uroot <span class="token operator">-</span>p –<span class="token keyword">default</span><span class="token operator">-</span><span class="token keyword">character</span><span class="token operator">-</span><span class="token keyword">set</span><span class="token operator">=</span>latin1 –<span class="token keyword">set</span><span class="token operator">-</span><span class="token keyword">charset</span><span class="token operator">=</span>gbk –skip<span class="token operator">-</span>opt database_name <span class="token operator">></span> outfile_name<span class="token punctuation">.</span><span class="token keyword">sql</span></code></pre><p>例如，将aaa库备份到文件back_aaa中：</p><pre class="language-sql" data-language="sql"><code class="language-sql">　　<span class="token punctuation">[</span>root<span class="token variable">@test1</span> root<span class="token punctuation">]</span><span class="token comment"># cd　/home/data/mysql</span>　　<span class="token punctuation">[</span>root<span class="token variable">@test1</span> mysql<span class="token punctuation">]</span><span class="token comment"># mysqldump -u root -p --opt aaa > back_aaa</span></code></pre><h3 id="MySQL-–-应用"><a href="#MySQL-–-应用" class="headerlink" title="MySQL – 应用"></a>MySQL – 应用</h3><pre><code>            学生-课程数据库</code></pre><p> 学生表：Student（Sno，Sname，Ssex，Sage，Sdept）<br> 课程表：Course（Cno，Cname，Cpno，Ccredit）<br> 学生选课表：SC（Sno，Cno，Grade）<br> 关系的主码加下划线表示。各个表中的数据示例如图所示：</p><pre><code>        Student表</code></pre><table><thead><tr><th align="center">Sno</th><th align="center">Sname</th><th>Ssex</th><th align="center">Sage</th><th align="center">Sdept</th></tr></thead><tbody><tr><td align="center">20180001</td><td align="center">张三</td><td>男</td><td align="center">20</td><td align="center">CS</td></tr><tr><td align="center">20180002</td><td align="center">李四</td><td>男</td><td align="center">19</td><td align="center">CS</td></tr><tr><td align="center">20180003</td><td align="center">王五</td><td>男</td><td align="center">18</td><td align="center">MA</td></tr><tr><td align="center">20180004</td><td align="center">赵六</td><td>男</td><td align="center">20</td><td align="center">IS</td></tr></tbody></table><pre><code>        Course表</code></pre><table><thead><tr><th align="center">Cno</th><th align="center">Cname</th><th align="center">Cpno</th><th align="center">Ccredit</th></tr></thead><tbody><tr><td align="center">1</td><td align="center">数据库</td><td align="center">5</td><td align="center">4</td></tr><tr><td align="center">2</td><td align="center">数学</td><td align="center"></td><td align="center">2</td></tr><tr><td align="center">3</td><td align="center">信息系统</td><td align="center">1</td><td align="center">4</td></tr><tr><td align="center">4</td><td align="center">操作系统</td><td align="center">6</td><td align="center">3</td></tr><tr><td align="center">5</td><td align="center">数据结构</td><td align="center">7</td><td align="center">4</td></tr><tr><td align="center">6</td><td align="center">数据处理</td><td align="center"></td><td align="center">2</td></tr><tr><td align="center">7</td><td align="center">PASCAL语言</td><td align="center">6</td><td align="center">4</td></tr></tbody></table><pre><code>        SC表</code></pre><table><thead><tr><th align="center">Sno</th><th align="center">Cno</th><th align="center">Grade</th></tr></thead><tbody><tr><td align="center">20180001</td><td align="center">2</td><td align="center">85</td></tr><tr><td align="center">20180001</td><td align="center">3</td><td align="center">88</td></tr><tr><td align="center">20180002</td><td align="center">2</td><td align="center">90</td></tr><tr><td align="center">20180002</td><td align="center">3</td><td align="center">80</td></tr></tbody></table><p>建立一个“学生”表Student：</p><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">table</span> Student<span class="token punctuation">(</span>  Sno <span class="token keyword">char</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span> <span class="token keyword">primary</span> <span class="token keyword">key</span><span class="token punctuation">,</span> <span class="token comment">/*列级完整性约束条件，Sno是主码*/</span>  Sname <span class="token keyword">char</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token keyword">unique</span><span class="token punctuation">,</span> <span class="token comment">/* Sname取唯一值*/</span>  Ssex <span class="token keyword">char</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  Sage <span class="token keyword">smallint</span><span class="token punctuation">,</span>  Sdept <span class="token keyword">char</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>建立一个“课程”表Course：</p><pre class="language-sql" data-language="sql"><code class="language-sql">建立一个“课程”表Course：<span class="token keyword">create</span> <span class="token keyword">table</span> Course<span class="token punctuation">(</span>  Sno <span class="token keyword">char</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token keyword">primary</span> <span class="token keyword">key</span><span class="token punctuation">,</span> <span class="token comment">/*列级完整性约束条件，Cname不能取空值*/</span>  Sname <span class="token keyword">char</span><span class="token punctuation">(</span><span class="token number">40</span><span class="token punctuation">)</span> <span class="token operator">not</span> <span class="token boolean">null</span><span class="token punctuation">,</span> <span class="token comment">/*Cpno的含义是先修课*/</span>  Cpno <span class="token keyword">char</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  Ccredit <span class="token keyword">smallint</span><span class="token punctuation">,</span>  <span class="token keyword">foreign</span> <span class="token keyword">key</span> <span class="token punctuation">(</span>Cpno<span class="token punctuation">)</span> <span class="token keyword">references</span> Course<span class="token punctuation">(</span>Cno<span class="token punctuation">)</span> <span class="token comment">/*表级完整性约束条件，Cpno是外码，被参照表是Course，被参照列是Cno*/</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>建立学生选课表SC：</p><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">table</span> SC<span class="token punctuation">(</span>  Sno <span class="token keyword">char</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  Cno <span class="token keyword">char</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  Grade <span class="token keyword">smallint</span><span class="token punctuation">,</span>  frimary <span class="token keyword">key</span> <span class="token punctuation">(</span>Sno<span class="token punctuation">,</span>Cno<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">/*主码由两个属性构成，必须作为表级完整性进行定义*/</span>  <span class="token keyword">foreign</span> <span class="token keyword">key</span> <span class="token punctuation">(</span>Sno<span class="token punctuation">)</span> <span class="token keyword">references</span> Student<span class="token punctuation">(</span>Sno<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">/*表级完整性约束条件，Sno是外码，被参照表是Student*/</span>  <span class="token keyword">foreign</span> <span class="token keyword">key</span> <span class="token punctuation">(</span>Cno<span class="token punctuation">)</span> <span class="token keyword">references</span> Course<span class="token punctuation">(</span>Cno<span class="token punctuation">)</span>   <span class="token comment">/*表级完整性约束条件，Cno是外码，被参照表是Course */</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;/images/posts/Database/sql/mysql.png&quot; alt=&quot;mysql&quot;&gt;&lt;br&gt;MYSQL的一些指令，省的自己记不住🙃🙃🙃&lt;/p&gt;</summary>
    
    
    
    <category term="OUT_LEARN" scheme="https://handsomelv.top/categories/OUT-LEARN/"/>
    
    
    <category term="DATABASE" scheme="https://handsomelv.top/tags/DATABASE/"/>
    
  </entry>
  
  <entry>
    <title>Web Crawler</title>
    <link href="https://handsomelv.top/2021/04/23/Python/crawler/"/>
    <id>https://handsomelv.top/2021/04/23/Python/crawler/</id>
    <published>2021-04-23T04:21:22.000Z</published>
    <updated>2021-12-12T15:14:22.534Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><img src="/images/posts/Python/crawler/%E7%88%AC%E8%99%AB.png" alt="爬虫" loading="lazy"><br>        欢迎来到web crawler——对于微博文字和图片的爬取。<br>    注：本爬取方式不需cookie🤪🤪🤪</p><span id="more"></span><h2 id="快速开始"><a href="#快速开始" class="headerlink" title="快速开始"></a>快速开始</h2><h3 id="选定接收地址和爬取对象"><a href="#选定接收地址和爬取对象" class="headerlink" title="选定接收地址和爬取对象"></a>选定接收地址和爬取对象</h3><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment">#选定的接收地址</span>path <span class="token operator">=</span> <span class="token string">''</span><span class="token comment">#爬取对象的ID</span><span class="token builtin">id</span> <span class="token operator">=</span> <span class="token string">''</span>proxy_addr <span class="token operator">=</span> <span class="token string">"122.241.72.191:808"</span>pic_num <span class="token operator">=</span> <span class="token number">0</span>weibo_name <span class="token operator">=</span> <span class="token string">""</span><span class="token comment">#微博名称，即所要保存的文件夹名称</span></code></pre><h3 id="request-访问获取网页信息"><a href="#request-访问获取网页信息" class="headerlink" title="request 访问获取网页信息"></a>request 访问获取网页信息</h3><p>通过运用python中的request库，requests 库中的 get()方法能向服务器发送了一个请求，请求类型为HTTP协议的GET方式，对网页信息进行读取。将需要接收的编码以utf-8的形式接收。代理服务器（Proxy Server）的功能是代理网络用户去取得网络信息。形象地说，它是网络信息的中转站，是个人网络和Internet服务商之间的中间代理机构，负责转发合法的网络信息，对转发进行控制和登记</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">use_proxy</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> proxy_addr<span class="token punctuation">)</span><span class="token punctuation">:</span>    req <span class="token operator">=</span> urllib<span class="token punctuation">.</span>request<span class="token punctuation">.</span>Request<span class="token punctuation">(</span>url<span class="token punctuation">)</span>    req<span class="token punctuation">.</span>add_header<span class="token punctuation">(</span><span class="token string">"User-Agent"</span><span class="token punctuation">,</span><span class="token string">"Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/49.0.2623.221 Safari/537.36 SE 2.X MetaSr 1.0"</span><span class="token punctuation">)</span>    proxy <span class="token operator">=</span> urllib<span class="token punctuation">.</span>request<span class="token punctuation">.</span>ProxyHandler<span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">'http'</span><span class="token punctuation">:</span> proxy_addr<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    opener <span class="token operator">=</span> urllib<span class="token punctuation">.</span>request<span class="token punctuation">.</span>build_opener<span class="token punctuation">(</span>proxy<span class="token punctuation">,</span> urllib<span class="token punctuation">.</span>request<span class="token punctuation">.</span>HTTPHandler<span class="token punctuation">)</span>    urllib<span class="token punctuation">.</span>request<span class="token punctuation">.</span>install_opener<span class="token punctuation">(</span>opener<span class="token punctuation">)</span>    data <span class="token operator">=</span> urllib<span class="token punctuation">.</span>request<span class="token punctuation">.</span>urlopen<span class="token punctuation">(</span>req<span class="token punctuation">)</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">,</span> <span class="token string">'ignore'</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> data</code></pre><h3 id="获取爬取对象的基本信息"><a href="#获取爬取对象的基本信息" class="headerlink" title="获取爬取对象的基本信息"></a>获取爬取对象的基本信息</h3><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">get_userInfo</span><span class="token punctuation">(</span><span class="token builtin">id</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    url <span class="token operator">=</span> <span class="token string">'https://m.weibo.cn/api/container/getIndex?type=uid&amp;value='</span> <span class="token operator">+</span> <span class="token builtin">id</span>    data <span class="token operator">=</span> use_proxy<span class="token punctuation">(</span>url<span class="token punctuation">,</span> proxy_addr<span class="token punctuation">)</span>    content <span class="token operator">=</span> json<span class="token punctuation">.</span>loads<span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'data'</span><span class="token punctuation">)</span>    profile_image_url <span class="token operator">=</span> content<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'userInfo'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'profile_image_url'</span><span class="token punctuation">)</span>    description <span class="token operator">=</span> content<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'userInfo'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'description'</span><span class="token punctuation">)</span>    profile_url <span class="token operator">=</span> content<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'userInfo'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'profile_url'</span><span class="token punctuation">)</span>    verified <span class="token operator">=</span> content<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'userInfo'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'verified'</span><span class="token punctuation">)</span>    guanzhu <span class="token operator">=</span> content<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'userInfo'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'follow_count'</span><span class="token punctuation">)</span>    name <span class="token operator">=</span> content<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'userInfo'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'screen_name'</span><span class="token punctuation">)</span>    fensi <span class="token operator">=</span> content<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'userInfo'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'followers_count'</span><span class="token punctuation">)</span>    gender <span class="token operator">=</span> content<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'userInfo'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'gender'</span><span class="token punctuation">)</span>    urank <span class="token operator">=</span> content<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'userInfo'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'urank'</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"微博昵称："</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">"\n"</span> <span class="token operator">+</span> <span class="token string">"微博主页地址："</span> <span class="token operator">+</span> profile_url <span class="token operator">+</span> <span class="token string">"\n"</span> <span class="token operator">+</span> <span class="token string">"微博头像地址："</span> <span class="token operator">+</span> profile_image_url <span class="token operator">+</span> <span class="token string">"\n"</span> <span class="token operator">+</span> <span class="token string">"是否认证："</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>        verified<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"\n"</span> <span class="token operator">+</span> <span class="token string">"微博说明："</span> <span class="token operator">+</span> description <span class="token operator">+</span> <span class="token string">"\n"</span> <span class="token operator">+</span> <span class="token string">"关注人数："</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>guanzhu<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"\n"</span> <span class="token operator">+</span> <span class="token string">"粉丝数："</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>        fensi<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"\n"</span> <span class="token operator">+</span> <span class="token string">"性别："</span> <span class="token operator">+</span> gender <span class="token operator">+</span> <span class="token string">"\n"</span> <span class="token operator">+</span> <span class="token string">"微博等级："</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>urank<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"\n"</span><span class="token punctuation">)</span></code></pre><h3 id="对爬取对象的微博逐页进行爬取"><a href="#对爬取对象的微博逐页进行爬取" class="headerlink" title="对爬取对象的微博逐页进行爬取"></a>对爬取对象的微博逐页进行爬取</h3><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">get_weibo</span><span class="token punctuation">(</span><span class="token builtin">id</span><span class="token punctuation">,</span> <span class="token builtin">file</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">global</span> pic_num    i <span class="token operator">=</span> <span class="token number">1</span>    <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>        url <span class="token operator">=</span> <span class="token string">'https://m.weibo.cn/api/container/getIndex?type=uid&amp;value='</span> <span class="token operator">+</span> <span class="token builtin">id</span>        weibo_url <span class="token operator">=</span> <span class="token string">'https://m.weibo.cn/api/container/getIndex?type=uid&amp;value='</span> <span class="token operator">+</span> <span class="token builtin">id</span> <span class="token operator">+</span> <span class="token string">'&amp;containerid='</span> <span class="token operator">+</span> get_containerid<span class="token punctuation">(</span>            url<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'&amp;page='</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>            data <span class="token operator">=</span> use_proxy<span class="token punctuation">(</span>weibo_url<span class="token punctuation">,</span> proxy_addr<span class="token punctuation">)</span>            content <span class="token operator">=</span> json<span class="token punctuation">.</span>loads<span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'data'</span><span class="token punctuation">)</span>            cards <span class="token operator">=</span> content<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'cards'</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>cards<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>cards<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"-----正在爬取第"</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"页，第"</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"条微博------"</span><span class="token punctuation">)</span>                    card_type <span class="token operator">=</span> cards<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'card_type'</span><span class="token punctuation">)</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>card_type <span class="token operator">==</span> <span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                        mblog <span class="token operator">=</span> cards<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'mblog'</span><span class="token punctuation">)</span>                        attitudes_count <span class="token operator">=</span> mblog<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'attitudes_count'</span><span class="token punctuation">)</span>                        comments_count <span class="token operator">=</span> mblog<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'comments_count'</span><span class="token punctuation">)</span>                        created_at <span class="token operator">=</span> mblog<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'created_at'</span><span class="token punctuation">)</span>                        reposts_count <span class="token operator">=</span> mblog<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'reposts_count'</span><span class="token punctuation">)</span>                        scheme <span class="token operator">=</span> cards<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'scheme'</span><span class="token punctuation">)</span>                        text <span class="token operator">=</span> mblog<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'text'</span><span class="token punctuation">)</span>                        <span class="token keyword">if</span> mblog<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'pics'</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token boolean">None</span><span class="token punctuation">:</span>                            <span class="token comment"># print(mblog.get('original_pic'))</span>                            <span class="token comment"># print(mblog.get('pics'))</span>                            pic_archive <span class="token operator">=</span> mblog<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'pics'</span><span class="token punctuation">)</span>                            <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>pic_archive<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                                pic_num <span class="token operator">+=</span> <span class="token number">1</span>                                <span class="token keyword">print</span><span class="token punctuation">(</span>pic_archive<span class="token punctuation">[</span>_<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'large'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'url'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>                                imgurl <span class="token operator">=</span> pic_archive<span class="token punctuation">[</span>_<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'large'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'url'</span><span class="token punctuation">]</span>                                img <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>imgurl<span class="token punctuation">)</span>                                f <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span>path <span class="token operator">+</span> weibo_name <span class="token operator">+</span> <span class="token string">'\\'</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>pic_num<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>imgurl<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">'ab'</span><span class="token punctuation">)</span>  <span class="token comment"># 存储图片，多媒体文件需要参数b（二进制文件）</span>                                f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>img<span class="token punctuation">.</span>content<span class="token punctuation">)</span>  <span class="token comment"># 多媒体存储content</span>                                f<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>                        <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token builtin">file</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> fh<span class="token punctuation">:</span>                            fh<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">"----第"</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"页，第"</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"条微博----"</span> <span class="token operator">+</span> <span class="token string">"\n"</span><span class="token punctuation">)</span>                            fh<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">"微博地址："</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>scheme<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"\n"</span> <span class="token operator">+</span> <span class="token string">"发布时间："</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>                                created_at<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"\n"</span> <span class="token operator">+</span> <span class="token string">"微博内容："</span> <span class="token operator">+</span> text <span class="token operator">+</span> <span class="token string">"\n"</span> <span class="token operator">+</span> <span class="token string">"点赞数："</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>                                attitudes_count<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"\n"</span> <span class="token operator">+</span> <span class="token string">"评论数："</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>comments_count<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"\n"</span> <span class="token operator">+</span> <span class="token string">"转发数："</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>                                reposts_count<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"\n"</span><span class="token punctuation">)</span>                i <span class="token operator">+=</span> <span class="token number">1</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                <span class="token keyword">break</span>        <span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>            <span class="token keyword">pass</span></code></pre><h3 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h3><p>完整代码如下：</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment"># -*- coding: utf-8 -*-</span><span class="token keyword">import</span> urllib<span class="token punctuation">.</span>request<span class="token keyword">import</span> json<span class="token keyword">import</span> requests<span class="token keyword">import</span> ospath <span class="token operator">=</span> <span class="token string">''</span><span class="token builtin">id</span> <span class="token operator">=</span> <span class="token string">''</span>proxy_addr <span class="token operator">=</span> <span class="token string">"122.241.72.191:808"</span>pic_num <span class="token operator">=</span> <span class="token number">0</span>weibo_name <span class="token operator">=</span> <span class="token string">""</span><span class="token keyword">def</span> <span class="token function">use_proxy</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> proxy_addr<span class="token punctuation">)</span><span class="token punctuation">:</span>    req <span class="token operator">=</span> urllib<span class="token punctuation">.</span>request<span class="token punctuation">.</span>Request<span class="token punctuation">(</span>url<span class="token punctuation">)</span>    req<span class="token punctuation">.</span>add_header<span class="token punctuation">(</span><span class="token string">"User-Agent"</span><span class="token punctuation">,</span><span class="token string">"Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/49.0.2623.221 Safari/537.36 SE 2.X MetaSr 1.0"</span><span class="token punctuation">)</span>    proxy <span class="token operator">=</span> urllib<span class="token punctuation">.</span>request<span class="token punctuation">.</span>ProxyHandler<span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">'http'</span><span class="token punctuation">:</span> proxy_addr<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    opener <span class="token operator">=</span> urllib<span class="token punctuation">.</span>request<span class="token punctuation">.</span>build_opener<span class="token punctuation">(</span>proxy<span class="token punctuation">,</span> urllib<span class="token punctuation">.</span>request<span class="token punctuation">.</span>HTTPHandler<span class="token punctuation">)</span>    urllib<span class="token punctuation">.</span>request<span class="token punctuation">.</span>install_opener<span class="token punctuation">(</span>opener<span class="token punctuation">)</span>    data <span class="token operator">=</span> urllib<span class="token punctuation">.</span>request<span class="token punctuation">.</span>urlopen<span class="token punctuation">(</span>req<span class="token punctuation">)</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">,</span> <span class="token string">'ignore'</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> data<span class="token keyword">def</span> <span class="token function">get_containerid</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">:</span>    data <span class="token operator">=</span> use_proxy<span class="token punctuation">(</span>url<span class="token punctuation">,</span> proxy_addr<span class="token punctuation">)</span>    content <span class="token operator">=</span> json<span class="token punctuation">.</span>loads<span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'data'</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> data <span class="token keyword">in</span> content<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'tabsInfo'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'tabs'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>data<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'tab_type'</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">'weibo'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            containerid <span class="token operator">=</span> data<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'containerid'</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> containerid<span class="token keyword">def</span> <span class="token function">get_userInfo</span><span class="token punctuation">(</span><span class="token builtin">id</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    url <span class="token operator">=</span> <span class="token string">'https://m.weibo.cn/api/container/getIndex?type=uid&amp;value='</span> <span class="token operator">+</span> <span class="token builtin">id</span>    data <span class="token operator">=</span> use_proxy<span class="token punctuation">(</span>url<span class="token punctuation">,</span> proxy_addr<span class="token punctuation">)</span>    content <span class="token operator">=</span> json<span class="token punctuation">.</span>loads<span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'data'</span><span class="token punctuation">)</span>    profile_image_url <span class="token operator">=</span> content<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'userInfo'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'profile_image_url'</span><span class="token punctuation">)</span>    description <span class="token operator">=</span> content<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'userInfo'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'description'</span><span class="token punctuation">)</span>    profile_url <span class="token operator">=</span> content<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'userInfo'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'profile_url'</span><span class="token punctuation">)</span>    verified <span class="token operator">=</span> content<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'userInfo'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'verified'</span><span class="token punctuation">)</span>    guanzhu <span class="token operator">=</span> content<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'userInfo'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'follow_count'</span><span class="token punctuation">)</span>    name <span class="token operator">=</span> content<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'userInfo'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'screen_name'</span><span class="token punctuation">)</span>    fensi <span class="token operator">=</span> content<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'userInfo'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'followers_count'</span><span class="token punctuation">)</span>    gender <span class="token operator">=</span> content<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'userInfo'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'gender'</span><span class="token punctuation">)</span>    urank <span class="token operator">=</span> content<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'userInfo'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'urank'</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"微博昵称："</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">"\n"</span> <span class="token operator">+</span> <span class="token string">"微博主页地址："</span> <span class="token operator">+</span> profile_url <span class="token operator">+</span> <span class="token string">"\n"</span> <span class="token operator">+</span> <span class="token string">"微博头像地址："</span> <span class="token operator">+</span> profile_image_url <span class="token operator">+</span> <span class="token string">"\n"</span> <span class="token operator">+</span> <span class="token string">"是否认证："</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>        verified<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"\n"</span> <span class="token operator">+</span> <span class="token string">"微博说明："</span> <span class="token operator">+</span> description <span class="token operator">+</span> <span class="token string">"\n"</span> <span class="token operator">+</span> <span class="token string">"关注人数："</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>guanzhu<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"\n"</span> <span class="token operator">+</span> <span class="token string">"粉丝数："</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>        fensi<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"\n"</span> <span class="token operator">+</span> <span class="token string">"性别："</span> <span class="token operator">+</span> gender <span class="token operator">+</span> <span class="token string">"\n"</span> <span class="token operator">+</span> <span class="token string">"微博等级："</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>urank<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">get_weibo</span><span class="token punctuation">(</span><span class="token builtin">id</span><span class="token punctuation">,</span> <span class="token builtin">file</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">global</span> pic_num    i <span class="token operator">=</span> <span class="token number">1</span>    <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>        url <span class="token operator">=</span> <span class="token string">'https://m.weibo.cn/api/container/getIndex?type=uid&amp;value='</span> <span class="token operator">+</span> <span class="token builtin">id</span>        weibo_url <span class="token operator">=</span> <span class="token string">'https://m.weibo.cn/api/container/getIndex?type=uid&amp;value='</span> <span class="token operator">+</span> <span class="token builtin">id</span> <span class="token operator">+</span> <span class="token string">'&amp;containerid='</span> <span class="token operator">+</span> get_containerid<span class="token punctuation">(</span>            url<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'&amp;page='</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>            data <span class="token operator">=</span> use_proxy<span class="token punctuation">(</span>weibo_url<span class="token punctuation">,</span> proxy_addr<span class="token punctuation">)</span>            content <span class="token operator">=</span> json<span class="token punctuation">.</span>loads<span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'data'</span><span class="token punctuation">)</span>            cards <span class="token operator">=</span> content<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'cards'</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>cards<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>cards<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"-----正在爬取第"</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"页，第"</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"条微博------"</span><span class="token punctuation">)</span>                    card_type <span class="token operator">=</span> cards<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'card_type'</span><span class="token punctuation">)</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>card_type <span class="token operator">==</span> <span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                        mblog <span class="token operator">=</span> cards<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'mblog'</span><span class="token punctuation">)</span>                        attitudes_count <span class="token operator">=</span> mblog<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'attitudes_count'</span><span class="token punctuation">)</span>                        comments_count <span class="token operator">=</span> mblog<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'comments_count'</span><span class="token punctuation">)</span>                        created_at <span class="token operator">=</span> mblog<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'created_at'</span><span class="token punctuation">)</span>                        reposts_count <span class="token operator">=</span> mblog<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'reposts_count'</span><span class="token punctuation">)</span>                        scheme <span class="token operator">=</span> cards<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'scheme'</span><span class="token punctuation">)</span>                        text <span class="token operator">=</span> mblog<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'text'</span><span class="token punctuation">)</span>                        <span class="token keyword">if</span> mblog<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'pics'</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token boolean">None</span><span class="token punctuation">:</span>                            <span class="token comment"># print(mblog.get('original_pic'))</span>                            <span class="token comment"># print(mblog.get('pics'))</span>                            pic_archive <span class="token operator">=</span> mblog<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'pics'</span><span class="token punctuation">)</span>                            <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>pic_archive<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                                pic_num <span class="token operator">+=</span> <span class="token number">1</span>                                <span class="token keyword">print</span><span class="token punctuation">(</span>pic_archive<span class="token punctuation">[</span>_<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'large'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'url'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>                                imgurl <span class="token operator">=</span> pic_archive<span class="token punctuation">[</span>_<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'large'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'url'</span><span class="token punctuation">]</span>                                img <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>imgurl<span class="token punctuation">)</span>                                f <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span>path <span class="token operator">+</span> weibo_name <span class="token operator">+</span> <span class="token string">'\\'</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>pic_num<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>imgurl<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">'ab'</span><span class="token punctuation">)</span>  <span class="token comment"># 存储图片，多媒体文件需要参数b（二进制文件）</span>                                f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>img<span class="token punctuation">.</span>content<span class="token punctuation">)</span>  <span class="token comment"># 多媒体存储content</span>                                f<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>                        <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token builtin">file</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> fh<span class="token punctuation">:</span>                            fh<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">"----第"</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"页，第"</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"条微博----"</span> <span class="token operator">+</span> <span class="token string">"\n"</span><span class="token punctuation">)</span>                            fh<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">"微博地址："</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>scheme<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"\n"</span> <span class="token operator">+</span> <span class="token string">"发布时间："</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>                                created_at<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"\n"</span> <span class="token operator">+</span> <span class="token string">"微博内容："</span> <span class="token operator">+</span> text <span class="token operator">+</span> <span class="token string">"\n"</span> <span class="token operator">+</span> <span class="token string">"点赞数："</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>                                attitudes_count<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"\n"</span> <span class="token operator">+</span> <span class="token string">"评论数："</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>comments_count<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"\n"</span> <span class="token operator">+</span> <span class="token string">"转发数："</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>                                reposts_count<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"\n"</span><span class="token punctuation">)</span>                i <span class="token operator">+=</span> <span class="token number">1</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                <span class="token keyword">break</span>        <span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>            <span class="token keyword">pass</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>isdir<span class="token punctuation">(</span>path <span class="token operator">+</span> weibo_name<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">pass</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        os<span class="token punctuation">.</span>mkdir<span class="token punctuation">(</span>path <span class="token operator">+</span> weibo_name<span class="token punctuation">)</span>    <span class="token builtin">file</span> <span class="token operator">=</span> path <span class="token operator">+</span> weibo_name <span class="token operator">+</span> <span class="token string">'\\'</span> <span class="token operator">+</span> weibo_name <span class="token operator">+</span> <span class="token string">".txt"</span>    get_userInfo<span class="token punctuation">(</span><span class="token builtin">id</span><span class="token punctuation">)</span>    get_weibo<span class="token punctuation">(</span><span class="token builtin">id</span><span class="token punctuation">,</span> <span class="token builtin">file</span><span class="token punctuation">)</span></code></pre>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;/images/posts/Python/crawler/%E7%88%AC%E8%99%AB.png&quot; alt=&quot;爬虫&quot;&gt;&lt;br&gt;        欢迎来到web crawler——对于微博文字和图片的爬取。&lt;br&gt;    注：本爬取方式不需cookie🤪🤪🤪&lt;/p&gt;</summary>
    
    
    
    <category term="OUT_LEARN" scheme="https://handsomelv.top/categories/OUT-LEARN/"/>
    
    
    <category term="PYTHON" scheme="https://handsomelv.top/tags/PYTHON/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://handsomelv.top/2021/04/22/hello-world/"/>
    <id>https://handsomelv.top/2021/04/22/hello-world/</id>
    <published>2021-04-22T11:58:10.299Z</published>
    <updated>2021-04-22T11:58:10.299Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class="language-bash" data-language="bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class="language-bash" data-language="bash"><code class="language-bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class="language-bash" data-language="bash"><code class="language-bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class="language-bash" data-language="bash"><code class="language-bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    
  </entry>
  
</feed>
