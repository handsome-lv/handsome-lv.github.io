<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>MySQL运维篇</title>
      <link href="/2022/10/31/Database_Learn/MySQL/mysql_operations/"/>
      <url>/2022/10/31/Database_Learn/MySQL/mysql_operations/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="日志"><a href="#日志" class="headerlink" title="日志"></a>日志</h4><h5 id="错误日志"><a href="#错误日志" class="headerlink" title="错误日志"></a>错误日志</h5><blockquote><p>错误日志是MySQL中最重要的日志之一，记录了当mysqld启动和停止时，以及服务器在运行过程中发生任何严重错误时的相关信息。</p><p>日志默认开启，存放目录：/var/log/，默认日志名称：mysqld.log</p><p>查看日志：</p><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">show</span> variables <span class="token operator">like</span> <span class="token string">'%log_error%'</span> </code></pre></blockquote><h5 id="二进制日志"><a href="#二进制日志" class="headerlink" title="二进制日志"></a>二进制日志</h5><blockquote><p>二进制日志（BINLOG）记录了所有的DDL语句和DML语句，但不包括数据查询语句</p><p>作用：</p><ul><li>灾难时的数据恢复</li><li>MySQL的主从复制</li></ul><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">show</span> variables <span class="token operator">like</span> <span class="token string">'%log_bin%'</span> </code></pre></blockquote><blockquote><p>日志格式，多种格式记录二进制日志</p><table><thead><tr><th>日志格式</th><th>含义</th></tr></thead><tbody><tr><td>STATEMENT</td><td>基于SQL语句的日志记录，记录的是SQL语句，对数据进行修改的SQL都会记录在日志文件中</td></tr><tr><td>ROW</td><td>基于行的日志记录，记录的是每一行的数据变更</td></tr><tr><td>MIXED</td><td>混合了STATEMENT和ROW两种格式，默认采用STATEMENT，某些情况切换ROW</td></tr></tbody></table><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">show</span> variables <span class="token operator">like</span> <span class="token string">'%binlog_format%'</span> </code></pre></blockquote><h5 id="查询日志"><a href="#查询日志" class="headerlink" title="查询日志"></a>查询日志</h5><blockquote><p>查询日志中记录了客户端的所有操作语句。默认关闭。</p><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">show</span> variables <span class="token operator">like</span> <span class="token string">'%general%'</span> </code></pre><p>修改MySQL的配置文件/etc/my.cnf文件</p><pre class="language-sql" data-language="sql"><code class="language-sql">该选项用来开启查询日志general_log<span class="token operator">=</span><span class="token number">1</span>设置日志的文件名，默认host_name_loggeneral_log_file <span class="token operator">=</span> mysql_query<span class="token punctuation">.</span>log</code></pre></blockquote><h5 id="慢查询日志"><a href="#慢查询日志" class="headerlink" title="慢查询日志"></a>慢查询日志</h5><blockquote><p>慢查询日志记录了所有执行时间超过参数设置值并且扫描记录数不小于min_examined_row_limit的所有的SQL语句的日志，默认未开启，</p><p>long_query_time默认为10秒，最小为0，精度可到微秒</p><pre class="language-sql" data-language="sql"><code class="language-sql">慢查询日志slow_query_log<span class="token operator">=</span><span class="token number">1</span>执行时间参数long_query_time<span class="token operator">=</span><span class="token number">2</span></code></pre></blockquote><h4 id="主从复制"><a href="#主从复制" class="headerlink" title="主从复制"></a>主从复制</h4><h5 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h5><blockquote><p>主从复制是指将主数据库的DDL和DML操作通过二进制日志传到服务器中，然后在从库上对这些日志重新执行，从而使从库和主库的数据保持一致</p><p>MySQL支持一台主库同时向多台从库进行复制，从库同时可以作为其他服务器的主库，实现链状复制</p><ul><li>主库出现问题，可以快速切换到从库提供服务</li><li>实现读写分离，降低主库的访问压力</li><li>可以在从库中执行备份，以避免备份期间影响主库服务</li></ul></blockquote><h5 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h5><ol><li>Master主库在事务提交时，会把数据变更记录在二进制日志文件Binlog中</li><li>从库读取主库的二进制日志文件Binlog，写入到从库的中继日志Relay Log</li><li>slave重做中继日志中的事件吗，将改变反映它自己的数据</li></ol><h4 id="分库分表"><a href="#分库分表" class="headerlink" title="分库分表"></a>分库分表</h4><h5 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h5><blockquote><p>问题分析：数据量指数式增长，单数据库以下性能瓶颈：</p><ul><li>IO瓶颈：热点数据太多，数据库缓存不足，产生大量磁盘IO，效率较低。请求数据太多，带宽不够，网络IO瓶颈</li><li>CPU瓶颈：排序、分组、连接查询、聚合统计等SQL会耗费大量的CPU资源，请求数太多，CPU出现瓶颈</li></ul><p>分库分表中心思想都是将数据分散存储，使得单一数据库的数据量变小来缓解单一数据库的性能问题，从而达到提升数据库性能的目的</p></blockquote><blockquote><p>拆分策略</p><p>垂直拆分：</p><ul><li>垂直分库：以表为依据，根据业务将不同表拆分到不同的库中<ul><li>每个库的表结构不一样</li><li>每个库的数据不一样</li><li>所有库的并集是全量数据</li></ul></li><li>垂直分表：以字段为依据，根据字段属性将不同的字段拆分带不同的表中<ul><li>每个表的结构不一样</li><li>每个表的数据不一样，一般通过一列（主键/外键）关联</li><li>所有库的并集是全量数据</li></ul></li></ul><p>水平拆分：</p><ul><li>水平分库：以字段为依据，将一个库的数据拆分到多个库中<ul><li>每个库的表结构都一样</li><li>每个库的数据不一样</li><li>所有库的并集是全量数据</li></ul></li><li>水平分表：以字段为依据，将一个表的数据拆分到多个表中<ul><li>每个库的表结构都一样</li><li>每个库的数据不一样</li><li>所有库的并集是全量数据</li></ul></li></ul></blockquote><h4 id="读写分离"><a href="#读写分离" class="headerlink" title="读写分离"></a>读写分离</h4>]]></content>
      
      
      <categories>
          
          <category> Out_Learn </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL进阶篇</title>
      <link href="/2022/10/27/Database_Learn/MySQL/mysql_advanced/"/>
      <url>/2022/10/27/Database_Learn/MySQL/mysql_advanced/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="MySQL体系结构"><a href="#MySQL体系结构" class="headerlink" title="MySQL体系结构"></a>MySQL体系结构</h4><blockquote><p>连接层，服务层，引擎层，存储层</p></blockquote><h4 id="存储引擎"><a href="#存储引擎" class="headerlink" title="存储引擎"></a>存储引擎</h4><h5 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h5><blockquote><p>存储引擎就是存储数据、建立索引、更新/查询数据等技术的实现方式。存储引擎是基于表的，而不是基于库的，所以存储引擎也被称表类型</p></blockquote><blockquote><p>创建表时指定存储引擎：</p><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">table</span> 表名<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">engine</span><span class="token operator">=</span><span class="token keyword">innodb</span> <span class="token punctuation">[</span><span class="token keyword">comment</span> 表注释<span class="token punctuation">]</span><span class="token punctuation">;</span></code></pre><p>查看当前数据库支持的存储引擎</p><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">show</span> engines<span class="token punctuation">;</span></code></pre></blockquote><h5 id="存储引擎特点"><a href="#存储引擎特点" class="headerlink" title="存储引擎特点"></a>存储引擎特点</h5><h6 id="InnoDB"><a href="#InnoDB" class="headerlink" title="InnoDB"></a>InnoDB</h6><blockquote><p>InnoDB是一种兼顾高可靠性和高性能的通用存储引擎，5.5后为默认引擎</p><p>特点：</p><ul><li>DML操作遵循ACID模型，支持事务</li><li>行级锁，提高并发访问性能</li><li>支持外键FOREIGN KEY约束，保证数据的完整性和正确性</li></ul><p>文件：</p><ul><li>xxx.ibd：xxx代表的是表名，innoDB引擎的每张表都会对应这样一个表空间文件，存储该表的表结构（frm、sdi）、数据和索引。</li><li>参数：innodb_file_per_table</li></ul></blockquote><h6 id="MyISAM"><a href="#MyISAM" class="headerlink" title="MyISAM"></a>MyISAM</h6><blockquote><p>MySQL早期的默认存储引擎</p><ul><li>不支持事务，不支持外键</li><li>支持表锁，不支持行锁</li><li>访问速度快</li></ul></blockquote><h6 id="Memory"><a href="#Memory" class="headerlink" title="Memory"></a>Memory</h6><blockquote><p>Memory引擎的表数据存储在内存中，作为临时表或缓存使用</p><ul><li>内存存放</li><li>hash索引</li></ul></blockquote><h5 id="存储引擎选择"><a href="#存储引擎选择" class="headerlink" title="存储引擎选择"></a>存储引擎选择</h5><blockquote><p>在选择存储引擎时，应该根据应用系统的特点选择合适的存储引擎。对于复杂的应用系统，还可以根据实际情况选择多种存储引擎进行组合。</p><ul><li>InnoDB：是Mysql的默认存储引擎，支持事务、外键。如果应用对事务的完整性有比较高的要求，在并发条件下要求数据的一致性，数据操作除了插入和查询之外，还包含很多的更新、删除操作，那么InnoDB存储引擎是比较合适的选择。</li><li>MyISAM： 如果应用是以读操作和插入操作为主，只有很少的更新和删除操作，并且对事务的完整性、并发性要求不是很高，那么选择这个存储引擎是非常合适的。</li><li>MEMORY：将所有数据保存在内存中，访问速度快，通常用于临时表及缓存。MEMORY的缺陷就是对表的大小有限制，太大的表无法缓存在内存中，而且无法保障数据的安全性。</li></ul></blockquote><h4 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h4><blockquote><p>索引是用来高效获取数据的数据结构</p></blockquote><h5 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a>优缺点</h5><blockquote><p>优点：</p><ul><li>提高数据检索的效率，降低数据库的IO成本</li><li>通过索引列对数据进行排序，降低数据排序的成本，降低CPU的消耗</li></ul><p>缺点：</p><ul><li>索引列占用大量空间</li><li>降低更新表的速度，增删改查效率低</li></ul></blockquote><h5 id="索引结构"><a href="#索引结构" class="headerlink" title="索引结构"></a>索引结构</h5><blockquote><p>二叉树：顺序插入时，会形成一个链表，查询性能大大降低，层级较深，检索速度慢</p></blockquote><h6 id="B-Tree"><a href="#B-Tree" class="headerlink" title="B-Tree"></a>B-Tree</h6><blockquote><p>多路平衡查找树</p><p>最大度数为5(5阶)，则每个节点最多存储4个key，5个指针，多者则向上分裂</p></blockquote><h6 id="B-Tree-1"><a href="#B-Tree-1" class="headerlink" title="B+Tree"></a>B+Tree</h6><blockquote><p>所有的元素都会存储在叶子节点，形成一个单向列表</p></blockquote><h6 id="Hash"><a href="#Hash" class="headerlink" title="Hash"></a>Hash</h6><blockquote><p>哈希索引就是采用一定的hash算法，将键值换算成新的hash值，映射到对应的槽位，然后存储在hash表中</p><ul><li>只能用于对等比较，不支持范围查询</li><li>无法利用索引完成排序操作</li><li>查询效率高</li></ul></blockquote><h5 id="索引分类"><a href="#索引分类" class="headerlink" title="索引分类"></a>索引分类</h5><blockquote><ul><li>主键索引：针对表中主键创建的索引，只能有一个，PRIMARY</li><li>唯一索引：避免同一个表中数据列中值重复，UNIQUE</li><li>常规索引：快速定位特定数据</li><li>全文索引：全文索引查找的是文本中的关键词，而不是比较索引的值，FULLTEXT</li></ul></blockquote><blockquote><p>InnoDB：回表查询</p><ul><li>聚集索引：将数据存储与索引放到一起，索引结构的叶子节点保存了行数据，有且一个</li><li>二级索引：将数据与索引分开存储，索引结构的叶子节点关联对应的主键</li></ul></blockquote><h5 id="索引语法"><a href="#索引语法" class="headerlink" title="索引语法"></a>索引语法</h5><blockquote><p>创建索引：</p><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token punctuation">[</span><span class="token keyword">unique</span><span class="token operator">|</span>fulltext<span class="token punctuation">]</span> <span class="token keyword">index</span> index_name <span class="token keyword">on</span> table_name <span class="token punctuation">(</span>index_col_name<span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>查看索引：</p><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">show</span> <span class="token keyword">index</span> <span class="token keyword">from</span> table_name<span class="token punctuation">;</span></code></pre><p>删除索引：</p><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">drop</span> <span class="token keyword">index</span> index_name <span class="token keyword">on</span> table_name<span class="token punctuation">;</span></code></pre></blockquote><h5 id="性能分析"><a href="#性能分析" class="headerlink" title="性能分析"></a>性能分析</h5><h6 id="SQL执行频率"><a href="#SQL执行频率" class="headerlink" title="SQL执行频率"></a>SQL执行频率</h6><blockquote><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">show</span> <span class="token punctuation">[</span><span class="token keyword">session</span><span class="token operator">|</span><span class="token keyword">global</span><span class="token punctuation">]</span> <span class="token keyword">status</span></code></pre><p>可以提供服务器状态信息</p><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">show</span> <span class="token punctuation">[</span><span class="token keyword">session</span><span class="token operator">|</span><span class="token keyword">global</span><span class="token punctuation">]</span> <span class="token keyword">status</span> <span class="token operator">like</span> <span class="token string">'com___'</span><span class="token punctuation">;</span></code></pre><p>可以查看当前数据库的增删改查的访问频次</p></blockquote><h6 id="慢查询日志"><a href="#慢查询日志" class="headerlink" title="慢查询日志"></a>慢查询日志</h6><blockquote><p>慢查询日志记录了所有执行时间超过指定参数（long_query_time，默认10秒）的所有SQL语句的日志。</p><p>MySQL的慢查询日志默认没有开启，需要在MySQL的配置文件（etc/my.cnf）中配置</p><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">show</span> variables <span class="token operator">like</span> <span class="token string">'slow_query_log'</span><span class="token punctuation">;</span>  查询慢查询日志情况</code></pre><pre class="language-cnf" data-language="cnf"><code class="language-cnf">#开启MySQL慢日志查询开关slow_query_log&#x3D;1#设置慢查询时间long_query_time&#x3D;2</code></pre></blockquote><h6 id="profile详情"><a href="#profile详情" class="headerlink" title="profile详情"></a>profile详情</h6><blockquote><p><code>show profiles</code>能够了解耗费之间去向。通过<code>have_profiling</code>参数，能够看到当前MySQL是否支持profile操作</p><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> @<span class="token variable">@have_profiling</span>； </code></pre><p>默认关闭，开启方式</p><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> @<span class="token variable">@profiling</span><span class="token punctuation">;</span><span class="token keyword">set</span> profiling<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span></code></pre><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token comment">#查看指定query_id的SQL语句各个阶段的耗时情况</span><span class="token keyword">show</span> profile <span class="token keyword">for</span> query query_id<span class="token punctuation">;</span><span class="token comment">#查看指定query_id的SQL语句CPU的使用情况</span><span class="token keyword">show</span> profile cpu <span class="token keyword">for</span> query query_id<span class="token punctuation">;</span></code></pre></blockquote><h6 id="explain执行计划"><a href="#explain执行计划" class="headerlink" title="explain执行计划"></a>explain执行计划</h6><blockquote><p>explain或者DESC命令获取MySQL如何执行select语句的信息，包括在select语句执行过程中表如何连接和连接的顺序</p><pre class="language-sql" data-language="sql"><code class="language-sql">直接在语句前加上关键字<span class="token keyword">explain</span>或<span class="token keyword">desc</span><span class="token keyword">explain</span> <span class="token keyword">select</span> 字段列表 <span class="token keyword">from</span> 表名 <span class="token keyword">where</span> 条件<span class="token punctuation">;</span></code></pre><ul><li>id：表示查询中执行select子句或者操作表的顺序（id相同，从上到下，不同越大先执行）</li><li>select_type：<ul><li>simple：简单表，即不用表连接和子查询</li><li>primary：主查询，即外层的查询</li><li>union：union联合查询中的第二个或者后面的语句</li><li>subquery：select/where之后包含了子查询语句</li></ul></li><li>type：表示连接类型，性能由好到差：null，system，const，eq_ref，ref，range，index，all</li><li>possible_key：显示可能应用在这张表上的索引，一个或多个</li><li>key：实际使用的索引，如果为null，则表示没有使用索引</li><li>key_len：表示索引中使用的字节数，该值为索引字段中最大可能长度，并非实际长度，越短越好</li><li>rows：MySQL认为必须要执行查询的行数，在innodb引擎的表中，是一个估计值，不准确</li><li>filtered：表示返回结果的行数占需读取行数的百分比，filtered越大越好</li></ul></blockquote><h5 id="使用规则"><a href="#使用规则" class="headerlink" title="使用规则"></a>使用规则</h5><h6 id="最左前缀法则"><a href="#最左前缀法则" class="headerlink" title="最左前缀法则"></a>最左前缀法则</h6><blockquote><p>如果索引了多列（联合索引，要遵循最左前缀法则。</p><p>根据联合索引执行计划</p><p>最左前缀法则指查询从索引的最左列开始，并且不跳过索引中的列。如果跳过，后面的索引将失效</p></blockquote><h6 id="索引失效"><a href="#索引失效" class="headerlink" title="索引失效"></a>索引失效</h6><blockquote><ul><li>索引列运算操作</li><li>字符串无引号</li><li>头部模糊匹配（尾部模糊匹配不会失效）</li></ul></blockquote><h6 id="数据分布影响"><a href="#数据分布影响" class="headerlink" title="数据分布影响"></a>数据分布影响</h6><blockquote><p>如果MySQL评估使用索引比全表扫描慢，则不使用索引</p></blockquote><h6 id="SQL提示"><a href="#SQL提示" class="headerlink" title="SQL提示"></a>SQL提示</h6><blockquote><p>在SQL语句中加入人为提示来优化操作、</p><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> xxx <span class="token keyword">use</span><span class="token operator">|</span><span class="token keyword">ignore</span><span class="token operator">|</span><span class="token keyword">force</span> <span class="token keyword">index</span><span class="token punctuation">(</span>index_xxx<span class="token punctuation">)</span> <span class="token keyword">where</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">;</span></code></pre><ul><li>use index：建议</li><li>ignore index：忽略</li><li>force index：强制</li></ul></blockquote><h6 id="覆盖索引"><a href="#覆盖索引" class="headerlink" title="覆盖索引"></a>覆盖索引</h6><blockquote><p>尽量使用覆盖索引：查询使用了索引，并且需要返回的列，在该索引中已经全部能够找到），减少<code>select *</code> </p></blockquote><h6 id="前缀索引"><a href="#前缀索引" class="headerlink" title="前缀索引"></a>前缀索引</h6><blockquote><p>对于字符串字段类型，索引很长，浪费磁盘IO，影响效率</p><p>取字符串前缀建立索引，提高效率</p><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">index</span> idx_xxx <span class="token keyword">on</span> table_name <span class="token punctuation">(</span>字段列表<span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><code>n</code>代表选择字段列表的前n个字符建立索引</p></blockquote><blockquote><p>可以根据索引的选择性决定前缀长度，而选择性指不重复的索引值和数据表的记录总数的总值</p><p>唯一索引选择性为1,性能最高</p><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token keyword">distinct</span> exxx<span class="token punctuation">)</span><span class="token operator">|</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">from</span> tb_xxx<span class="token punctuation">;</span><span class="token keyword">select</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token keyword">distinct</span> substring<span class="token punctuation">(</span>exxx<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">|</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">from</span> tb_xxx<span class="token punctuation">;</span></code></pre></blockquote><h6 id="单列索引和联合索引"><a href="#单列索引和联合索引" class="headerlink" title="单列索引和联合索引"></a>单列索引和联合索引</h6><blockquote><p>多个查询条件，建议建立联合索引</p></blockquote><h4 id="SQL优化"><a href="#SQL优化" class="headerlink" title="SQL优化"></a>SQL优化</h4><h5 id="插入数据"><a href="#插入数据" class="headerlink" title="插入数据"></a>插入数据</h5><blockquote><p><code>insert</code>优化：</p><ul><li>批量插入</li><li>手动提交事务</li><li>主键顺序插入</li></ul></blockquote><blockquote><p>大批量插入数据：</p><p>可以使用MySQL数据库提供的<code>load</code>指令进行插入</p><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token comment">#客户端连接服务端时，加上参数 --local-infile</span>mysql <span class="token comment">--local-infile -u root -p</span><span class="token comment">#设置全局参数local_infile为1，开启从本地加载文件导入数据的开关</span><span class="token keyword">set</span> <span class="token keyword">global</span> local_infile<span class="token operator">=</span><span class="token number">1</span><span class="token comment">#执行load指令将准备好的数据加载到表结构中</span><span class="token keyword">load</span> <span class="token keyword">data</span> <span class="token keyword">local</span> <span class="token keyword">infile</span> <span class="token string">'/root/sql'</span> <span class="token keyword">into</span> <span class="token keyword">table</span> <span class="token string">'xxx'</span> <span class="token keyword">fields</span> <span class="token keyword">terminated</span> <span class="token keyword">by</span> <span class="token string">','</span> <span class="token keyword">lines</span> <span class="token keyword">terminated</span> <span class="token keyword">by</span> <span class="token string">'\n'</span><span class="token punctuation">;</span></code></pre></blockquote><h5 id="主键优化"><a href="#主键优化" class="headerlink" title="主键优化"></a>主键优化</h5><blockquote><ul><li>尽量降低主键长度</li><li>插入数据时，尽量选择顺序插入，选择主键自增<code>auto_increment</code></li><li>尽量UID或身份证号做主键</li><li>避免修改主键</li></ul></blockquote><h5 id="排序order-by优化"><a href="#排序order-by优化" class="headerlink" title="排序order by优化"></a>排序order by优化</h5><blockquote><ul><li>Using filesort：通过表的索引或全表扫描，读取满足条件的数据行，然后在排序缓冲区中完成排序操作，所有不是通过索引直接返回排序结果的排序都叫Filesort排序</li><li>Using index：通过有序索引顺序扫描直接返回有序数据，不需要额外排序，操作效率高</li></ul></blockquote><h5 id="group-by优化"><a href="#group-by优化" class="headerlink" title="group by优化"></a>group by优化</h5><blockquote><p>建立联合索引后可以利用索引进行分组查询，提高效率</p></blockquote><h5 id="limit分页优化"><a href="#limit分页优化" class="headerlink" title="limit分页优化"></a>limit分页优化</h5><blockquote><p>通过覆盖索引或子查询将大数据limit查询某些数据的排序效率大大提高</p></blockquote><h5 id="count优化"><a href="#count优化" class="headerlink" title="count优化"></a>count优化</h5><blockquote><p>InnoDB是累计计数</p><p>优化方式：自己计数</p><ul><li>count(*)：总记录数，按行累加</li><li>count(主键)：总记录数，取主键id返回服务层，直接进行累加</li><li>count(字段)：非null记录数</li><li>count(1)：总记录数，对每一层置1，进行累加</li></ul></blockquote><h5 id="update优化"><a href="#update优化" class="headerlink" title="update优化"></a>update优化</h5><blockquote><p>没有索引，行锁将升级为表锁</p></blockquote><h4 id="视图"><a href="#视图" class="headerlink" title="视图"></a>视图</h4><blockquote><p>视图：虚拟存在的表，行和列数据来自自定义视图的查询中使用的表，并且是在使用视图时动态生成</p><p>视图保存了查询的SQL逻辑，不保留查询结果</p><p>类似额外存储数据库自选内容，方便快捷</p></blockquote><h5 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h5><h6 id="创建视图"><a href="#创建视图" class="headerlink" title="创建视图"></a>创建视图</h6><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token punctuation">[</span><span class="token operator">or</span> <span class="token keyword">replace</span><span class="token punctuation">]</span> <span class="token keyword">view</span> 视图名称<span class="token punctuation">[</span><span class="token punctuation">(</span>列名列表<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token keyword">as</span> <span class="token keyword">select</span>语句 <span class="token punctuation">[</span><span class="token keyword">with</span> <span class="token punctuation">[</span><span class="token keyword">cascaded</span><span class="token operator">|</span><span class="token keyword">local</span><span class="token punctuation">]</span> <span class="token keyword">check</span> <span class="token keyword">option</span><span class="token punctuation">]</span></code></pre><h6 id="查询视图"><a href="#查询视图" class="headerlink" title="查询视图"></a>查询视图</h6><pre class="language-sql" data-language="sql"><code class="language-sql">查看创建视图语句<span class="token keyword">show</span> <span class="token keyword">create</span> <span class="token keyword">view</span> 视图名称<span class="token punctuation">;</span>查看视图数据<span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> 视图名称<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">;</span></code></pre><h6 id="修改视图"><a href="#修改视图" class="headerlink" title="修改视图"></a>修改视图</h6><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token punctuation">[</span><span class="token operator">or</span> <span class="token keyword">replace</span><span class="token punctuation">]</span> <span class="token keyword">view</span> 视图名称<span class="token punctuation">[</span><span class="token punctuation">(</span>列名列表<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token keyword">as</span> <span class="token keyword">select</span>语句 <span class="token punctuation">[</span><span class="token keyword">with</span><span class="token operator">|</span><span class="token keyword">cascaded</span><span class="token operator">|</span><span class="token keyword">local</span><span class="token operator">|</span><span class="token keyword">check</span> <span class="token keyword">option</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">alter</span> <span class="token keyword">view</span> 视图名称<span class="token punctuation">[</span><span class="token punctuation">(</span>列名列表<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token keyword">as</span> <span class="token keyword">select</span>语句 <span class="token punctuation">[</span><span class="token keyword">with</span><span class="token operator">|</span><span class="token keyword">cascaded</span><span class="token operator">|</span><span class="token keyword">local</span><span class="token operator">|</span><span class="token keyword">check</span> <span class="token keyword">option</span><span class="token punctuation">]</span><span class="token punctuation">;</span></code></pre><h6 id="删除视图"><a href="#删除视图" class="headerlink" title="删除视图"></a>删除视图</h6><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">drop</span> <span class="token keyword">view</span> <span class="token punctuation">[</span><span class="token keyword">if</span> <span class="token keyword">exists</span><span class="token punctuation">]</span> 视图名称 <span class="token punctuation">[</span><span class="token punctuation">,</span>视图名称<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span></code></pre><h5 id="检查选项"><a href="#检查选项" class="headerlink" title="检查选项"></a>检查选项</h5><blockquote><p>使用<code>with check option</code>子句创建视图时，MySQL会通过视图检查正在更改的每个行，以使其符合视图的定义。</p><p>MySQL允许基于一个视图创建另一个视图。</p><p>为了确定检查范围，mysql提供了两个选项：</p><ul><li>cascaded(默认)：级联所有层级的视图限制条件，共享限制条件</li><li>local：仅仅向下级联限制条件</li></ul></blockquote><h5 id="更新及作用"><a href="#更新及作用" class="headerlink" title="更新及作用"></a>更新及作用</h5><h6 id="视图更新"><a href="#视图更新" class="headerlink" title="视图更新"></a>视图更新</h6><blockquote><p>视图中的行与基础表中的行必须存在一对一的关系。</p><p>下列情况视图不能更新：</p><ul><li>聚合函数或窗口函数（sum() , min() , max() , count()等）</li><li>distinct</li><li>group by</li><li>having</li><li>union或者union all</li></ul></blockquote><h6 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h6><blockquote><ul><li>简单：简化用户对数据的理解，简化操作。常用查询可被定义为视图</li><li>安全：数据库授权不能授权到特定行和列，通过视图用户只能查询和修改他们所能见到的数据</li><li>数据独立：视图可帮助用户屏蔽真实表结构变化带来的影响</li></ul></blockquote><h4 id="存储过程"><a href="#存储过程" class="headerlink" title="存储过程"></a>存储过程</h4><p>事先经过编译并存储子啊数据库中的一段SQL语句集合，减少数据在数据库和应用服务器之间的传输，提高效率。</p><h5 id="基本用法-1"><a href="#基本用法-1" class="headerlink" title="基本用法"></a>基本用法</h5><h6 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h6><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">procedure</span> 存储过程名称<span class="token punctuation">(</span><span class="token punctuation">[</span>参数列表<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">begin</span><span class="token comment">--sql语句</span><span class="token keyword">end</span><span class="token punctuation">;</span></code></pre><h6 id="调用"><a href="#调用" class="headerlink" title="调用"></a>调用</h6><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">call</span> 名称<span class="token punctuation">(</span><span class="token punctuation">[</span>参数<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h6 id="查看"><a href="#查看" class="headerlink" title="查看"></a>查看</h6><pre class="language-sql" data-language="sql"><code class="language-sql">查询指定数据库的存储过程及状态信息<span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> information_schema<span class="token punctuation">.</span>routines <span class="token keyword">where</span> routine_schema<span class="token operator">=</span><span class="token string">'xxx'</span><span class="token punctuation">;</span>查询某个存储过程的定义<span class="token keyword">show</span> <span class="token keyword">create</span> <span class="token keyword">procedure</span> 存储过程名称</code></pre><h6 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h6><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">drop</span> <span class="token keyword">procedure</span> <span class="token punctuation">[</span><span class="token keyword">if</span> <span class="token keyword">exists</span><span class="token punctuation">]</span> 存储过程名称<span class="token punctuation">;</span></code></pre><p>在命令行中，执行创建存储过程的SQL时，需要通过关键字<code>delimiter</code>指定SQL语句的结束符</p><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">delimiter</span> 结束符号<span class="token punctuation">;</span></code></pre><h5 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h5><h6 id="系统变量"><a href="#系统变量" class="headerlink" title="系统变量"></a>系统变量</h6><blockquote><p>系统变量是MySQL服务器提供，非用户定义，属于服务器层面。分为全局变量(Global)、会话变量(Session)</p></blockquote><blockquote><p>查看系统变量</p><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">show</span> <span class="token punctuation">[</span><span class="token keyword">session</span><span class="token operator">|</span><span class="token keyword">global</span><span class="token punctuation">]</span> variables<span class="token punctuation">;</span>查看所有系统变量<span class="token keyword">show</span> <span class="token punctuation">[</span><span class="token keyword">session</span><span class="token operator">|</span><span class="token keyword">global</span><span class="token punctuation">]</span> variables <span class="token operator">like</span> <span class="token string">'...'</span><span class="token punctuation">;</span>模糊匹配系统变量<span class="token keyword">select</span> @@<span class="token punctuation">[</span><span class="token keyword">session</span><span class="token operator">|</span><span class="token keyword">global</span><span class="token punctuation">]</span> 系统变量名<span class="token punctuation">;</span>查看指定变量</code></pre></blockquote><blockquote><p>设置系统变量</p><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">set</span> <span class="token punctuation">[</span><span class="token keyword">session</span><span class="token operator">|</span><span class="token keyword">global</span><span class="token punctuation">]</span> 系统变量名<span class="token operator">=</span>值<span class="token punctuation">;</span><span class="token keyword">set</span> @@<span class="token punctuation">[</span><span class="token keyword">session</span><span class="token operator">|</span><span class="token keyword">global</span><span class="token punctuation">]</span> 系统变量名<span class="token operator">=</span>值<span class="token punctuation">;</span></code></pre></blockquote><h6 id="用户定义变量"><a href="#用户定义变量" class="headerlink" title="用户定义变量"></a>用户定义变量</h6><blockquote><p>用户定义变量不用提前声明，直接‘’@变量名‘’使用，其作用域为当前连接</p></blockquote><blockquote><p>赋值</p><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">set</span> <span class="token variable">@var_name</span><span class="token operator">=</span>expr<span class="token punctuation">[</span><span class="token punctuation">,</span><span class="token variable">@var_name</span><span class="token operator">=</span>expr<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">;</span><span class="token keyword">set</span> <span class="token variable">@var_name</span>:<span class="token operator">=</span>expr<span class="token punctuation">[</span><span class="token punctuation">,</span><span class="token variable">@var_name</span>:<span class="token operator">=</span>expr<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">;</span></code></pre><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token variable">@var_name</span>:<span class="token operator">=</span>expr<span class="token punctuation">[</span><span class="token punctuation">,</span><span class="token variable">@var_name</span>:<span class="token operator">=</span>expr<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">;</span><span class="token keyword">select</span> 字段名 <span class="token keyword">into</span> <span class="token variable">@var_name</span> <span class="token keyword">from</span> 表名<span class="token punctuation">;</span></code></pre></blockquote><blockquote><p>使用</p><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token variable">@var_name</span><span class="token punctuation">;</span></code></pre></blockquote><h6 id="局部变量"><a href="#局部变量" class="headerlink" title="局部变量"></a>局部变量</h6><blockquote><p>局部变量访问之前，需要<code>declare</code>声明。可作为存储过程内的局部变量和输入参数，范围在<code>begin...end</code>内</p></blockquote><blockquote><p>声明</p><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">declare</span> 变量名 变量类型<span class="token punctuation">[</span><span class="token keyword">default</span> 默认值<span class="token punctuation">]</span><span class="token punctuation">;</span></code></pre></blockquote><blockquote><p>赋值</p><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">set</span> 变量名<span class="token operator">=</span>值<span class="token punctuation">;</span><span class="token keyword">set</span> 变量名:<span class="token operator">=</span>值<span class="token punctuation">;</span><span class="token keyword">select</span> 字段名 <span class="token keyword">into</span> 变量名 <span class="token keyword">from</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">;</span></code></pre></blockquote><h5 id="流程组成部分"><a href="#流程组成部分" class="headerlink" title="流程组成部分"></a>流程组成部分</h5><h6 id="if"><a href="#if" class="headerlink" title="if"></a>if</h6><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">if</span> 条件<span class="token number">1</span> <span class="token keyword">then</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token keyword">elseif</span> 条件<span class="token number">2</span> <span class="token keyword">then</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token keyword">else</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token keyword">end</span> <span class="token keyword">if</span><span class="token punctuation">;</span></code></pre><h6 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h6><table><thead><tr><th>类型</th><th>含义</th><th>备注</th></tr></thead><tbody><tr><td>in</td><td>该类参数作为输入，也就是需要调用时传入值</td><td>默认</td></tr><tr><td>out</td><td>该类参数作为输出，也就是该参数可以作为返回值</td><td></td></tr><tr><td>inout</td><td>既可以作为输入参数，也可以作为输出参数</td><td></td></tr></tbody></table><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">procedure</span> 存储过程名称<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token operator">in</span><span class="token operator">|</span><span class="token keyword">out</span><span class="token operator">|</span><span class="token keyword">inout</span> 参数名 参数类型<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">begin</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token keyword">end</span><span class="token punctuation">;</span></code></pre><h6 id="case"><a href="#case" class="headerlink" title="case"></a>case</h6><blockquote><p>语法1</p><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">case</span> case_value<span class="token keyword">when</span> when_value1 <span class="token keyword">then</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">[</span><span class="token keyword">else</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">]</span><span class="token keyword">end</span> <span class="token keyword">case</span><span class="token punctuation">;</span></code></pre><p>语法2</p><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">case</span><span class="token keyword">when</span> xxx <span class="token keyword">then</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">[</span><span class="token keyword">else</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">]</span><span class="token keyword">end</span> <span class="token keyword">case</span><span class="token punctuation">;</span></code></pre></blockquote><h6 id="while"><a href="#while" class="headerlink" title="while"></a>while</h6><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">while</span> 条件 <span class="token keyword">do</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token keyword">end</span> <span class="token keyword">while</span><span class="token punctuation">;</span></code></pre><h6 id="repeat"><a href="#repeat" class="headerlink" title="repeat"></a>repeat</h6><p>满足条件退出循环</p><pre class="language-sql" data-language="sql"><code class="language-sql">先执行一次循环，判断逻辑是否满足，满足则退出，不满足继续循环<span class="token keyword">repeat</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>until 条件<span class="token keyword">end</span> <span class="token keyword">repeat</span><span class="token punctuation">;</span></code></pre><h6 id="loop"><a href="#loop" class="headerlink" title="loop"></a>loop</h6><blockquote><p>loop实现简单的循环，可以实现死循环</p><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token punctuation">[</span>begin_label:<span class="token punctuation">]</span> <span class="token keyword">loop</span><span class="token keyword">SQL</span>逻辑<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token keyword">end</span> <span class="token keyword">loop</span> <span class="token punctuation">[</span>end_label<span class="token punctuation">]</span><span class="token punctuation">;</span></code></pre><ul><li>leave：配合循环使用，退出循环</li><li>iterate：必须用在循环中，作用是跳过当前循环剩下的语句，直接进入下一次循环</li></ul></blockquote><h6 id="游标cursor"><a href="#游标cursor" class="headerlink" title="游标cursor"></a>游标cursor</h6><blockquote><p>游标用来存储查询结果集的数据类型，在存储过程和函数中可以使用游标对结果集进行循环处理。</p><p>游标使用包括游标的声明、open、fetch和close</p></blockquote><blockquote><p>声明游标</p><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">declare</span> 游标名称 <span class="token keyword">cursor</span> <span class="token keyword">for</span> 查询语句<span class="token punctuation">;</span></code></pre><p>打开游标</p><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">open</span> 游标名称；</code></pre><p>获取游标记录</p><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">fetch</span> 游标名称 <span class="token keyword">into</span> 变量<span class="token punctuation">;</span></code></pre><p>关闭游标</p><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">close</span> 游标名称<span class="token punctuation">;</span></code></pre></blockquote><h6 id="条件处理程序"><a href="#条件处理程序" class="headerlink" title="条件处理程序"></a>条件处理程序</h6><blockquote><p>条件处理程序（handler）可以用来定义在流程控制结构执行过程中遇到问题时相应的处理步骤</p></blockquote><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">declare</span> handler_action <span class="token keyword">handler</span> <span class="token keyword">for</span> condition_value <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> statement<span class="token punctuation">;</span>handler_action<span class="token keyword">continue</span>:继续执行当前程序<span class="token keyword">exit</span>:终止执行当前程序condition_valuesqlstate sqlstate_value:状态码，如<span class="token number">02000</span>sqlwarning:所有以<span class="token number">01</span>开头的sqlstate代码的简写<span class="token operator">not</span> found:所有以<span class="token number">02</span>开头的sqlstate代码的简写sqlexception:所有没被sqlwarning或<span class="token operator">not</span> found捕获的sqlstate代码的简写</code></pre><h5 id="存储函数"><a href="#存储函数" class="headerlink" title="存储函数"></a>存储函数</h5><p>存储函数是有返回值的存储过程，存储函数的类型只能是in类型</p><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">function</span> 存储函数名称<span class="token punctuation">(</span><span class="token punctuation">[</span>参数列表<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token keyword">type</span> <span class="token punctuation">[</span>characteristic<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">]</span><span class="token keyword">begin</span><span class="token comment">--SQL语句</span><span class="token keyword">return</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">;</span><span class="token keyword">end</span><span class="token punctuation">;</span></code></pre><p><code>characteristic</code>说明：</p><ul><li><code>deterministic</code>：相同的输入参数总是产生相同的结果</li><li><code>no sql</code>：不包括SQL语句</li><li><code>reads sql data</code>：包含读取数据的语句，但不包含写入数据的语句</li></ul><h4 id="触发器-log"><a href="#触发器-log" class="headerlink" title="触发器(log)"></a>触发器(log)</h4><blockquote><p>触发器是与表有关的数据库对象，指在增删改前后，触发并执行触发器中定义的SQL语句集合。</p><p>触发器可协助应用在数据库端确保数据的完整性，日志记录，数据校验等操作。</p><p>使用别名OLD和NEW来引用触发器中发生变化的记录内容。当前触发器只支持行级触发，不支持语句触发</p></blockquote><h5 id="创建-1"><a href="#创建-1" class="headerlink" title="创建"></a>创建</h5><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">trigger</span> trigger_namebefore<span class="token operator">|</span><span class="token keyword">after</span> <span class="token keyword">insert</span><span class="token operator">|</span><span class="token keyword">update</span><span class="token operator">|</span><span class="token keyword">delete</span><span class="token keyword">on</span> tbline_name <span class="token keyword">for each row</span> <span class="token comment">--行级触发器</span><span class="token keyword">begin</span>tigger_stmt<span class="token keyword">end</span><span class="token punctuation">;</span></code></pre><h5 id="查看-1"><a href="#查看-1" class="headerlink" title="查看"></a>查看</h5><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">show</span> triggers<span class="token punctuation">;</span></code></pre><h5 id="删除-1"><a href="#删除-1" class="headerlink" title="删除"></a>删除</h5><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">drop</span> <span class="token keyword">trigger</span> <span class="token punctuation">[</span>schema_name<span class="token punctuation">.</span><span class="token punctuation">]</span>trigger_name<span class="token punctuation">;</span> <span class="token comment">--未指定schema_name，默认当前数据库</span></code></pre><h4 id="锁"><a href="#锁" class="headerlink" title="锁"></a>锁</h4><blockquote><p>锁是计算机协调多个进程或线程并发访问某一资源的机制。</p><p>保证数据并发访问的一致性、有效性。</p><ul><li>全局锁：锁定数据库中所有表</li><li>表级锁：每次操作锁住整张表</li><li>行级锁：每次操作锁住对应的行数据</li></ul></blockquote><h5 id="全局锁"><a href="#全局锁" class="headerlink" title="全局锁"></a>全局锁</h5><p>全局锁将整个数据库实例加锁，加锁后处于只读状态。</p><p>典型的应用场景：全库的逻辑备份，对所有表进行锁定，从而获取一致性视图，保证数据的完整性</p><pre class="language-sql" data-language="sql"><code class="language-sql">加全局锁flush <span class="token keyword">tables</span> <span class="token keyword">with</span> <span class="token keyword">read</span> <span class="token keyword">lock</span><span class="token punctuation">;</span>数据备份mysqldump <span class="token operator">-</span>h主机地址 <span class="token operator">-</span>uroot <span class="token operator">-</span>pxxxx 数据库名称 <span class="token operator">></span> 备份地址<span class="token punctuation">.</span><span class="token keyword">sql</span>解锁<span class="token keyword">unlock</span> <span class="token keyword">tables</span><span class="token punctuation">;</span></code></pre><h5 id="表级锁"><a href="#表级锁" class="headerlink" title="表级锁"></a>表级锁</h5><p>表级锁，每次操作锁住整张表，发生锁冲突的概率最高，并发度较低</p><ul><li>表锁</li><li>元数据锁</li><li>意向锁</li></ul><h6 id="表锁"><a href="#表锁" class="headerlink" title="表锁"></a>表锁</h6><blockquote><ul><li>表共享读锁（read lock）只能读</li><li>表独占写锁（write lock）读写都阻塞</li></ul></blockquote><blockquote><p>语法：</p><ul><li>加锁：<code>lock tables 表名... read|write</code></li><li>释放锁：<code>unlock tables / 客户端断开连接</code></li></ul></blockquote><h6 id="元数据锁-MDL"><a href="#元数据锁-MDL" class="headerlink" title="元数据锁(MDL)"></a>元数据锁(MDL)</h6><blockquote><p>MDL加锁过程是系统自动控制，无需显式使用，在访问一张表时会自动加上。MDL锁主要作用是维护表元数据的数据一致性，在表上有活动事务时，不可以对元数据进行写入操作 </p></blockquote><h6 id="意向锁"><a href="#意向锁" class="headerlink" title="意向锁"></a>意向锁</h6><blockquote><p>为了避免DML在执行时，加的行锁与表锁的冲突，在InnoDB中引入了意向锁，使得表锁不用检查每行数据是否加锁，使用意向锁来减少表锁的检查。</p><ul><li>意向共享锁：由语句<code>select ... lock in share mode</code>添加<ul><li>与表锁共享锁(read)兼容，与表锁排他锁(write)互斥</li></ul></li><li>意向排他锁：由<code>insert、update、delete、select ... for update</code>添加<ul><li>与表锁共享锁(read)及排他锁(write)都互斥，意向锁之间不会互斥</li></ul></li></ul></blockquote><h5 id="行级锁"><a href="#行级锁" class="headerlink" title="行级锁"></a>行级锁</h5><p>行级锁，每次操作锁住对应的行数据。锁定粒度小，发生锁冲突的概率低，并发度最高。</p><blockquote><p>InnoDB的数据是基于索引组织的，行锁是通过对索引上的索引项加锁来实现的，而不是对记录加的锁</p><ul><li>行锁（record lock）：锁定单个行记录的锁，防止其他事务对此进行update和delete</li><li>间隙锁（gap lock）：锁定索引记录间隙（不包含该记录），确保索引记录间隙不变，防止其他事务在这个间隙进行insert，产生幻读</li><li>临键锁（next-key lock）：行锁和间隙锁组合，同时锁住数据，并锁住数据前面的间隙gap</li></ul></blockquote><h6 id="行锁"><a href="#行锁" class="headerlink" title="行锁"></a>行锁</h6><blockquote><ul><li>共享锁（S）：允许一个事务去读一行，阻止其他事务获得相同数据集的排他锁</li><li>排他锁（X）：允许获取排他锁的事务更新数据，阻止其他事务获得相同数据集的共享锁和排他锁</li></ul></blockquote><blockquote><ul><li>增删改自动增加 排他锁</li><li>select正常查询不加任何锁</li><li>select…lock in share mode 添加共享锁</li><li>select … for update 添加排他锁</li></ul></blockquote><h6 id="间隙锁和临键锁"><a href="#间隙锁和临键锁" class="headerlink" title="间隙锁和临键锁"></a>间隙锁和临键锁</h6><blockquote><p>默认情况下，InnoDB在repeatable read事务隔离级别运行，InnoDB使用next-key锁进行搜索和索引扫描，防止幻读</p><ol><li>索引上的等值查询（唯一索引），给不存在的记录加锁时，优化为间隙锁</li><li>索引上的等值查询（普通索引），向右遍历时最后一个值不满足查询需求时，next-key lock 退化为间隙锁</li><li>索引上的范围查询（唯一索引），会访问到不满足条件的第一个值为止</li></ol><p>间隙锁唯一目的是防止其他事务插入间隙。</p><p>间隙锁可以共存，一个事务采用的间隙锁不会阻止另一个事务在同一个间隙上采用间隙锁</p></blockquote><h4 id="InnoDB引擎"><a href="#InnoDB引擎" class="headerlink" title="InnoDB引擎"></a>InnoDB引擎</h4><h5 id="逻辑存储结构"><a href="#逻辑存储结构" class="headerlink" title="逻辑存储结构"></a>逻辑存储结构</h5><ul><li>表空间（ibd文件）：一个mysql实例可以对应多个表空间，用于存储记录、索引等数据。</li><li>段，分为数据段、索引段、回滚段，InnoDB是索引组织表，数据段就是B+树的叶子节点，索引段为非叶子节点。段用来管理多个Extent(区)。</li><li>区，表空间的单元结构，每个区大小为1M。默认情况下，InnoDB存储引擎页大小为16K，即一个区中一共有64个连续的页</li><li>页，InnoDB存储引擎磁盘管理的最小单元，默认16k。保证连续性，每次申请4-5个区</li><li>行，数据按行存放</li></ul><h5 id="事务原理"><a href="#事务原理" class="headerlink" title="事务原理"></a>事务原理</h5><h6 id="redo-log"><a href="#redo-log" class="headerlink" title="redo log"></a>redo log</h6><blockquote><p>重做日志，记录的是事务提交时数据页的物理修改，是用来实现事务的持久性。</p><p>该日志文件由两部分组成:重做日志缓冲（redo log buffer)以及重做日志文件（(redo log file) ,前者是在内存中，后者在磁盘中。当事务提交之后会把所有修改信息都存到该日志文件中,用于在刷新脏页到磁盘,发生错误时,进行数据恢复使用。 </p></blockquote><h6 id="undo-log"><a href="#undo-log" class="headerlink" title="undo log"></a>undo log</h6><blockquote><p>回滚日志，用于记录数据被修改前的信息，作用包含两个：提供回滚和 MVCC（多版本并发控制）。</p><p>undo log和redo log记录物理日志不一样，它是逻辑日志。可以认为当delete一条记录时，undo log中会记录一条对应的insert记录，反之亦然，当update一条记录时，它记录一条对应相反的update记录。当执行rollback时，就可以从undo log中的逻辑记录读取到相应的内容并进行回滚。</p><p>Undo log销毁：undo log在事务执行时产生，事务提交时，并不会立即删除undo log，因为这些日志可能还用于MVCC。</p><p>Undo log存储：undo log采用段的方式进行管理和记录，存放在前面介绍的rollback segment 回滚段中，内部包含1024个undo log  segment。</p></blockquote><h5 id="MVVC"><a href="#MVVC" class="headerlink" title="MVVC"></a>MVVC</h5><h6 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h6><blockquote><p>当前读</p><ul><li>读取的是记录的最新版本，读取时还要保证其他并发事务不能修改当前记录，会对读取的记录进行加锁。对于我们日常的操作，如:select… lock in share mode(共享锁)，select .. for update、update、insert、delete(排他锁)都是一种当前读。</li></ul><p>快照读</p><ul><li>简单的select（不加锁）就是快照读，快照读，读取的是记录数据的可见版本，有可能是历史数据，不加锁，是非阻塞读。</li><li>Read Committed：每次select，都生成一个快照读。</li><li>Repeatable Read：开启事务后第一个select语句才是快照读的地方。</li><li>Serializable：快照读会退化为当前读。</li></ul></blockquote><blockquote><p>全称 Multi-Version Concurrency Control，多版本并发控制。指维护一个数据的多个版本，使得读写操作没有冲突，快照读为MySQL实现</p><p>MVCC提供了一个非阻塞读功能。MVCC的具体实现，还需要依赖于数据库记录中的三个隐式字段、undo log日志、readView。</p></blockquote><h6 id="隐藏字段"><a href="#隐藏字段" class="headerlink" title="隐藏字段"></a>隐藏字段</h6><table><thead><tr><th>隐藏字段</th><th>含义</th></tr></thead><tbody><tr><td>DB_TRX_ID</td><td>最近修改事务ID，记录插入这条记录或最后一次修改该记录的事务ID</td></tr><tr><td>DB_ROLL_PTR</td><td>回滚指针，指向这条记录的上一个版本，用于配合undo log，指向上一个版本</td></tr><tr><td>DB_ROW_ID</td><td>隐藏主键，如果表结构没有指定主键，将会生成该隐藏字段</td></tr></tbody></table><h6 id="undo-log-1"><a href="#undo-log-1" class="headerlink" title="undo log"></a>undo log</h6><blockquote><p>回滚日志，在insert、update、delete的时候产生的便于数据回滚的日志。</p><p>当insert的时候，产生的undo log日志只在回滚时需要，在事务提交后，可被立即删除。</p><p>而update、delete的时候，产生的undolog日志不仅在回滚时需要，在快照读时也需要，不会立即被删除。</p></blockquote><h6 id="undo-log版本链"><a href="#undo-log版本链" class="headerlink" title="undo log版本链"></a>undo log版本链</h6><blockquote><p>不同事务或相同事务对同一条记录进行修改，会导致该记录的undolog生成一条记录版本链表，链表的头部是最新的旧记录，链表尾部是最早的旧记录。</p></blockquote><h6 id="readview"><a href="#readview" class="headerlink" title="readview"></a>readview</h6><blockquote><p>readview（读视图）是快照读SQL执行时MVCC提取数据的依据，记录并维护系统当前活跃的事务（未提交的）id</p><p>四个核心字段：</p><table><thead><tr><th>字段</th><th>含义</th></tr></thead><tbody><tr><td>m_ids</td><td>当前活跃的事务id集合</td></tr><tr><td>min_trx_id</td><td>最小活跃事务id</td></tr><tr><td>max_trx_id</td><td>预分配事务id，当前最大事务id+1</td></tr><tr><td>creator_trx_id</td><td>readview创建者的事务id</td></tr></tbody></table></blockquote><h4 id="系统数据库"><a href="#系统数据库" class="headerlink" title="系统数据库"></a>系统数据库</h4><table><thead><tr><th>数据库</th><th>含义</th></tr></thead><tbody><tr><td>mysql</td><td>存储MySQL服务器正常运行所需要的各种信息（时区、主从、用户、权限等）</td></tr><tr><td>information_schema</td><td>提供了访问数据库元数据的各种表和视图，包含数据库、表、字段类型及访问权限等</td></tr><tr><td>performance_schema</td><td>为MySQL服务器运行时状态提供了一个底层监控功能，主要用于收集数据库服务器性能参数</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> Out_Learn </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL基础篇</title>
      <link href="/2022/10/21/Database_Learn/MySQL/mysql_base/"/>
      <url>/2022/10/21/Database_Learn/MySQL/mysql_base/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h4><h5 id="数值类型"><a href="#数值类型" class="headerlink" title="数值类型"></a>数值类型</h5><blockquote><ul><li>TINYINT 1bytes 小整数值</li><li>SMALLINT 2bytes 大整数值</li><li>MEDIUMINT 3bytes 大整数值</li><li>INT或INTEGER 4bytes 大整数值</li><li>BIGINT 8bytes 极大整数值</li><li>FLOAT 4bytes 单精度浮点数值</li><li>DOUBLE 8bytes 双精度浮点数值</li></ul></blockquote><h5 id="字符串类型"><a href="#字符串类型" class="headerlink" title="字符串类型"></a>字符串类型</h5><blockquote><ul><li>CHAR 0-255 bytes 定长字符串</li><li>VARCHAR 0-65535 bytes 变长字符串</li><li>TINYBLOB 0-255 bytes 不超过255个字符的二进制数据</li><li>TINYTEXT 0-255 bytes 短文本字符串</li><li>BLOB 0-65 535 bytes 二进制形式的长文本数据</li><li>TEXT 0-65 535 bytes 长文本数据</li><li>MEDIUMBLOB 0-16 777 215 bytes 二进制形式的中等长度文本数据</li><li>MEDIUMTEXT 0-16 777 215 bytes 中等长度文本数据</li><li>LONGBLOB 0-4 294 967 295 bytes 二进制形式的极大文本数据</li><li>LONGTEXT 0-4 294 967 295 bytes 极大文本数据</li></ul></blockquote><h5 id="日期时间类型"><a href="#日期时间类型" class="headerlink" title="日期时间类型"></a>日期时间类型</h5><table><thead><tr><th>类型</th><th>大小</th><th>范围</th><th>格式</th><th>描述</th></tr></thead><tbody><tr><td>DATE</td><td>3</td><td>1000-01-01至9999-12-31</td><td>YYYY:MM:DD</td><td>日期值</td></tr><tr><td>TIME</td><td>3</td><td>-838：59：59至838：59：59</td><td>HH:MM:SS</td><td>时间值或持续时间</td></tr><tr><td>YEAR</td><td>1</td><td>1901至2155</td><td>YYYY</td><td>年份值</td></tr><tr><td>DATETIME</td><td>8</td><td>1000-01-01 00：00：00至9999-12-31 23：59：59</td><td>YYYY-MM-DD HH:MM:SS</td><td>混合日期和时间值</td></tr><tr><td>TIMESTAMP</td><td>4</td><td>1970-01-01 00：00：01至2038-01-19 03：14：07</td><td>YYYY-MM-DD HH:MM:SS</td><td>混合日期和时间值，时间戳</td></tr></tbody></table><h4 id="DDL-定义操作"><a href="#DDL-定义操作" class="headerlink" title="DDL 定义操作"></a>DDL 定义操作</h4><h5 id="数据库操作"><a href="#数据库操作" class="headerlink" title="数据库操作"></a>数据库操作</h5><h6 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h6><blockquote><p>SHOW DATABASES;</p><p>SHOW DATABASE();</p></blockquote><h6 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h6><blockquote><p>CREATE DATABASE [IF NOT EXISTS] 数据库名 [DEFAULT CHARSET 字符集] [COLLATE 排序规则];</p></blockquote><h6 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h6><blockquote><p>DROP DATABASE [IF EXISTS] 数据库名;</p></blockquote><h6 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h6><blockquote><p>USE 数据库名;</p></blockquote><h5 id="表操作"><a href="#表操作" class="headerlink" title="表操作"></a>表操作</h5><h6 id="查询当前数据库所有表"><a href="#查询当前数据库所有表" class="headerlink" title="查询当前数据库所有表"></a>查询当前数据库所有表</h6><blockquote><p>SHOW TABLES;</p></blockquote><h6 id="查询表结构"><a href="#查询表结构" class="headerlink" title="查询表结构"></a>查询表结构</h6><blockquote><p>DESC 表名;</p></blockquote><h6 id="查询指定表的建表语句"><a href="#查询指定表的建表语句" class="headerlink" title="查询指定表的建表语句"></a>查询指定表的建表语句</h6><blockquote><p>SHOW CREATE TABLE 表名;</p></blockquote><h6 id="创建-1"><a href="#创建-1" class="headerlink" title="创建"></a>创建</h6><blockquote><p>CREATE TABLE 表名(</p><p>字段1 字段1类型 [COMMENT 字段1注释],</p><p>字段n 字段n类型 [COMMENT 字段n注释]</p><p>) [COMMENT 表注释];</p></blockquote><h6 id="修改"><a href="#修改" class="headerlink" title="修改"></a>修改</h6><blockquote><p>添加字段</p><p>ALTER TABLE 表名 ADD 字段名 类型(长度) [COMMENT 注释] [约束];</p></blockquote><blockquote><p>修改数据类型</p><p>ALTER TABLE 表名 MODIFY 字段名 新数据类型(长度);</p></blockquote><blockquote><p>修改字段名和字段类型</p><p>ALTER TABLE 表名 CHANGE 旧字段名 类型(长度) [COMMENT 注释] [约束];</p></blockquote><blockquote><p>删除字段</p><p>ALTER TABLE 表名 DROP 字段名;</p></blockquote><blockquote><p>修改表名</p><p>ALTER TABLE 表名 RENAME TO 新表名;</p></blockquote><h6 id="删除表"><a href="#删除表" class="headerlink" title="删除表"></a>删除表</h6><blockquote><p>DROP TABLE [IF EXISTS] 表名;</p><p>删除指定表，并重新创建该表</p><p>TRUNCATE TABLE 表名;</p></blockquote><h4 id="DML-数据操作"><a href="#DML-数据操作" class="headerlink" title="DML 数据操作"></a>DML 数据操作</h4><h6 id="增"><a href="#增" class="headerlink" title="增"></a>增</h6><blockquote><p>给指定字段添加数据</p><p>INSERT INTO 表名（字段名1，字段名2，…）VALUES (值1，值2，…);</p></blockquote><blockquote><p>给全部字段添加数据</p><p>INSERT INTO 表名 VALUES(值1，值2);</p></blockquote><blockquote><p>批量添加数据</p><p>INSERT INTO 表名（字段名1，字段名2）VALUES (值1，值2),(值1，值2);</p><p>INSERT INTO 表名 VALUES (值1，值2)，(值1，值2);</p></blockquote><h6 id="删"><a href="#删" class="headerlink" title="删"></a>删</h6><blockquote><p>DELETE FROM 表名 [WHERE 条件];</p></blockquote><h6 id="改"><a href="#改" class="headerlink" title="改"></a>改</h6><blockquote><p>UPDATE 表名 SET 字段名1=值1，字段名2=值2，…[WHERE 条件];</p></blockquote><h4 id="DQL-数据查询"><a href="#DQL-数据查询" class="headerlink" title="DQL 数据查询"></a>DQL 数据查询</h4><blockquote><p>SELECT    字段列表</p><p>FROM    表名列表</p><p>WHERE    条件列表</p><p>GROUP BY    分组字段列表</p><p>HAVING    分组后条件列表</p><p>ORDER BY    排序字段列表</p><p>LIMIT    分页参数</p></blockquote><h5 id="基本查询"><a href="#基本查询" class="headerlink" title="基本查询"></a>基本查询</h5><h6 id="查询多个字段别名"><a href="#查询多个字段别名" class="headerlink" title="查询多个字段别名"></a>查询多个字段别名</h6><blockquote><p>SELECT 字段 [AS 别名] FROM 表名</p><p>SELECT * FROM 表名</p></blockquote><h6 id="去除重复记录"><a href="#去除重复记录" class="headerlink" title="去除重复记录"></a>去除重复记录</h6><blockquote><p>SELECT DISTINCT 字段列表 FROM 表名;</p></blockquote><h5 id="条件查询"><a href="#条件查询" class="headerlink" title="条件查询"></a>条件查询</h5><blockquote><p>SELECT 字段列表 FROM 表名 WHERE 条件列表;</p><p>条件：</p><ul><li>BETWEEN … AND …    在某个范围之内[]</li><li>IN(…)    在in之后的列表中的值，多选一</li><li>LIKE 占位符    模糊匹配(__匹配单个字符，%匹配任意个字符)</li><li>IS NULL    是NULL</li></ul></blockquote><h5 id="聚合函数"><a href="#聚合函数" class="headerlink" title="聚合函数"></a>聚合函数</h5><blockquote><p>将一列数据作为整体进行纵向计算</p><ul><li>count max min avg sum </li></ul><p>SELECT 聚合函数(字段列表) FROM 表名;</p></blockquote><h5 id="分组查询"><a href="#分组查询" class="headerlink" title="分组查询"></a>分组查询</h5><blockquote><p>SELECT 字段列表 FROM 表名 [WHERE 条件] GROUP BY 分组字段名 [HAVING 分组后过滤条件];</p><p>where和having不同</p><ul><li>执行时机不同：where是分组之前进行过滤，不满足where条件，不参与分组；而having是分组之后对结果进行过滤。</li><li>判断条件不同：where不能对聚合函数进行判断，having可以</li></ul></blockquote><h5 id="排序查询"><a href="#排序查询" class="headerlink" title="排序查询"></a>排序查询</h5><blockquote><p>SELECT 字段列表 FROM 表名 ORDER BY 字段1 排序方式1，字段2 排序方式2;</p><p>排序方式</p><ul><li>ASC：升序（默认）</li><li>DESC：降序</li></ul></blockquote><h5 id="分页查询"><a href="#分页查询" class="headerlink" title="分页查询"></a>分页查询</h5><blockquote><p>SELECT 字段列表 FROM 表名 LIMIT 起始索引，查询记录数;</p></blockquote><h4 id="DCL权限控制"><a href="#DCL权限控制" class="headerlink" title="DCL权限控制"></a>DCL权限控制</h4><h5 id="管理用户"><a href="#管理用户" class="headerlink" title="管理用户"></a>管理用户</h5><h6 id="查询用户"><a href="#查询用户" class="headerlink" title="查询用户"></a>查询用户</h6><blockquote><p>USE mysql;</p><p>SELECT * FROM user;</p></blockquote><h6 id="创建用户"><a href="#创建用户" class="headerlink" title="创建用户"></a>创建用户</h6><blockquote><p>CREATE USER ‘用户名‘@’主机名’ IDENTIFIED BY ‘密码’;</p></blockquote><h6 id="修改用户密码"><a href="#修改用户密码" class="headerlink" title="修改用户密码"></a>修改用户密码</h6><blockquote><p>ALTER USER ‘用户名‘@’主机名’ IDENTIFIED WITH mysql_native_password BY ‘新密码’;</p></blockquote><h6 id="删除用户"><a href="#删除用户" class="headerlink" title="删除用户"></a>删除用户</h6><blockquote><p>DROP USER ‘用户名‘@’主机名’;</p></blockquote><h5 id="权限控制"><a href="#权限控制" class="headerlink" title="权限控制"></a>权限控制</h5><blockquote><p>查询权限：</p><p>SHOW GRANTS FOR ‘用户名‘@’主机名’;</p><p>授予权限:</p><p>GRANT 权限列表 ON 数据库名.表名 TO ’用户名‘@’主机名‘；</p><p>撤销权限：</p><p>REVOKE 权限列表 ON 数据库名.表名 FROM ’用户名‘@’主机名‘；</p></blockquote><h4 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h4><blockquote><p>函数指一段可以直接被另一段程序调用的程序或代码</p></blockquote><h5 id="字符串函数"><a href="#字符串函数" class="headerlink" title="字符串函数"></a>字符串函数</h5><table><thead><tr><th>函数</th><th>功能</th></tr></thead><tbody><tr><td>CONCAT(S1,S2,…Sn)</td><td>字符串拼接</td></tr><tr><td>LOWER(str)</td><td>转小写</td></tr><tr><td>UPPER(str)</td><td>转大写</td></tr><tr><td>LPAD(str,n,pad)</td><td>左填充</td></tr><tr><td>RPAD(str,n,pad)</td><td>右填充</td></tr><tr><td>TRIM(str)</td><td>去空格</td></tr><tr><td>SUBSTRING(str,start,len)</td><td>裁剪返回</td></tr></tbody></table><h5 id="数值函数"><a href="#数值函数" class="headerlink" title="数值函数"></a>数值函数</h5><blockquote><ul><li>ceil(x)：向上取整</li><li>floor(x)：向下取整</li><li>mod(x,y)：返回x/y的模</li><li>rand()：返回0-1随机数</li><li>round(x,y)：求参数x的四舍五入值，保留y位小数</li></ul></blockquote><h5 id="日期函数"><a href="#日期函数" class="headerlink" title="日期函数"></a>日期函数</h5><blockquote><ul><li>curdate()：返回当前日期</li><li>curtime()：返回当前时间</li><li>now()：返回当前日期和时间</li><li>year(date)：获取指定date的年份</li><li>month(date)：获取指定date的月份</li><li>day(date)：获取指定date的日期</li><li>date_add(date,INTERVAL expr type)：返回一个日期/时间值加上一个时间间隔expr后的时间值</li><li>datediff(date1,date2)：返回起始时间date1和结束时间date2之间的天数</li></ul></blockquote><h5 id="流程函数"><a href="#流程函数" class="headerlink" title="流程函数"></a>流程函数</h5><blockquote><ul><li>if(value,t,f)：true返回t，否则f</li><li>ifnull(value1,value2)：value1不为空返回value1，否则value2</li><li>CASE WHEN [val1] THEN [res1] … ELSE [default] END：如果val1为true，返回res1，… 否则返回default默认值</li><li>CASE [expr] WHEN [val1] THEN [res1] … ELSE [default] END：如果expr的值等于val1，返回res1，… 否则返回default默认值</li></ul></blockquote><h4 id="约束"><a href="#约束" class="headerlink" title="约束"></a>约束</h4><h5 id="普通约束"><a href="#普通约束" class="headerlink" title="普通约束"></a>普通约束</h5><blockquote><ul><li><p>概念：约束是作用于表中字段上的规则，用于限制存储在表中的数据</p></li><li><p>目的：保证数据库中数据的正确、有效性和完整性</p></li><li><table><thead><tr><th>约束</th><th>描述</th><th>关键字</th></tr></thead><tbody><tr><td>非空约束</td><td>限制该字段的数据不能为null</td><td>NOT NULL</td></tr><tr><td>唯一约束</td><td>保证该字段的所有数据都是唯一、不重复</td><td>UNIQUE</td></tr><tr><td>主键约束</td><td>主键是一行数据的唯一标识，要求非空且唯一</td><td>PRIMARY KEY</td></tr><tr><td>默认约束</td><td>保存数据时，如果未指定该字段的值，则采用默认值</td><td>DEFAULT</td></tr><tr><td>检查约束</td><td>保证字段值满足某一个条件</td><td>CHECHK</td></tr><tr><td>外键约束</td><td>用来让两张表的数据之间建立连接，保证数据的一致性和完整性</td><td>FOREIGN KEY</td></tr></tbody></table></li><li><p>auto_increment：自动增长</p></li></ul></blockquote><h5 id="外键约束"><a href="#外键约束" class="headerlink" title="外键约束"></a>外键约束</h5><blockquote><p>外键用来让两张表的数据之间建立连接，从而保证数据的一致性和完整性</p></blockquote><blockquote><p>添加外键</p><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">table</span> 表名<span class="token punctuation">(</span> 字段名 数据类型<span class="token punctuation">,</span> <span class="token punctuation">[</span>constrain<span class="token punctuation">]</span> <span class="token punctuation">[</span>外键名称<span class="token punctuation">]</span> <span class="token keyword">foreign</span> <span class="token keyword">key</span><span class="token punctuation">(</span>外键字段名<span class="token punctuation">)</span> <span class="token keyword">references</span> 主表<span class="token punctuation">(</span>主表列名<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">alter</span> <span class="token keyword">table</span> 表名 <span class="token keyword">add</span> constrain 外键名称 <span class="token keyword">foreign</span> <span class="token keyword">key</span><span class="token punctuation">(</span>外键字段名<span class="token punctuation">)</span> <span class="token keyword">references</span> 主表<span class="token punctuation">(</span>主表列表<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>删除外键</p><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">alter</span> <span class="token keyword">table</span> 表名 <span class="token keyword">drop</span> <span class="token keyword">foreign</span> <span class="token keyword">key</span> 外键名称<span class="token punctuation">;</span></code></pre></blockquote><blockquote><p>删除更新</p><ul><li>no action / restrict：拥有外键不予更新</li><li>cascade：级联</li><li>set null：拥有外键，外键值取null</li><li>set default：父表变更，外键列设置为默认值(Innodb不支持)</li></ul><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">alter</span> <span class="token keyword">table</span> 表名 <span class="token keyword">add</span> constrain 外键名称 <span class="token keyword">foreign</span> <span class="token keyword">key</span> <span class="token punctuation">(</span>外键字段<span class="token punctuation">)</span> <span class="token keyword">references</span> 主表名<span class="token punctuation">(</span>主表字段名<span class="token punctuation">)</span> <span class="token keyword">on</span> <span class="token keyword">update</span> <span class="token keyword">cascade</span> <span class="token keyword">on</span> <span class="token keyword">delete</span> <span class="token keyword">cascade</span><span class="token punctuation">;</span></code></pre></blockquote><h4 id="多表查询"><a href="#多表查询" class="headerlink" title="多表查询"></a>多表查询</h4><blockquote><ul><li>连接查询<ul><li>内连接：相当于查询A，B交集部分数据</li><li>外连接：<ul><li>左外连接：查询左表以及交集数据</li><li>右外连接：查询右表以及交集数据</li></ul></li><li>自连接：当前表与自身的连接查询，自连接必须使用表别名</li></ul></li><li>子查询</li></ul></blockquote><h5 id="连接查询"><a href="#连接查询" class="headerlink" title="连接查询"></a>连接查询</h5><h6 id="内连接"><a href="#内连接" class="headerlink" title="内连接"></a>内连接</h6><blockquote><p>隐式：</p><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> 字段列表 <span class="token keyword">from</span> 表<span class="token number">1</span><span class="token punctuation">,</span>表<span class="token number">2</span> <span class="token keyword">where</span> 条件<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">;</span></code></pre><p>显式：</p><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> 字段列表 <span class="token keyword">from</span> 表<span class="token number">1</span> <span class="token punctuation">[</span><span class="token keyword">inner</span><span class="token punctuation">]</span> <span class="token keyword">join</span> 表<span class="token number">2</span> <span class="token keyword">on</span> 连接条件<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">;</span></code></pre></blockquote><h6 id="外连接"><a href="#外连接" class="headerlink" title="外连接"></a>外连接</h6><blockquote><p>左/右外连接</p><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> 字段列表 <span class="token keyword">from</span> 表<span class="token number">1</span> <span class="token keyword">left</span> <span class="token punctuation">[</span><span class="token keyword">outer</span><span class="token punctuation">]</span> <span class="token keyword">join</span> 表<span class="token number">2</span> <span class="token keyword">on</span> 条件<span class="token punctuation">;</span></code></pre><p>查询包含左右表以及交集数据</p></blockquote><h6 id="自连接"><a href="#自连接" class="headerlink" title="自连接"></a>自连接</h6><blockquote><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> 字段列表 <span class="token keyword">from</span> 表<span class="token number">1</span> 别名<span class="token number">1</span> <span class="token keyword">join</span> 表<span class="token number">1</span> 别名<span class="token number">2</span> <span class="token keyword">on</span> 条件<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">;</span> </code></pre><p>自连接查询，可以是内连接也可以是外连接</p></blockquote><h5 id="联合查询"><a href="#联合查询" class="headerlink" title="联合查询"></a>联合查询</h5><blockquote><p>对于union查询，就是把多次查询结果结合起来，形成一个新的查询结果集</p><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> 字段列表 <span class="token keyword">from</span> 表<span class="token number">1</span><span class="token keyword">union</span> <span class="token punctuation">[</span><span class="token keyword">all</span><span class="token punctuation">]</span><span class="token keyword">select</span> 字段列表 <span class="token keyword">from</span> 表<span class="token number">2</span><span class="token punctuation">;</span></code></pre><ul><li>对于联合查询的多张表的列数必须保持一致，字段类型也需保持一致</li><li>union all 会将全部的数据直接合并一起，union会对合并的数据去重</li></ul></blockquote><h5 id="子查询"><a href="#子查询" class="headerlink" title="子查询"></a>子查询</h5><blockquote><ul><li>概念：SQL语句中嵌套SELECT语句，又称为嵌套查询、</li></ul><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> t1 <span class="token keyword">where</span> column1<span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">select</span> column1 <span class="token keyword">from</span> t2<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>子查询外部的语句可以是增删改查任何一个</p><ul><li>根据子查询结果不同，分为：</li><li>标量子查询（查询结果为单个值）</li><li>列子查询（查询结果为一列）</li><li>行子查询（查询结果为一行）</li><li>表字查询（查询结果为多行多列）</li></ul></blockquote><h4 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h4><blockquote><p>事务是一组操作集合，不可分割的工作单位，事务会把所有操作作为一个整体一起向系统提交或撤销操作请求，即这些操作要么同时成功，要么同时失败</p></blockquote><h5 id="事务操作"><a href="#事务操作" class="headerlink" title="事务操作"></a>事务操作</h5><blockquote><ul><li><p>查看/设置事务提交方式</p></li><li><p>```sql<br>  select @@autocommit;<br>  set @@autocommit=0;</p>  <pre class="language-none"><code class="language-none">- 提交事务- &#96;&#96;&#96;sqlcommit;</code></pre></li><li><p>回滚事务</p></li><li><p>```sql<br>  rollback;</p>  <pre class="language-none"><code class="language-none">- 开启事务- &#96;&#96;&#96;sqlstart transaction 或 begin;</code></pre></li></ul></blockquote><h5 id="事务四大特性"><a href="#事务四大特性" class="headerlink" title="事务四大特性"></a>事务四大特性</h5><blockquote><ul><li>原子性（Atomicity）：事务是不可分割的最小操作单元，要么全部成功，要么全部失败</li><li>一致性（Consistency）：事务完成时，必须所有的数据都保持一致状态</li><li>隔离性（Isolation）：数据库系统提供的隔离机制，保证事务在不受外部并发操作影响的独立环境下运行</li><li>持久性（Durability）：事务一旦提交或回滚，它对数据库中的数据的改变就是永久的</li></ul></blockquote><h5 id="并发事务问题"><a href="#并发事务问题" class="headerlink" title="并发事务问题"></a>并发事务问题</h5><blockquote><ul><li>脏读：一个事务读到另一个事务还没有提交的数据</li><li>不可重复读：一个事务先后读取同一条记录，但两次读取的数据不同，称之为不可重复读</li><li>幻读：一个事务按照条件查询数据时，没有对应的数据行，但是在插入数据时，又发现该行数据已存在，好像出现幻影</li></ul></blockquote><h5 id="事务隔离级别"><a href="#事务隔离级别" class="headerlink" title="事务隔离级别"></a>事务隔离级别</h5><blockquote><table><thead><tr><th>隔离级别</th><th>脏读</th><th>不可重复读</th><th>幻读</th></tr></thead><tbody><tr><td>Read uncommitted</td><td>√</td><td>√</td><td>√</td></tr><tr><td>Read committed</td><td>×</td><td>√</td><td>√</td></tr><tr><td>Repeatable Read(默认)</td><td>×</td><td>×</td><td>√</td></tr><tr><td>Serializable</td><td>×</td><td>×</td><td>×</td></tr></tbody></table><p>查看事务隔离级别</p><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> @<span class="token variable">@transaction_isolation</span><span class="token punctuation">;</span></code></pre><p>设置事务隔离级别</p><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">set</span> <span class="token punctuation">[</span><span class="token keyword">session</span><span class="token operator">|</span><span class="token keyword">global</span><span class="token punctuation">]</span> <span class="token keyword">transaction</span> <span class="token keyword">isolation</span> <span class="token keyword">level</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">;</span></code></pre></blockquote>]]></content>
      
      
      <categories>
          
          <category> Out_Learn </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Maven基础</title>
      <link href="/2022/10/13/Java_Learn/Review/Maven/"/>
      <url>/2022/10/13/Java_Learn/Review/Maven/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="Maven"><a href="#Maven" class="headerlink" title="Maven"></a>Maven</h4><blockquote><p>Maven本质是一个项目管理工具，将次项目开发和管理过程抽成一个项目对象模型（POM）</p><p>POM：项目对象模型</p></blockquote><p><img src="/images/posts/Java_Learn/Review/%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F.jpg" alt="生命周期" loading="lazy"></p><h5 id="Maven基础概念"><a href="#Maven基础概念" class="headerlink" title="Maven基础概念"></a>Maven基础概念</h5><h6 id="仓库"><a href="#仓库" class="headerlink" title="仓库"></a>仓库</h6><blockquote><p>用于存储资源，包含各种jar包</p><ul><li>本地仓库：自己电脑上存储资源的仓库，连接远程仓库获取资源</li><li>远程仓库：非本机电脑上的仓库，为本机仓库提供资源<ul><li>中央仓库：Maven团队维护，存储所有资源的仓库</li><li>私服：部门/公司范围内存储资源的仓库，从中央仓库获取资源</li></ul></li><li>私服的作用：<ul><li>保存具有版权的资源，包含购买或自主开发的jar<ul><li>中央仓库的jar都是开源的，不能存储具有版权的资源</li></ul></li><li>一定范围内共享资源，仅对内部开放，不对外共享</li></ul></li></ul></blockquote><h6 id="坐标"><a href="#坐标" class="headerlink" title="坐标"></a>坐标</h6><blockquote><p>Maven中的坐标用于描述仓库中资源的位置</p><p>Maven坐标的组成</p><ul><li>groupId：定义当前Maven项目隶属组织名称</li><li>artifactId：定义当前Maven项目名称</li><li>version：定义当前项目版本号</li></ul></blockquote><h5 id="依赖管理"><a href="#依赖管理" class="headerlink" title="依赖管理"></a>依赖管理</h5><h6 id="依赖配置"><a href="#依赖配置" class="headerlink" title="依赖配置"></a>依赖配置</h6><blockquote><ul><li><p>依赖指当前项目运行所需的jar，一个项目可以设置多个依赖</p></li><li><p>格式：</p>  <pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!--设置当前项目所依赖的所有jar--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--设置具体的依赖--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--依赖所属群组id--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--依赖所属项目id--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token comment">&lt;!--依赖版本号--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>4.12<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span>    </code></pre></li></ul></blockquote><h6 id="依赖传递"><a href="#依赖传递" class="headerlink" title="依赖传递"></a>依赖传递</h6><blockquote><p>将一个项目依赖直接作为依赖项赋值给另一个项目，该项目依赖进行继承传递</p><ul><li>直接依赖：在当前项目中通过依赖配置建立的依赖关系</li><li>间接依赖：被依赖的资源如果依赖其他资源，当前项目间接依赖其他资源</li><li>依赖优先：当同级配置了相同资源的不同版本，后配置的覆盖先配置的</li></ul></blockquote><h6 id="可选依赖"><a href="#可选依赖" class="headerlink" title="可选依赖"></a>可选依赖</h6><blockquote><ul><li><p>可选依赖指对外隐藏当前所依赖的资源</p>  <pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>optional</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>optional</span><span class="token punctuation">></span></span></code></pre></li></ul></blockquote><h6 id="排除依赖"><a href="#排除依赖" class="headerlink" title="排除依赖"></a>排除依赖</h6><blockquote><ul><li><p>排除依赖指主动断开依赖的资源，被排除的资源无需指定版本</p>  <pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusions</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusion</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.hamcrest<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>hamcrest-core<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusion</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusions</span><span class="token punctuation">></span></span></code></pre></li></ul></blockquote><h6 id="依赖范围"><a href="#依赖范围" class="headerlink" title="依赖范围"></a>依赖范围</h6><blockquote><ul><li><p>依赖的jar默认情况可以在任何地方使用，可以通过scope标签设定其作用范围</p></li><li><p>作用范围</p><ul><li><p>主程序范围有效（main文件夹范围内）</p></li><li><p>测试程序范围有效（test文件夹范围内）</p></li><li><p>是否参与打包（package指令范围内）</p></li><li><table><thead><tr><th>scope</th><th>主代码</th><th>测试代码</th><th>打包</th><th>范例</th></tr></thead><tbody><tr><td>compile（默认）</td><td>Y</td><td>Y</td><td>Y</td><td>log4j</td></tr><tr><td>test</td><td></td><td>Y</td><td></td><td>junit</td></tr><tr><td>provided</td><td>Y</td><td>Y</td><td></td><td>servlet-api</td></tr><tr><td>runtime</td><td></td><td></td><td>Y</td><td>jdbc</td></tr></tbody></table></li></ul></li></ul></blockquote><h5 id="生命周期与插件"><a href="#生命周期与插件" class="headerlink" title="生命周期与插件"></a>生命周期与插件</h5><h6 id="构建生命周期"><a href="#构建生命周期" class="headerlink" title="构建生命周期"></a>构建生命周期</h6><blockquote><p><code>compile -&gt; test-compile -&gt; test -&gt; package -&gt; install</code></p></blockquote><blockquote><ul><li>Maven对项目构建的生命周期划分为3套<ul><li><code>clean</code> ：清理工作</li><li><code>default</code> ：核心工作，例如编译，测试，打包，部署等</li><li><code>site</code> ：产生报告，发布站点等</li></ul></li></ul></blockquote><h6 id="clean生命周期"><a href="#clean生命周期" class="headerlink" title="clean生命周期"></a>clean生命周期</h6><blockquote><ul><li>pre-clean：执行一些需要在clean之前完成的工作</li><li>clean：移除所有上一次构建生成的文件</li><li>post-clean：执行一些需要在clean之后立刻完成的工作</li></ul></blockquote><h6 id="default生命周期"><a href="#default生命周期" class="headerlink" title="default生命周期"></a>default生命周期</h6><blockquote><p>包含了普通编译测试打包的全部等</p></blockquote><h6 id="site构建生命周期"><a href="#site构建生命周期" class="headerlink" title="site构建生命周期"></a>site构建生命周期</h6><blockquote><ul><li>pre-site：执行一些需要在生成站点文档之前完成的工作</li><li>site：生成项目的站点文档</li><li>post-site：执行一些需要在生成站点文档之后完成的工作，并且为部署做准备</li><li>site-deploy：将生成的站点文档部署到特定的服务器上</li></ul></blockquote><h6 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h6><blockquote><ul><li><p>插件与生命周期内的阶段绑定，在执行到对应生命周期时执行对应的插件功能</p></li><li><p>默认maven在各个生命周期上绑定有预设的功能</p></li><li><p>通过插件可以自定义其他功能</p>  <pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>executions</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>execution</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>goals</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>goal</span><span class="token punctuation">></span></span>jar<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>goal</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>goals</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>phase</span><span class="token punctuation">></span></span>generate-test-resources<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>phase</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>execution</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>executions</span><span class="token punctuation">></span></span></code></pre></li></ul></blockquote>]]></content>
      
      
      <categories>
          
          <category> Out_Learn </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>反射</title>
      <link href="/2022/10/11/Java_Learn/Review/reflect/"/>
      <url>/2022/10/11/Java_Learn/Review/reflect/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="类加载器"><a href="#类加载器" class="headerlink" title="类加载器"></a>类加载器</h4><blockquote><p>类的加载</p><ul><li>就是指将class文件读入内存，并为之创建一个java.lang.Class对象</li><li>任何类被使用时，系统都会为之创建一个java.lang.Class对象</li></ul><p>类的连接</p><ul><li>验证阶段：用于检验被加载的类是否有正确的内部结构，并和其他类协调一致</li><li>准备阶段：负责为类的类变量分配内存，并设置默认初始化值</li><li>解析阶段：将类的二进制数据中的符号引用替换为直接引用</li></ul><p>类的初始化</p><ul><li>假如类还未被加载和连接，则程序先加载并连接该类</li><li>假如该类的直接父类还未被初始化，则先初始化其直接父类</li><li>假如类中有初始化语句，则系统依次执行这些初始化语句</li></ul></blockquote><blockquote><p>类的初始化时机</p><ul><li>创建类的实例</li><li>调用类的类方法</li><li>访问类或者接口的类变量，或者为该类变量赋值</li><li>使用反射方式来强制创建某个类或接口对应的java.lang.Class对象</li><li>初始化某个类的子类</li><li>直接使用java.exe命令来运行某个主类</li></ul></blockquote><h5 id="类加载器作用"><a href="#类加载器作用" class="headerlink" title="类加载器作用"></a>类加载器作用</h5><blockquote><ul><li>负责将.class文件加载到内存中，并为之生成对应的java.lang.Class对象</li></ul><p>JVM类加载机制</p><ul><li>全盘负责：就是当一个类加载器负责加载某个class时，该class所依赖的和引用的其他Class也将由该类加载器负责载入，除非显示使用另外一个类加载器来载入</li><li>父类委托：就是当一个类加载器负责加载某个Class时，先让父类加载器试图加载该Class，只有在父类加载器无法加载该类时才尝试从自己的类路径中加载该类</li><li>缓存机制：保证所有加载过的Class都会被缓存，当程序需要使用某个Class对象时，类加载器先从缓存区中搜索该Class，只有当缓存区中不存在该Class对象时，系统才会读取该类对应的二进制数据，并将其转换成Class对象，存储到缓存区</li></ul></blockquote><h5 id="类加载器-1"><a href="#类加载器-1" class="headerlink" title="类加载器"></a>类加载器</h5><blockquote><p>ClassLoader：是负责加载类的对象</p><p>Java运行时具有以下内置类加载器</p><ul><li>Bootstrap class loader：它是虚拟机的内置类加载器，通常表现为null，并且没有父null</li><li>Platform class loader：平台类加载器可以看到所有的平台类，平台类包括由平台类加载器或其祖先定义的JavaSE平台API，其实现类和JDK特定工具上的类</li><li>类加载器的继承关系：System的父加载器为Platform。而Platform的父加载器为Bootstrap</li></ul><p>ClassLoader的两个方法</p><ul><li>static ClassLoader getSystemClassLoader()：返回用于委派的系统类加载器</li><li>ClassLoader getParent()：返回父类加载器进行委派</li></ul></blockquote><h4 id="反射"><a href="#反射" class="headerlink" title="反射"></a>反射</h4><blockquote><p>反射机制：运行时去获取一个类的变量和方法信息。然后通过获取到的信息来创建对象，调用方法。</p><p>可以极大的增强程序的灵活性，程序不用在编译期就完成确定，在运行期仍然可以拓展</p></blockquote><h5 id="获取class对象"><a href="#获取class对象" class="headerlink" title="获取class对象"></a>获取class对象</h5><blockquote><ol><li>使用类的class属性来获取该类的class对象</li><li>调用对象的getClass()方法</li><li>使用Class类中的静态方法forName(String className)</li></ol></blockquote><h5 id="获取构造方法"><a href="#获取构造方法" class="headerlink" title="获取构造方法"></a>获取构造方法</h5><blockquote><ul><li>Constructor&lt;?&gt;[] getConstructors()：返回所有公共构造方法对象的数组</li><li>Constructor&lt;?&gt;[] getDeclaredConstructors()：返回所有构造方法对象的数组</li><li>Constructor<T> getConstructor(Class&lt;?&gt;…parameterTypes)：返回单个公共构造方法对象</li><li>Constructor<T> getDeclaredConstructor(Class&lt;?&gt;…parameterTypes)：返回单个构造方法对象</li></ul><p>创建对象的方法</p><ul><li>T newInstance(Object…initargs)：根据指定的构造方法创建对象</li></ul></blockquote><h5 id="获取成员变量并使用"><a href="#获取成员变量并使用" class="headerlink" title="获取成员变量并使用"></a>获取成员变量并使用</h5><blockquote><ul><li>Field[] getFields()：返回所有公共成员变量对象的数组</li><li>Field[] getDeclaredFields()：返回所有成员变量对象的数组</li><li>Field getField(String name)：返回单个公共成员变量对象</li><li>Field getDeclaredField(String name)：返回单个成员变量对象</li></ul><p>用于成员变量赋值的方法</p><ul><li>void set(Object obj,Object value)：给obj对象的成员变量赋值为value</li></ul></blockquote><h5 id="获取成员方法并使用"><a href="#获取成员方法并使用" class="headerlink" title="获取成员方法并使用"></a>获取成员方法并使用</h5><blockquote><p>Class类中用于获取成员方法的方法</p><ul><li>Method[] getMethods()：返回所有公共成员方法对象的数组，包括继承的</li><li>Method[] getDeclaredMethods()：返回所有成员方法对象的数组，不包括继承的</li><li>Method getMethod(String name, Class&lt;?&gt;… parameterTypes)：返回单个公共成员方法对象</li><li>Method getDeclaredMethod(String name,Class&lt;?&gt;… parameterTypes)：返回单个成员方法对象</li></ul><p>Method类中用于调用成员方法的方法</p><ul><li>Object invoke(Object obj, Object…args)：调用obj对象的成员方法，参数是args,返回值是Object类型</li></ul></blockquote>]]></content>
      
      
      <categories>
          
          <category> Out_Learn </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Stream 流</title>
      <link href="/2022/10/11/Java_Learn/Review/stream/"/>
      <url>/2022/10/11/Java_Learn/Review/stream/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="Stream流"><a href="#Stream流" class="headerlink" title="Stream流"></a>Stream流</h4><h5 id="生成方式"><a href="#生成方式" class="headerlink" title="生成方式"></a>生成方式</h5><blockquote><ul><li>生成流<ul><li>通过数据源(集合，数组等)生成流</li><li>list.stream()</li></ul></li><li>中间操作<ul><li>一个流后面可以跟随零个或多个中间操作，其主要是打开流，做出某种程度的数据过滤/映射，然后返回一个新的流，交给下一个操作使用</li><li>filter()</li></ul></li><li>终结操作<ul><li>一个流只能有一个终结操作，当这个操作执行后，无法再被操作</li><li>forEach()</li></ul></li></ul></blockquote><h5 id="常见生成方式"><a href="#常见生成方式" class="headerlink" title="常见生成方式"></a>常见生成方式</h5><ul><li><p>Collection体系的集合可以使用默认方法stream()生成流</p><ul><li><p>default Stream<E> stream()</p></li><li><p>```java<br>  Stream<String> setStream = set.stream();</p>  <pre class="language-none"><code class="language-none">- Map体系的集合间接的生成流- &#96;&#96;&#96;javaMap&lt;String,Integer&gt; map &#x3D; new HashMap&lt;&gt;();Stream&lt;String&gt; keyStream &#x3D; map.keySet().stream();Stream&lt;Integer&gt; valueStream &#x3D; map.values().stream();Stream&lt;Map.Entry&lt;String,Integer&gt;&gt; entryStream &#x3D; map.entrySet().stream();</code></pre></li></ul></li><li><p>数组可以通过Stream接口的静态方法of(T…values)生成流</p></li><li><pre><code class="java">  String[] strArray = &#123;&quot;hello&quot;,&quot;world&quot;,&quot;java&quot;&#125;;  Stream&lt;String&gt; strArrayStream = Stream.of(strArray);  Stream&lt;String&gt; strArrayStream2 = Stream.of(&quot;hello&quot;,&quot;world&quot;,&quot;java&quot;);  Stream&lt;Integer&gt; intStream = Stream.of(10,20,30);</code></pre></li></ul><h5 id="常见中间操作方法"><a href="#常见中间操作方法" class="headerlink" title="常见中间操作方法"></a>常见中间操作方法</h5><ul><li>Stream <T> filter(Predicate predicate)：用于对流中的数据进行过滤<ul><li>Predicate接口中的方法     boolean test(T t)：对给定的参数进行判断，返回一个布尔值</li></ul></li><li>Stream <T> limit(long maxSize)：返回此流中的元素组成的流，截取前指定参数个数的数据</li><li>Stream <T> skip(long n)：跳过指定参数个数的数据，返回由该流的剩余元素组成的流</li><li>static <T> Stream <T> concat(Stream a,Stream b)：合并a和b两个流为一个流</li><li>Stream  <T> distinct()：返回由该流的不同元素(根据Object.equals(Object))组成的流</li><li>Stream <T> sorted(Comparator comparator)：返回由该流的元素组成的流，根据提供的Comparator进行排序，默认自然排序</li><li><R> Stream<R> map(Function mapper)：返回由给定函数应用于此流的元素的结果组成的流<ul><li>Function接口的方法     R apply(T t)</li></ul></li><li>IntStream mapToInt(ToIntFunction mapper)：返回一个IntStream其中包含将给定函数应用于此流的元素的结果<ul><li>IntStream：表示原始int流</li><li>ToIntFunction接口中的方法       int applyAsInt(T value)</li></ul></li></ul><h5 id="常见终结操作方法"><a href="#常见终结操作方法" class="headerlink" title="常见终结操作方法"></a>常见终结操作方法</h5><ul><li>void forEach(Consumer action) ：对此流的每个元素执行操作<ul><li>Consumer接口中的方法     void accept(T t)：对给定的参数执行此操作</li></ul></li><li>long count()：返此流中的元素数</li></ul><h5 id="Stream流收集操作"><a href="#Stream流收集操作" class="headerlink" title="Stream流收集操作"></a>Stream流收集操作</h5><blockquote><p>对数据使用Stream流的操作完毕后，数据收集到集合中</p><ul><li>R collect(Collector collector)</li><li>该收集方法参数是一个Collector接口</li></ul><p>工具类Collector提供了具体的收集方式</p><ul><li>publc static <T> Collector toList()：把元素收集到List集合中</li><li>publc static <T> Collector toSet()：把元素收集到Set集合中</li><li>publc static Collector toMap(Function keyMapper,Function valueMapper)：把元素收集到Map集合中</li></ul></blockquote>]]></content>
      
      
      <categories>
          
          <category> Out_Learn </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Lambda 函数式编程</title>
      <link href="/2022/10/10/Java_Learn/Review/Lambda/"/>
      <url>/2022/10/10/Java_Learn/Review/Lambda/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="Lambda表达式"><a href="#Lambda表达式" class="headerlink" title="Lambda表达式"></a>Lambda表达式</h4><blockquote><p>匿名内部类中重写run()方法的代码分析</p><ul><li>方法形参为空，说明调用方法时不需要传递参数</li><li>返回值类型为void，无返回结果</li><li>方法体中的内容是具体要做的事</li></ul><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"启动"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>Lambda表达式代码分析</p><ul><li>()：里面没有内容，形参为空</li><li>-&gt;：用箭头指向后面要做的事情</li><li>{ }：代码块，方法内容</li></ul><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token punctuation">&#123;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"启动"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></blockquote><blockquote><p>Lambda表达式使用前提</p><ul><li>有一个接口</li><li>接口中有且仅有一个抽象方法</li></ul></blockquote><h4 id="Lambda表达式和匿名内部类区别"><a href="#Lambda表达式和匿名内部类区别" class="headerlink" title="Lambda表达式和匿名内部类区别"></a>Lambda表达式和匿名内部类区别</h4><blockquote><p>所需类型不同</p><ul><li>匿名内部类：可以是接口，也可以是抽象类、具体类</li><li>Lambda表达式：只能是接口</li></ul></blockquote><blockquote><p>使用限制不同</p><ul><li>如果接口中有且仅有一个抽象方法，可以使用Lambda表达式，也可以使用匿名内部类</li><li>如果接口中多于一个抽象方法，只能使用匿名内部类</li></ul></blockquote><blockquote><p>实现原理不同</p><ul><li>匿名内部类：编译之后，产生单独的.class字节码文件</li><li>Lambda表达式：编译之后，没有单独的.class字节码文件。对应的字节码文件运行时动态生成</li></ul></blockquote><h4 id="接口组成更新"><a href="#接口组成更新" class="headerlink" title="接口组成更新"></a>接口组成更新</h4><h5 id="接口默认方法"><a href="#接口默认方法" class="headerlink" title="接口默认方法"></a>接口默认方法</h5><blockquote><p>接口中默认方法的定义格式：</p><ul><li>格式：public default 返回值类型 方法名(参数列表){ }</li></ul><p>注意事项</p><ul><li>默认方法不是抽象方法，所以不强制被重写，但是可以被重写，重写时去掉default关键字</li><li>public 可以省略，default不可以省略</li></ul></blockquote><h5 id="接口静态方法"><a href="#接口静态方法" class="headerlink" title="接口静态方法"></a>接口静态方法</h5><blockquote><p>定义格式：public static 返回值类型 方法名(参数列表){ }</p><p>注意事项：接口中静态方法只能通过接口调用，不能通过接口实现类调用</p></blockquote><h5 id="接口私有方法-jdk9"><a href="#接口私有方法-jdk9" class="headerlink" title="接口私有方法 jdk9"></a>接口私有方法 jdk9</h5><blockquote><p>格式：</p><ul><li>private 返回值类型 方法名(参数列表){ }</li><li>private static 返回值类型 方法名(参数列表){ }</li></ul><p>注意事项：</p><ul><li>默认方法可以调用私有的静态方法和非静态方法</li><li>静态方法只能调用私有的静态方法</li></ul></blockquote><h4 id="方法引用"><a href="#方法引用" class="headerlink" title="方法引用"></a>方法引用</h4><blockquote><p>方法引用符：</p><ul><li>:：该符号为引用运算符，表达式被称为方法引用</li></ul></blockquote><h5 id="引用类方法"><a href="#引用类方法" class="headerlink" title="引用类方法"></a>引用类方法</h5><blockquote><p>引用类的静态方法</p><ul><li>类名 :: 静态方法</li></ul></blockquote><h5 id="引用对象的实例方法"><a href="#引用对象的实例方法" class="headerlink" title="引用对象的实例方法"></a>引用对象的实例方法</h5><blockquote><p>对象 :: 成员方法</p></blockquote><h5 id="引用类的实例方法"><a href="#引用类的实例方法" class="headerlink" title="引用类的实例方法"></a>引用类的实例方法</h5><blockquote><p>类名 :: 成员方法</p></blockquote><h5 id="引用构造器"><a href="#引用构造器" class="headerlink" title="引用构造器"></a>引用构造器</h5><blockquote><p>引用构造方法</p><ul><li>格式：类名 :: new </li></ul></blockquote><h4 id="常用函数式接口"><a href="#常用函数式接口" class="headerlink" title="常用函数式接口"></a>常用函数式接口</h4><h5 id="Supplier接口"><a href="#Supplier接口" class="headerlink" title="Supplier接口"></a>Supplier接口</h5><blockquote><p>Supplier<T>：包含一个无参的方法</p><ul><li>T get()：获得结果</li><li>该方法不需要参数，它会按照某种实现逻辑(由Lambda表达式实现)返回一个数据</li><li>Supplier<T>接口也被称为生产型接口，如果我们指定了接口的泛型是什么类型，那么接口中的get方法就会生产什么类型的数据供我们使用</li></ul></blockquote><h5 id="Consumer接口"><a href="#Consumer接口" class="headerlink" title="Consumer接口"></a>Consumer接口</h5><blockquote><p>Consumer<T>：包含两个方法</p><ul><li>void accept(T t)：对给定的参数执行此操作</li><li>default Consumer<T> andThen(Consumer after)：返回一个组合的Consumer，依次执行此操作，然后执行after操作</li></ul></blockquote><h5 id="Predicate接口"><a href="#Predicate接口" class="headerlink" title="Predicate接口"></a>Predicate接口</h5><blockquote><p>Predicate<T>：常用的四个方法</p><ul><li>boolean test(T t)：对给定的参数进行判断(判断逻辑由Lambda表达式实现)，返回一个布尔值</li><li>default Predicate<T> negate()：返回一个逻辑的否定，对应逻辑非</li><li>default Predicate<T> and(Predicate other)：返回一个组合判断，对应短路与</li><li>default Predicate<T> or(Predicate other)：返回一个组合判断，对应短路或</li><li>Predicate<T> 接口通常用于判断参数是否满足指定的条件</li></ul></blockquote><h5 id="Function接口"><a href="#Function接口" class="headerlink" title="Function接口"></a>Function接口</h5><blockquote><p>Function&lt;T,R&gt;：常用的两个方法</p><ul><li>R apply(T,t)：将此函数应用于给定的参数</li><li>default <V> Function andThen(Function after)：返回一个组合函数，首先将该函数应用于输入，然后将after函数应用于结果</li><li>Function&lt;T,R&gt;接口通常用于对参数进行处理，转换(处理逻辑由Lambda表达式实现)，然后返回一个新的值</li></ul></blockquote>]]></content>
      
      
      <categories>
          
          <category> Out_Learn </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>线程</title>
      <link href="/2022/09/26/Java_Learn/Review/Thread_Runnable/"/>
      <url>/2022/09/26/Java_Learn/Review/Thread_Runnable/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a>多线程</h4><h5 id="进程"><a href="#进程" class="headerlink" title="进程"></a>进程</h5><blockquote><p>正在运行的应用程序</p><ul><li>系统进行资源分配和调用的独立单位</li><li>每个进程都有内存空间和系统资源</li></ul></blockquote><h5 id="线程"><a href="#线程" class="headerlink" title="线程"></a>线程</h5><blockquote><p>进程中的单个顺序控制流，一条执行路径</p></blockquote><h4 id="多线程实现方式"><a href="#多线程实现方式" class="headerlink" title="多线程实现方式"></a>多线程实现方式</h4><h5 id="继承Thread类"><a href="#继承Thread类" class="headerlink" title="继承Thread类"></a>继承Thread类</h5><blockquote><ul><li>定义一个类继承自Thread类并重写run()方法</li><li>创建类对象，启动线程 ：   <code>start()</code> </li></ul></blockquote><blockquote><ul><li>重写run()方法:<ul><li>run()是用来封装被线程执行的代码</li></ul></li><li>run()和start()区别<ul><li>run()：封装线程执行的代码，直接调用，相当于普通方法的调用</li><li>start()：启动线程；然后由JVM调用该线程的run()方法</li></ul></li></ul></blockquote><blockquote><p>设置和获取线程名称</p><ul><li>void setName(String name)：将此线程的名称更改为参数name</li><li>String getName()：返回此线程的名称</li><li>currentThread()：返回对当前正在执行的线程对象的引用</li></ul><p>可选择重写构造方法来对线程进行命名</p></blockquote><h6 id="线程调度"><a href="#线程调度" class="headerlink" title="线程调度"></a>线程调度</h6><blockquote><p>线程具有两种调度模式</p><ul><li>分时调度模型：所有线程轮流使用CPU的使用权，平均分配每个线程占用CPU的时间片</li><li>抢占式调度模型：优先让优先级高的线程使用CPU，如果优先级相同，随机选择。优先级高的线程获取的CPU时间片相对多一些</li></ul><p>Java使用抢占式调度模型</p></blockquote><blockquote><p>Thread类中设置和获取线程优先级：</p><ul><li>getPriority()：返回此线程的优先级</li><li>setPriority(int newPriority)：更改此线程的优先级    MIN-NORM-MAX：1-5-10</li></ul><p>线程优先级高仅仅表示线程获取CPU时间片的几率高，并不是绝对性的优先运行</p></blockquote><h6 id="线程控制"><a href="#线程控制" class="headerlink" title="线程控制"></a>线程控制</h6><blockquote><ul><li>sleep(long millis)：使当前正在执行的线程暂停执行指定的毫秒数</li><li>join()：等待该线程死亡</li><li>setDaemon(boolean on)：将此线程标记为守护线程，当运行的线程都是守护线程时，Java虚拟机将退出</li></ul></blockquote><h6 id="线程生命周期"><a href="#线程生命周期" class="headerlink" title="线程生命周期"></a>线程生命周期</h6><p><img src="/images/posts/Java_Learn/Review/%E7%BA%BF%E7%A8%8B%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F.jpg" alt="线程生命周期" loading="lazy"></p><h5 id="实现Runnable接口"><a href="#实现Runnable接口" class="headerlink" title="实现Runnable接口"></a>实现Runnable接口</h5><blockquote><ul><li>定义一个类实现Runnable接口，重写run()方法</li><li>创建类对象，创建Thread类对象，把定义类对象作为构造方法的参数</li><li>启动线程</li></ul></blockquote><blockquote><p>好处：</p><ul><li>避免了Java单继承的局限性</li><li>适合多个相同程序的代码去处理同一个资源的情况，把线程和程序的代码、数据有效分离，较好的体现了面向对象的设计思想</li></ul></blockquote><h4 id="线程同步"><a href="#线程同步" class="headerlink" title="线程同步"></a>线程同步</h4><blockquote><p>数据安全问题</p><ul><li>多线程、共享数据、多条语句操作共享数据</li></ul></blockquote><h5 id="同步代码块"><a href="#同步代码块" class="headerlink" title="同步代码块"></a>同步代码块</h5><blockquote><p>锁多条语句操作共享数据</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">synchronized</span><span class="token punctuation">(</span>任意对象<span class="token punctuation">)</span><span class="token punctuation">&#123;</span> 多条语句操作共享数据的代码<span class="token punctuation">&#125;</span></code></pre></blockquote><h5 id="同步方法"><a href="#同步方法" class="headerlink" title="同步方法"></a>同步方法</h5><blockquote><p>将<code>synchronized</code> 关键字加到方法上</p><pre class="language-java" data-language="java"><code class="language-java">修饰符 <span class="token keyword">synchronized</span> 返回值类型 方法名<span class="token punctuation">(</span> 方法参数 <span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span></code></pre><p>同步方法锁的对象：<code>this</code> </p></blockquote><blockquote><p>同步静态方法：</p><pre class="language-java" data-language="java"><code class="language-java">修饰符 <span class="token keyword">static</span> <span class="token keyword">synchronized</span> 返回值类型 方法名<span class="token punctuation">(</span> 方法参数 <span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span></code></pre><p>同步静态锁对象：<code>类名.class</code></p></blockquote><h5 id="线程安全"><a href="#线程安全" class="headerlink" title="线程安全"></a>线程安全</h5><blockquote><p>StringBuffer：</p><ul><li>线程安全，可变的字符序列</li></ul><p>Vector：</p><ul><li>该类改进了List接口，Vector被同步。</li><li>不需要线程安全可以使用ArrayList代替Vector</li></ul><p>Hashtable：</p><ul><li>该类实现了一个哈希表，键值映射。任何非null对象都可以作为键或者值</li><li>实现了Map接口，Hashtable被同步。</li><li>不需要线程安全可以选择HashMap代替</li></ul></blockquote><h5 id="Lock锁"><a href="#Lock锁" class="headerlink" title="Lock锁"></a>Lock锁</h5><blockquote><ul><li>lock()：加锁</li><li>unlock()：释放锁</li></ul><p>Lock接口不能直接实例化，采用实现类ReentrantLock来实例化</p><ul><li>ReentrantLock()：创建一个ReentrantLock实例 </li></ul></blockquote>]]></content>
      
      
      <categories>
          
          <category> Out_Learn </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>IO 流</title>
      <link href="/2022/09/25/Java_Learn/Review/IO/"/>
      <url>/2022/09/25/Java_Learn/Review/IO/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="File"><a href="#File" class="headerlink" title="File"></a>File</h4><blockquote><p>文件和目录路径名的抽象表示</p><ul><li>文件和目录可以通过File封装成对象</li><li>File(String pathname )：通过给定的路径名字符串转换为抽象路径名来创建新的File实例</li><li>File(String parent,String child)：从父路径名字符串和子路径名字符串创建新的File实例</li><li>File(File parent,String child)：从父抽象路径名和子路径名字符串创建新的File实例</li></ul></blockquote><h5 id="File类创建功能"><a href="#File类创建功能" class="headerlink" title="File类创建功能"></a>File类创建功能</h5><blockquote><ul><li>public boolean createNewFile()：当具有该名称的文件不存在时，创建一个由该抽象路径名命名的新空文件</li><li>public boolean mkdir() ：创建由该抽象路径名命名的目录</li><li>public boolean mkdirs() ：创建由该抽象路径名命名的目录，包括任何必需但不存在的父目录</li></ul></blockquote><h5 id="FIle类判断和获取功能"><a href="#FIle类判断和获取功能" class="headerlink" title="FIle类判断和获取功能"></a>FIle类判断和获取功能</h5><blockquote><ul><li>boolean isFile|isDirectory()：测试是否为文件或目录</li><li>boolean exists()：File是否存在</li><li>String getAbsolutePath()：返回抽象路径名的绝对路径字符串</li><li>String getPath()：将抽象路径名转换为路径名字符串</li><li>String getName()：返回此抽象路径名表示的文件或目录的名称</li><li>String[] list()：返回此抽象路径名表示的目录中的文件或目录的名称字符串数组</li><li>File[] listFiles()：返回此抽象路径名表示的目录中的文件或目录的File对象数组</li></ul></blockquote><blockquote><ul><li>boolean delete()：删除此抽象路径名表示的文件或路径</li></ul></blockquote><h4 id="字节流"><a href="#字节流" class="headerlink" title="字节流"></a>字节流</h4><blockquote><ul><li>流：抽象概念，对数据传输的总称，数据在设备之间传输称为流，流的本质时数据传输</li><li>IO流就是用来处理设备之间数据传输问题的：文件复制、文件上传、文件下载</li></ul></blockquote><h5 id="写"><a href="#写" class="headerlink" title="写"></a>写</h5><blockquote><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">FileOutputStream</span> fos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">"javatest.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>fos<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>write()中只能以字节流Byte[]数组进行传输</p></blockquote><blockquote><p>追加数据：</p><ul><li>public FileOutputStream(String name,boolean append)</li><li>创建文件输出流以指定的名称写入文件，append为 true时，字节写入文件末尾而不是开头</li></ul></blockquote><h5 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h5><blockquote><p>finally：在异常处理时提供finally块来执行所有清除操作，比如释放资源</p><p>特点：被finally控制的语句一定会执行，除非JVM退出</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">try</span><span class="token punctuation">&#123;</span> 可能出现异常的代码<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">catch</span><span class="token punctuation">(</span>异常类名 变量名<span class="token punctuation">)</span><span class="token punctuation">&#123;</span> 异常处理的代码<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">finally</span><span class="token punctuation">&#123;</span> 执行所有清除操作<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre></blockquote><h5 id="读"><a href="#读" class="headerlink" title="读"></a>读</h5><blockquote><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">FileInputStream</span> fis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"javatest.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>fos<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>by <span class="token operator">=</span> fis<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">!=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span> 继续读取<span class="token punctuation">&#125;</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bys <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//1024及其整数倍</span><span class="token keyword">int</span> len<span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>len <span class="token operator">=</span> fis<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>bys<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>bys<span class="token punctuation">,</span> <span class="token number">0</span> <span class="token punctuation">,</span>len<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>fis<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>如果到达文件末尾，返回值为 -1 </p></blockquote><h5 id="字节缓冲流"><a href="#字节缓冲流" class="headerlink" title="字节缓冲流"></a>字节缓冲流</h5><blockquote><p>字节缓冲流：</p><ul><li>BufferOutputStream：该类实现缓冲输出流。通过设置这样的输出流，应用程序可以向底层输出流写入字节，而不必为写入的每个字节导致底层的调用</li><li>BufferedInputStream：创建一个内部缓冲区数组，当从流中读取或跳过字节时，内部缓冲区将根据需要从所包含的输入流中重新填充，一次很多字节</li></ul></blockquote><h5 id="编码-amp-解码"><a href="#编码-amp-解码" class="headerlink" title="编码&amp;解码"></a>编码&amp;解码</h5><blockquote><p>编码：</p><ul><li>byte[] getBytes()：使用平台的默认字符集将该String编码为一系列字节，将结果存储到新的字节数组中</li><li>byte[] getBytes(String charsetName)：使用指定的字符集将该String编码为一系列字节，将结果存储到新的字节数组中</li></ul><p>解码：</p><ul><li>String(byte[] bytes)：通过使用平台默认字符集解码指定的字节数组来构造新的String</li><li>String(byte[] bytes, String charsetName)：通过指定的字符集解码指定的字节数组来构造新的String</li></ul></blockquote><h4 id="字符流"><a href="#字符流" class="headerlink" title="字符流"></a>字符流</h4><h5 id="编码解码"><a href="#编码解码" class="headerlink" title="编码解码"></a>编码解码</h5><blockquote><p>InputStreamReader：字节流到字符流</p><ul><li>读取字节，并使用指定的编码将其解码为字符</li></ul><p>OutputStreamWriter：字符流到字节流</p><ul><li>使用指定的编码将写入的字符编码为字节</li></ul></blockquote><h5 id="flush"><a href="#flush" class="headerlink" title="flush"></a>flush</h5><blockquote><ul><li><code>flush</code> 仅仅刷新流的缓冲，与<code>close</code> 不同，<code>close</code> 直接关闭输入输出流</li></ul></blockquote><h4 id="改进版字符流-常用"><a href="#改进版字符流-常用" class="headerlink" title="改进版字符流(常用)"></a>改进版字符流(常用)</h4><blockquote><ul><li>FileReader：用于读取字符文件的便捷类<ul><li>FileReader(String fileName)</li></ul></li><li>FileWriter：用于写入字符文件<ul><li>FileWriter(String fileName)</li></ul></li></ul></blockquote><h5 id="字符缓冲流"><a href="#字符缓冲流" class="headerlink" title="字符缓冲流"></a>字符缓冲流</h5><blockquote><p>字符缓冲流：</p><ul><li>BufferedWriter：将文本写入字符输出流，缓冲字符，以提供单个字符、数组和字符串的高效写入，可以指定缓冲区大小，或者可以接受默认大小</li><li>BufferedReader：从字符输入流读取文本，缓冲字符，以提供字符、数组和行的高效读取，可以指定缓冲区大小，或者可以使用默认大小。默认值足够大。</li></ul><p>构造方法：</p><ul><li>BufferedWriter(Writer out)<ul><li>void newLine()：写一行行分隔符，行分隔符字符串由系统属性定义</li></ul></li><li>BufferedReader(Reader in)<ul><li>public String readLine()：读一行文字。结果包含行的内容的字符串，不包含任何行终止字符，如果流的结尾已经到达，则为null</li></ul></li></ul></blockquote><h4 id="异常处理（JDK7）"><a href="#异常处理（JDK7）" class="headerlink" title="异常处理（JDK7）"></a>异常处理（JDK7）</h4><blockquote><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">try</span><span class="token punctuation">(</span>定义流对象<span class="token punctuation">)</span><span class="token punctuation">&#123;</span> 可能出现异常代码<span class="token punctuation">&#125;</span><span class="token keyword">catch</span><span class="token punctuation">&#123;</span> 异常处理代码<span class="token punctuation">&#125;</span></code></pre><p>自动释放资源</p></blockquote><h4 id="特殊操作流"><a href="#特殊操作流" class="headerlink" title="特殊操作流"></a>特殊操作流</h4><h5 id="标准输入输出流"><a href="#标准输入输出流" class="headerlink" title="标准输入输出流"></a>标准输入输出流</h5><blockquote><p>System类中有两个静态的成员变量</p><ul><li>public static final InputStream in：标准输入流。通常该流对应键盘输入或由主机环境或用户指定的另一个输入源</li><li>public static final PrintStream out：标准输出流。通常该流对应显示输出或由主机环境或用户指定的另一个输出源</li></ul><p>自己实现键盘录入数据：</p><ul><li>BufferedReader br = new BufferedReader(new InputStreamReader(System.in));</li></ul></blockquote><h5 id="打印流"><a href="#打印流" class="headerlink" title="打印流"></a>打印流</h5><blockquote><ul><li>字节打印流：PrintStream</li><li>字符打印流：PrintWriter</li></ul></blockquote><h5 id="对象序列化流"><a href="#对象序列化流" class="headerlink" title="对象序列化流"></a>对象序列化流</h5><blockquote><p>对象序列化：将对象保存到磁盘中，或者在网络中传输对象</p><p>这种机制就是使用一个字节序列表示一个对象，该字节序列包含：对象的类型、对象的数据和对象中存储的属性等信息</p><p>字节序列写到文件之后，相当于文件中持久保存了一个对象的信息</p><p>反之，该字节序列还可以从文件中读取回来，重构对象，对它进行反序列化</p><ul><li>对象序列化流：ObjectOutputStream</li><li>对象反序列流：ObjectInputStream</li></ul></blockquote><blockquote><p>对象序列化流：ObjectOutputStream</p><ul><li>将Java对象的原始数据类型和图形写入OutputStream。可以使用ObjectInputStream读取（重构）对象。可以通过使用流的文件来实现对象的持久存储。如果流是网络套接字流，则可以在另一个主机上或另一个进程中重构对象</li></ul><p>构造方法：</p><ul><li>ObjectOutputStream(OutputStream out)：创建一个写入指定的OutputStream的ObjectOutputStream</li></ul><p>序列化对象的方法：</p><ul><li>void writeObject(Object obj)：将指定的对象写入ObjectOutputStream</li></ul></blockquote><blockquote><p>对象被序列化，所属类中实现<code>Serializable</code> 接口，不用重写方法</p></blockquote><blockquote><ul><li>对象反序列流：ObjectInputStream</li></ul></blockquote><blockquote><p>对象反序列化流：ObjectOutputStream</p><ul><li>反序列化先前使用的ObjectOutputStream编写的原始数据和对象</li></ul><p>构造方法：</p><ul><li>ObjectInputStream(InputStream in)：创建从指定的InputStream读取的ObjectInputStream</li></ul><p>序列化对象的方法：</p><ul><li>Object readObject(Object obj)：从ObjectInputStream读取一个对象</li></ul></blockquote><h6 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h6><blockquote><p>用对象序列化流序列化了一个对象后，假如修改了对象所属的类文件，数据读取会不会出问题？</p><ul><li>类的串行版本与从流中读取的类描述符的类型不匹配； 序列化ID不同</li></ul></blockquote><blockquote><p>如何解决？</p><ul><li>可序列化类必须声明一个明确的serialVersionUID值。还强烈建议显式声明serialVersionUID使用  <code>private</code>修饰在可能的地方，因为这样的声明只适用于立即声明类–  serialVersionUID字段不能作为继承的成员。数组类不能声明一个明确的serialVersionUID，所以他们总是有默认值，但匹配serialVersionUID值要求豁免数组类。 </li></ul></blockquote><blockquote><p>如果一个对象中的某个成员变量的值不想被序列化，如何实现？</p><ul><li>transient 修饰</li></ul></blockquote><h5 id="Properties"><a href="#Properties" class="headerlink" title="Properties"></a>Properties</h5><blockquote><ul><li>Map体系的集合类 （不用指定泛型）</li><li>可以保存到流中或从流中加载</li></ul></blockquote><blockquote><ul><li>Object setProperties(String key,String value)：设置集合的键和值，都是String类型，底层调用Hashtable方法put</li><li>String getProperties(String key)：使用此属性列表中指定的键搜索属性</li><li>Set <String> stringPropertyNames()：从该属性列表中返回一个不可修改的键集，其中键及其对应的值是字符串</li></ul></blockquote><blockquote><ul><li>void load()：从输入字节流/字符流读取属性列表（键和元素对）</li><li>void store()：将此属性列表（键和元素对）写入此Properties表中，以适合使用load(Reader)方法的格式写入输出字节流/字符流</li></ul></blockquote>]]></content>
      
      
      <categories>
          
          <category> Out_Learn </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>集合</title>
      <link href="/2022/09/25/Java_Learn/Review/Collection/"/>
      <url>/2022/09/25/Java_Learn/Review/Collection/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h4><ul><li>单列集合：Collection<ul><li>List：可重复<ul><li>ArrayList</li><li>LinkedList</li></ul></li><li>Set：不可重复<ul><li>HashSet</li><li>TreeSet</li></ul></li></ul></li><li>双列集合：Map<ul><li>HashMap</li></ul></li></ul><h4 id="Collection"><a href="#Collection" class="headerlink" title="Collection"></a>Collection</h4><p>JDK不提供接口实现，提供子接口Set和List实现</p><blockquote><p>add(E e)：添加元素</p><p>remove(Object o)：移除元素</p><p>clear：清空元素    contains(Object o)：判断集合中是否存在指定元素</p><p>isEmpty()：判断集合是否为空    size()：集合长度，也就是集合中元素的个数</p></blockquote><h5 id="遍历"><a href="#遍历" class="headerlink" title="遍历"></a>遍历</h5><blockquote><p>Iterator：迭代器，集合的专用遍历方式</p><ul><li>Iterator<E> iterator()：返回此集合中元素的迭代器，通过集合的iterator()方法得到</li><li>迭代器依赖于集合而存在的</li></ul><p>Iterator常用方法：</p><ul><li>E next()：返回迭代中的下一个元素</li><li>boolean hasNext()：如果迭代具有更多元素，返回true</li></ul></blockquote><h4 id="List-有序可重复"><a href="#List-有序可重复" class="headerlink" title="List(有序可重复)"></a>List(有序可重复)</h4><blockquote><p>add(int index,E element)：在集合指定位置插入指定元素</p><p>remove(int index)：删除指定索引处的元素，返回被删除的元素</p><p>set(int index,E element)：修改指定索引处的元素，返回被修改的元素</p><p>get(int index)：返回指定索引处的元素</p></blockquote><h5 id="并发修改异常"><a href="#并发修改异常" class="headerlink" title="并发修改异常"></a>并发修改异常</h5><blockquote><p>并发修改异常：</p><ul><li>ConcurrentModificationException</li></ul><p>产生原因：</p><ul><li>迭代器遍历过程中，通过集合对象修改了集合中元素的长度，造成迭代器获取元素中判断预期修改值和实际修改值不一致</li></ul><p>解决方案</p><ul><li>用for循环遍历，然后用集合对象做对应的操作即可</li></ul></blockquote><h5 id="ListIterator-列表迭代器"><a href="#ListIterator-列表迭代器" class="headerlink" title="ListIterator 列表迭代器"></a>ListIterator 列表迭代器</h5><blockquote><p>ListIterator允许程序员沿任一方向遍历列表，在迭代期间修改列表，并获取当前位置</p><p>ListIterator常用方法：</p><ul><li>E previous()：返回迭代中的上一个元素</li><li>boolean hasPrevious()：如果迭代相反方向具有更多元素，返回true</li><li>add(E e)：将指定的元素插入列表</li></ul></blockquote><h5 id="增强for循环"><a href="#增强for循环" class="headerlink" title="增强for循环"></a>增强for循环</h5><blockquote><p>增强for：简化数组和Collection集合的遍历</p><p>格式：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">for</span><span class="token punctuation">(</span>元素数据类型 变量名 <span class="token operator">:</span> 数组或<span class="token class-name">Collection</span>集合<span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token comment">//在此处使用变量即可，该变量就是元素</span><span class="token punctuation">&#125;</span></code></pre><p>内部本质是一个Iterator迭代器</p></blockquote><h5 id="List集合子类"><a href="#List集合子类" class="headerlink" title="List集合子类"></a>List集合子类</h5><blockquote><ul><li>ArrayList：底层数据结构是数组，查询快，增删慢</li><li>LinkedList：底层数据结构是链表，查询慢，增删快<ul><li>addFirst|addLast()：在列表开头或结尾增加元素</li><li>getFirst|getLast()：返回第一个或最后一个元素</li><li>removeFirst|removeLast()：删除并返回第一个或最后一个元素</li></ul></li></ul></blockquote><h4 id="Set-不重复-没有索引，不能for遍历"><a href="#Set-不重复-没有索引，不能for遍历" class="headerlink" title="Set(不重复)没有索引，不能for遍历"></a>Set(不重复)没有索引，不能for遍历</h4><blockquote><p><code>Set&lt;String&gt; set = new HashSet&lt;&gt;()</code> 创建对象</p><p>HashSet：对集合的迭代顺序不做任何保证</p></blockquote><h5 id="哈希值"><a href="#哈希值" class="headerlink" title="哈希值"></a>哈希值</h5><blockquote><p>根据对象的地址或者字符串或数字算出来的int类型的数值</p><p><code>hashCode()</code> 获取对象的哈希值</p><p>默认情况下，不同对象的哈希值是不同的。</p><p>通过方法重写可以实现不同对象哈希值相同</p></blockquote><h5 id="HashSet"><a href="#HashSet" class="headerlink" title="HashSet"></a>HashSet</h5><blockquote><ul><li>底层数据结构是哈希表</li><li>迭代顺序不做保证</li><li>没有索引方法，不能for循环遍历，可以fori</li><li>不重复</li></ul></blockquote><blockquote><p>HashSet集合保证唯一性原理：</p><p>如果哈希表未初始化，就进行初始化；</p><p>根据对象的哈希值计算对象的存储位置，该位置无元素则存储元素；</p><p>存入元素和之前元素对比哈希值：</p><p>​    不同：继续执行，添加元素到集合</p><p>​    相同：调用对象的equals()方法比较：</p><p>​            false：继续执行，元素添加到集合</p><p>​            true：元素重复，不存储</p></blockquote><p>若要重复：需重写HashCode和equals方法</p><h6 id="哈希表"><a href="#哈希表" class="headerlink" title="哈希表"></a>哈希表</h6><blockquote><p>元素为链表的数组 </p></blockquote><h6 id="LinkedHashSet"><a href="#LinkedHashSet" class="headerlink" title="LinkedHashSet"></a>LinkedHashSet</h6><blockquote><p>哈希表和链表组成</p></blockquote><h5 id="TreeSet"><a href="#TreeSet" class="headerlink" title="TreeSet"></a>TreeSet</h5><blockquote><p>间接的实现了Set接口；自然排序</p><ul><li>元素按照一定的规则进行排序，具体排序方式取决于构造方法<ul><li>TreeSet()：根据元素自然排序进行排序</li><li>TreeSet(Comparator comparator)：根据指定比较器进行排序</li></ul></li><li>没有带索引的方法，不能使用普通的for循环遍历</li><li>不包含重复元素</li></ul></blockquote><blockquote><p>无参构造方法为自然排序</p><p>让元素所属的类实现Comparable接口，重写compareTo方法</p><p>重写方法时，注意排序规则按照要求的主要条件和次要条件</p></blockquote><h6 id="比较器排序Comparator"><a href="#比较器排序Comparator" class="headerlink" title="比较器排序Comparator"></a>比较器排序Comparator</h6><blockquote><ul><li>用TreeSet集合存储自定义对象，带参构造方法使用比较器排序</li><li>让集合构造方法接收Comparator的实现类对象，重写compare(T o1,T o2)方法</li><li>按照要求的主要次要排序条件</li></ul></blockquote><h4 id="泛型"><a href="#泛型" class="headerlink" title="泛型"></a>泛型</h4><blockquote><p>本质是参数化类型，所操作的数据类型被指定为一个参数</p><p>将类型由原来的具体的类型参数化，然后在使用/调用时传入具体的类型</p></blockquote><blockquote><p>泛型格式：</p><ul><li>&lt;类型&gt;：指定一种类型的格式，看作形参</li><li>&lt;类型1,类型2&gt;：指定多种类型的格式，用逗号隔开，看作形参</li><li>将来具体调用的时候给定的类型可以看成实参，并且实参的类型只能是引用数据类型</li></ul></blockquote><h5 id="泛型类"><a href="#泛型类" class="headerlink" title="泛型类"></a>泛型类</h5><blockquote><ul><li>格式：修饰符 class 类名&lt;类型&gt;{}</li><li>范例：public class Generic<T>{}</li></ul></blockquote><h5 id="泛型方法"><a href="#泛型方法" class="headerlink" title="泛型方法"></a>泛型方法</h5><blockquote><ul><li>格式：修饰符 &lt;类型&gt; 返回值类型 方法名(类型 变量名){ }</li><li>publc <T> void show(T t){ }</li></ul></blockquote><h5 id="类型通配符"><a href="#类型通配符" class="headerlink" title="类型通配符"></a>类型通配符</h5><blockquote><p>为了表示各种泛型List的父类，使用类型通配符</p><ul><li><?></li><li>表示各种类型的泛型的父类</li></ul></blockquote><blockquote><ul><li>通配符上限：&lt;? extend 类型&gt;    表示类型及其子类型</li><li>通配符下限：&lt;? super 类型&gt;      表示类型及其父类型</li></ul></blockquote><h4 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h4><blockquote><p>概述：</p><ul><li>Interface Map&lt;K,V&gt;    K：键的类型；    V：值的类型</li><li>将键映射到值的对象；不能包含重复的键；每个键可以映射到最多一个值</li></ul></blockquote><blockquote><p>put(K key,V value)：添加元素</p><p>remove(Object key)：根据键删除键值对元素</p><p>clear()：移除所有键值对元素</p><p>containsKey(Object Key)：判断集合是否包含指定的键</p><p>containsValue(Object value)：判断集合是否包含指定的值</p><p>isEmpty()：判断集合是否为空</p><p>size()：集合的长度，也就是集合中键值对的个数</p></blockquote><blockquote><p>Map集合的获取功能：</p><ul><li>V get(Object key)    根据键获取值</li><li>Set<K>keySet()    获取所有键的集合</li><li>Collection<V> values()    获取所有值的集合</li><li>Set&lt;Map.Entry&lt;K,V&gt;&gt; entrySet()    获取所有键值对对象的集合</li></ul></blockquote><h4 id="Collections"><a href="#Collections" class="headerlink" title="Collections"></a>Collections</h4><blockquote><p>Collections是针对集合操作的工具类</p><p>常用方法：</p><ul><li>public static &lt;T extends Comparable&lt;? super T&gt;&gt;  void sort(List <T> list)：将指定列表按升序排列</li><li>public static void reverse(List &lt;?&gt; list)：反转指定列表中元素的顺序</li><li>public static void shuffle(List &lt;?&gt; list)：使用默认的随机源随机排序指定的列表</li></ul></blockquote>]]></content>
      
      
      <categories>
          
          <category> Out_Learn </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>封装 多态 异常</title>
      <link href="/2022/09/24/Java_Learn/Review/FZ_DT_YC/"/>
      <url>/2022/09/24/Java_Learn/Review/FZ_DT_YC/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h4><h5 id="this关键字"><a href="#this关键字" class="headerlink" title="this关键字"></a>this关键字</h5><blockquote><p>this修饰变量代指成员变量，解决局部变量隐藏成员变量</p><p>this代表被调用的对象</p></blockquote><h5 id="封装-1"><a href="#封装-1" class="headerlink" title="封装"></a>封装</h5><blockquote><p>封装：将类的某些信息隐藏在类的内部，不允许外部程序直接访问，而是通过该类提供的方法来实现对隐藏信息的操作和访问成员变量private，提供对应的get和set方法</p><p>好处：控制成员变量的操作，提高了代码的安全性</p><p>​            提高代码复用性</p></blockquote><h5 id="标准类制作"><a href="#标准类制作" class="headerlink" title="标准类制作"></a>标准类制作</h5><blockquote><ol><li>private 成员变量</li><li>无参+带参构造方法</li><li>提供set、get、show方法</li><li>构造对象并为成员变量赋值</li></ol></blockquote><h4 id="多态转型"><a href="#多态转型" class="headerlink" title="多态转型"></a>多态转型</h4><blockquote><p>向上转型：</p><p>Animal a = new Cat()</p><p>向下转型：</p><p>Cat c = (Cat) a;</p><p>c.eat()</p></blockquote><h4 id="抽象"><a href="#抽象" class="headerlink" title="抽象"></a>抽象</h4><blockquote><p>抽象类内可以没有抽象方法，抽象方法必须存在于抽象类中</p><p>抽象方法没有方法体</p><p>抽象类不能实例化，可以采用多态方法</p></blockquote><h4 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h4><blockquote><p>接口成员变量默认为final</p><p>接口里成员方法只能是抽象方法</p></blockquote><p>抽象类是对事物的抽象，接口是对行为的抽象</p><h4 id="内部类"><a href="#内部类" class="headerlink" title="内部类"></a>内部类</h4><blockquote><p>内部类可以直接访问外部类的成员，包括私有</p><p>外部类要访问内部类的成员，必须创建对象</p></blockquote><h5 id="匿名内部类"><a href="#匿名内部类" class="headerlink" title="匿名内部类"></a>匿名内部类</h5><blockquote><p>前提：存在一个类或者接口，可以是具体类或抽象类</p><p>本质：一个继承了该类或实现了该接口的子类匿名对象</p></blockquote><h4 id="基本数据类型包装类"><a href="#基本数据类型包装类" class="headerlink" title="基本数据类型包装类"></a>基本数据类型包装类</h4><blockquote><p>用于基本数据类型和字符串之间的相互转换</p></blockquote><h5 id="Integer"><a href="#Integer" class="headerlink" title="Integer"></a>Integer</h5><blockquote><p><code>valueOf()</code> 返回指定数据类型的Integer对象</p></blockquote><blockquote><p>String转int <code>intValue() parseInt()</code> </p></blockquote><h5 id="String"><a href="#String" class="headerlink" title="String"></a>String</h5><blockquote><p>分割字符串：<code>split()</code> </p></blockquote><h5 id="装箱和拆箱"><a href="#装箱和拆箱" class="headerlink" title="装箱和拆箱"></a>装箱和拆箱</h5><blockquote><p>装箱：把基本数据类型转换为对应的包装类类型</p><p>拆箱：把包装类类型转换为对应的基本数据类型</p></blockquote><blockquote><p>Java内部自动装箱和拆箱</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">Integer</span> i <span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">;</span>i<span class="token operator">+=</span><span class="token number">200</span><span class="token punctuation">;</span></code></pre></blockquote><h4 id="日期"><a href="#日期" class="headerlink" title="日期"></a>日期</h4><h5 id="SimpleDateFormat"><a href="#SimpleDateFormat" class="headerlink" title="SimpleDateFormat"></a>SimpleDateFormat</h5><p>用于日期格式解析</p><h5 id="Calendar"><a href="#Calendar" class="headerlink" title="Calendar"></a>Calendar</h5><blockquote><p>calendar为某一时刻和一组日历字段之间的转换提供了方法</p></blockquote><blockquote><p><code>getInstance()</code> 用于获取calendar对象，其日历字段已使用当前日期和时间初始化</p><p>get() :返回给定日历字段的值</p><p>public abstract void add(int field,int mount)    根据日历的规则，将指定的时间量添加或减去给定的日历字段</p><p>set() :设置当前日历的年月日</p></blockquote><h4 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h4><p>Throwable类是所有错误和异常的超类</p><blockquote><p>Throwable:</p><ul><li>Error：严重问题，不需要处理</li><li>Exception：称为异常类，表示程序本身可以处理的问题<ul><li>RuntimeException：在编译时期是不检查的，出现问题后，需要后续修改代码</li><li>非RuntimeException：编译时期必须处理，否则不能通过编译，不能正常运行</li></ul></li></ul></blockquote><h5 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h5><h6 id="try-catch"><a href="#try-catch" class="headerlink" title="try catch"></a>try catch</h6><p>抛出异常后，程序可以继续执行</p><h6 id="Throwable成员方法"><a href="#Throwable成员方法" class="headerlink" title="Throwable成员方法"></a>Throwable成员方法</h6><blockquote><p>getMessage()：返回此throwable的详细消息字符串</p><p>toString()：返回此可抛出的简短描述</p><p>printStackTrace()：把异常错误信息输出在控制台</p></blockquote><h6 id="throws处理异常"><a href="#throws处理异常" class="headerlink" title="throws处理异常"></a>throws处理异常</h6><p>仅仅抛出异常</p><h5 id="自定义异常"><a href="#自定义异常" class="headerlink" title="自定义异常"></a>自定义异常</h5><blockquote><p>格式：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> 异常类名 <span class="token keyword">extends</span> <span class="token class-name">Exception</span><span class="token punctuation">&#123;</span>无参构造dai'ca<span class="token punctuation">&#125;</span></code></pre></blockquote>]]></content>
      
      
      <categories>
          
          <category> Out_Learn </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Javascript 基础学习第4天</title>
      <link href="/2022/05/04/Web_Learn/Javascript_Base_Learn/Javascript_Base04/"/>
      <url>/2022/05/04/Web_Learn/Javascript_Base_Learn/Javascript_Base04/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><center>过多与其他语言重复的，而且内置对象还是得去看文档，光靠这点不行的</center></blockquote><span id="more"></span><h4 id="遍历对象"><a href="#遍历对象" class="headerlink" title="遍历对象"></a>遍历对象</h4><blockquote><p>for in 遍历对象</p></blockquote><pre class="language-js" data-language="js"><code class="language-js"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> k <span class="token keyword">in</span> obj<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// k 变量 输出  得到的是 属性名</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// obj[k] 得到是 属性值</span><span class="token punctuation">&#125;</span></code></pre><h4 id="Math数学对象"><a href="#Math数学对象" class="headerlink" title="Math数学对象"></a>Math数学对象</h4><blockquote><p>no 构造函数，直接使用属性和方法</p><p>详情使用方式参考 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Math">MDN文档-Math对象使用方法</a> </p></blockquote><blockquote><p>随机数</p><p>Math.random( );    [0,1)</p></blockquote><h4 id="Date日期对象"><a href="#Date日期对象" class="headerlink" title="Date日期对象"></a>Date日期对象</h4><blockquote><p>详情使用方式参考 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Date">MDN文档-Date日期对象使用方法</a> </p></blockquote><h5 id="日期格式化"><a href="#日期格式化" class="headerlink" title="日期格式化"></a>日期格式化</h5><pre class="language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> date <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>date<span class="token punctuation">.</span><span class="token function">getFullYear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 返回当前日期的年 </span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>date<span class="token punctuation">.</span><span class="token function">getMonth</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 月份从0开始索引</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>date<span class="token punctuation">.</span><span class="token function">getDate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 返回的是 几号</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>date<span class="token punctuation">.</span><span class="token function">getDay</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 周一返回的是 1 周六返回的是 6 但是 周日返回的是 0</span></code></pre><h5 id="获得总毫秒数"><a href="#获得总毫秒数" class="headerlink" title="获得总毫秒数"></a>获得总毫秒数</h5><pre class="language-js" data-language="js"><code class="language-js"><span class="token comment">// 获得Date总的毫秒数(时间戳)  不是当前时间的毫秒数 而是距离1970年1月1号过了多少毫秒数</span><span class="token comment">// 1. 通过 valueOf()  getTime()</span><span class="token keyword">var</span> date <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>date<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 就是 我们现在时间 距离1970.1.1 总的毫秒数</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>date<span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 2. 简单的写法 (最常用的写法)</span><span class="token keyword">var</span> date1 <span class="token operator">=</span> <span class="token operator">+</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// +new Date()  返回的就是总的毫秒数</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>date1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 3. H5 新增的 获得总的毫秒数</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="数组Array对象"><a href="#数组Array对象" class="headerlink" title="数组Array对象"></a>数组Array对象</h4><blockquote><p>详情使用方式参考 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array">MDN文档-数组Array对象使用方法</a> </p></blockquote><pre class="language-js" data-language="js"><code class="language-js"><span class="token comment">// 检测是否为数组</span><span class="token comment">// (1) instanceof  运算符 它可以用来检测是否为数组</span><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr <span class="token keyword">instanceof</span> <span class="token class-name">Array</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// (2) Array.isArray(参数);  H5新增的方法  ie9以上版本支持</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><blockquote><ul><li><p>push() 在我们数组的末尾 添加一个或者多个数组元素  push  推</p><ul><li>push 是可以给数组追加新的元素</li><li>push() 参数直接写 数组元素就可以了</li><li>push完毕之后，返回的结果是 新数组的长度 </li><li>原数组也会发生变化</li></ul></li><li><p>unshift 在我们数组的开头 添加一个或者多个数组元素</p><ul><li>unshift是可以给数组前面追加新的元素</li><li>unshift() 参数直接写 数组元素就可以了</li><li>unshift完毕之后，返回的结果是 新数组的长度 </li><li>原数组也会发生变化</li></ul></li><li><p>pop() 它可以删除数组的最后一个元素  </p><ul><li>pop是可以删除数组的最后一个元素 记住一次只能删除一个元素</li><li>pop() 没有参数</li><li>pop完毕之后，返回的结果是 删除的那个元素 </li><li>原数组也会发生变化</li></ul></li><li><p>shift() 它可以删除数组的第一个元素  </p><ul><li>shift是可以删除数组的第一个元素 记住一次只能删除一个元素</li><li>shift() 没有参数</li><li>shift完毕之后，返回的结果是 删除的那个元素 </li><li>原数组也会发生变化</li></ul></li></ul></blockquote><h5 id="冒泡排序（原生）"><a href="#冒泡排序（原生）" class="headerlink" title="冒泡排序（原生）"></a>冒泡排序（原生）</h5><pre class="language-js" data-language="js"><code class="language-js">arr<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//  return a - b; 升序的顺序排列</span>    <span class="token keyword">return</span> b <span class="token operator">-</span> a<span class="token punctuation">;</span> <span class="token comment">// 降序的顺序排列</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h5 id="数组转字符串"><a href="#数组转字符串" class="headerlink" title="数组转字符串"></a>数组转字符串</h5><pre class="language-js" data-language="js"><code class="language-js"><span class="token comment">// 1. toString() 将我们的数组转换为字符串</span><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1,2,3</span><span class="token comment">// 2. join(分隔符) </span><span class="token keyword">var</span> arr1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'green'</span><span class="token punctuation">,</span> <span class="token string">'blue'</span><span class="token punctuation">,</span> <span class="token string">'pink'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr1<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// green,blue,pink</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr1<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">'-'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// green-blue-pink</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr1<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">'&amp;'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// green&amp;blue&amp;pink</span></code></pre><h4 id="字符串String对象"><a href="#字符串String对象" class="headerlink" title="字符串String对象"></a>字符串String对象</h4><blockquote><p>详情使用方式参考 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String">MDN文档-字符串String对象使用方法</a> </p></blockquote><h5 id="基本包装类型"><a href="#基本包装类型" class="headerlink" title="基本包装类型"></a>基本包装类型</h5><blockquote><p>为了方便操作基本数据类型，JavaScript提供了三个特殊的引用类型：String、Number、Boolean。</p><p>基本包装类型就是把简单数据类型包装成复杂数据类型，使其拥有属性和方法</p></blockquote><blockquote><p>字符串的不可变性，已声明再次赋值，新开辟空间存储</p></blockquote><h5 id="根据字符串对象返回字符位置"><a href="#根据字符串对象返回字符位置" class="headerlink" title="根据字符串对象返回字符位置"></a>根据字符串对象返回字符位置</h5><blockquote><p>字符串对象  根据字符返回位置  str.indexOf(‘要查找的字符’, [起始的位置])</p></blockquote><pre class="language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">'改革春风吹满地，春天来了'</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">'春'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//2</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">'春'</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 从索引号是 3的位置开始往后查找</span></code></pre><h5 id="根据位置返回字符"><a href="#根据位置返回字符" class="headerlink" title="根据位置返回字符"></a>根据位置返回字符</h5><table><thead><tr><th>方法名</th><th>说明</th><th>使用</th></tr></thead><tbody><tr><td><code>charAt(index)</code></td><td>返回指定位置的字符</td><td><code>str.charAt(0)</code></td></tr><tr><td><code>charCodeAt(index)</code></td><td>获取指定位置字符的ASCII码</td><td><code>str.charCodeAt(0)</code></td></tr><tr><td><code>str[index]</code></td><td>获取指定位置字符</td><td>HTML5，IE8+支持 和<code>charAt()</code> 等效</td></tr></tbody></table><pre class="language-js" data-language="js"><code class="language-js"><span class="token comment">// 根据位置返回字符</span><span class="token comment">// 1. charAt(index) 根据位置返回字符</span><span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">'andy'</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 遍历所有的字符</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> str<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 2. charCodeAt(index)  返回相应索引号的字符ASCII值 目的： 判断用户按下了那个键 </span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">charCodeAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 97</span><span class="token comment">// 3. str[index] H5 新增的</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// a</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Out_Learn </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Javascript 基础学习第3天</title>
      <link href="/2022/05/03/Web_Learn/Javascript_Base_Learn/Javascript_Base03/"/>
      <url>/2022/05/03/Web_Learn/Javascript_Base_Learn/Javascript_Base03/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><center>好了，这回不一样了，真就是开阔视野，作用域啥的有点东西；对象都多种多样咧。(T_T)</center></blockquote><span id="more"></span><h4 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h4><h5 id="创建数组"><a href="#创建数组" class="headerlink" title="创建数组"></a>创建数组</h5><pre class="language-js" data-language="js"><code class="language-js"><span class="token number">1.</span><span class="token function">数组</span><span class="token punctuation">(</span>Array<span class="token punctuation">)</span> ：就是一组数据的集合 存储在单个变量下的优雅方式 <span class="token number">2.</span> 利用<span class="token keyword">new</span> 创建数组<span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 创建了一个空的数组</span><span class="token number">3.</span> 利用数组字面量创建数组 <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 创建了一个空的数组</span><span class="token keyword">var</span> arr1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'pink老师'</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token number">4.</span> 我们数组里面的数据一定用逗号分隔<span class="token number">5.</span> 数组里面的数据 比如<span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span>， 我们称为数组元素<span class="token number">6.</span> 获取数组元素  格式 数组名<span class="token punctuation">[</span>索引号<span class="token punctuation">]</span>  索引号从 <span class="token number">0</span>开始 </code></pre><blockquote><p>遍历数组参考普通高级语言</p></blockquote><h5 id="数组转字符串"><a href="#数组转字符串" class="headerlink" title="数组转字符串"></a>数组转字符串</h5><ul><li>利用字符分割，也就是把数组元素连接成新字符串</li></ul><pre class="language-js" data-language="js"><code class="language-js">将数组 <span class="token punctuation">[</span><span class="token string">'red'</span><span class="token punctuation">,</span> <span class="token string">'green'</span><span class="token punctuation">,</span> <span class="token string">'blue'</span><span class="token punctuation">,</span> <span class="token string">'pink'</span><span class="token punctuation">]</span> 转换为字符串，并且用 <span class="token operator">|</span> 或其他符号分割<span class="token number">1.</span>需要一个新变量用于存放转换完的字符串 str。<span class="token number">2.</span>遍历原来的数组，分别把里面数据取出来，加到字符串里面。<span class="token number">3.</span>同时在后面多加一个分隔符<span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'red'</span><span class="token punctuation">,</span> <span class="token string">'green'</span><span class="token punctuation">,</span> <span class="token string">'blue'</span><span class="token punctuation">,</span> <span class="token string">'pink'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">;</span><span class="token keyword">var</span> sep <span class="token operator">=</span> <span class="token string">'*'</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    str <span class="token operator">+=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> sep<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h5 id="新增数组元素"><a href="#新增数组元素" class="headerlink" title="新增数组元素"></a>新增数组元素</h5><ul><li>直接修改数组长度</li><li>直接尾部添加元素</li></ul><h4 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h4><pre class="language-js" data-language="js"><code class="language-js">      <span class="token keyword">function</span> <span class="token function">函数名</span><span class="token punctuation">(</span> <span class="token parameter">形参</span> <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token comment">// 函数体</span>          <span class="token keyword">return</span> 返回值<span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span><span class="token function">函数名</span><span class="token punctuation">(</span> 实参 <span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// 2. 函数表达式(匿名函数) </span>      <span class="token comment">// var 变量名 = function() &#123;&#125;;</span>      <span class="token keyword">var</span> <span class="token function-variable function">fun</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">aru</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'我是函数表达式'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>aru<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      <span class="token function">fun</span><span class="token punctuation">(</span><span class="token string">'老师'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// (1) fun是变量名 不是函数名  </span>      <span class="token comment">// (2) 函数表达式声明方式跟声明变量差不多，只不过变量里面存的是值 而 函数表达式里面存的是函数</span>      <span class="token comment">// (3) 函数表达式也可以进行传递参数</span></code></pre><ul><li>如果实参的个数和形参的个数一致 则正常输出结果</li><li>如果实参的个数多于形参的个数  会取到形参的个数 </li><li>如果实参的个数小于形参的个数  多于的形参定义为undefined  最终的结果就是 NaN</li></ul><h5 id="arguments的使用"><a href="#arguments的使用" class="headerlink" title="arguments的使用"></a>arguments的使用</h5><blockquote><p>不确定参数数量，使用arguments获取，实际为当前函数的内置对象，存储了传递的所有实参</p><ul><li>arguments为伪数组</li><li>具有数组长度length</li><li>按照索引的方式进行存储</li><li>没有真正数组的一些方法 pop(),push();</li></ul></blockquote><pre class="language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>   console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arguments<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">f</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token comment">//[1,2,3]</span></code></pre><h4 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h4><blockquote><p>代码可用范围</p><p>​     js中没有块级作用域  js的作用域： 全局作用域  局部作用域  现阶段我们js 没有 块级作用域</p><p>​     js 也是在 es6 的时候新增的块级作用域</p><p>​     块级作用域 {}  if {}  for {}</p></blockquote><ul><li>全局作用域</li><li>局部作用域</li></ul><h4 id="作用域链"><a href="#作用域链" class="headerlink" title="作用域链"></a>作用域链</h4><blockquote><p>内部函数访问外部函数的变量，采取的是链式查找的方式来决定取那个值 这种结构我们称为作用域链  就近原则</p></blockquote><pre class="language-js" data-language="js"><code class="language-js">      <span class="token keyword">var</span> num <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>      <span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">// 外部函数</span>          <span class="token keyword">var</span> num <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>          <span class="token keyword">function</span> <span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">// 内部函数</span>              console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">&#125;</span>          <span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//20</span></code></pre><h4 id="JavaScript预解析"><a href="#JavaScript预解析" class="headerlink" title="JavaScript预解析"></a>JavaScript预解析</h4><blockquote><p>JavaScript解析器运行代码步骤 </p><ul><li>预解析 ：js引擎会把所有的 var 还有 function 提升到当前作用域的最前面</li><li>代码执行：按照代码书写的顺序从上往下执行</li></ul></blockquote><h5 id="预解析"><a href="#预解析" class="headerlink" title="预解析"></a>预解析</h5><blockquote><p>预解析 ： 变量预解析（变量提升） ， 函数预解析（函数提升）</p></blockquote><h6 id="变量提升"><a href="#变量提升" class="headerlink" title="变量提升"></a>变量提升</h6><blockquote><p>把所有的变量声明提升到当前作用域最前面，<em>不提升赋值操作</em> </p></blockquote><h6 id="函数提升"><a href="#函数提升" class="headerlink" title="函数提升"></a>函数提升</h6><blockquote><p>把所有的变函数声明提升到当前作用域最前面，<em>不调用函数</em> </p></blockquote><h4 id="JavaScript对象"><a href="#JavaScript对象" class="headerlink" title="JavaScript对象"></a>JavaScript对象</h4><blockquote><p>对象是一组无序的相关属性和方法的集合，所有的事物都是对象，例如字符串、数值、数组、函数</p><p>对象由属性和方法组成</p><ul><li>属性：事物的特征</li><li>方法：事物的行为</li></ul></blockquote><pre class="language-js" data-language="js"><code class="language-js">键值对形式创建多个属性和方法之间用逗号隔开<span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">xxx</span><span class="token operator">:</span>xxx<span class="token punctuation">;</span>    <span class="token literal-property property">xxf</span><span class="token operator">:</span> <span class="token function">functon</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        xxx<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>利用<span class="token keyword">new</span> <span class="token class-name">object</span> 创建对象每个属性和方法用 <span class="token punctuation">;</span> 隔开<span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span>obj<span class="token punctuation">.</span>xxx<span class="token operator">=</span>xx<span class="token punctuation">;</span>obj<span class="token punctuation">.</span><span class="token function-variable function">xxf</span><span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>       <span class="token punctuation">&#125;</span>利用 <span class="token operator">=</span> 赋值 添加对象的属性和函数</code></pre><blockquote><p>调用对象的属性和方法</p></blockquote><pre class="language-js" data-language="js"><code class="language-js">对象名<span class="token punctuation">.</span>属性名 <span class="token operator">||</span> <span class="token punctuation">[</span><span class="token string">'属性名'</span><span class="token punctuation">]</span>obj<span class="token punctuation">.</span>xxx <span class="token punctuation">;</span>  obj<span class="token punctuation">[</span><span class="token string">'xxx'</span><span class="token punctuation">]</span> <span class="token punctuation">;</span>对象名<span class="token punctuation">.</span><span class="token function">xxf</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">;</span></code></pre><blockquote><p>利用构造函数创建对象</p></blockquote><blockquote><p>构造函数就是把对象里面一些相同的属性和方法抽象出来封装到函数里</p></blockquote><pre class="language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">构造函数名</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>属性 <span class="token operator">=</span> 值<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function-variable function">方法</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>可以内置形参<span class="token keyword">var</span> xxx <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">构造函数名</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>调用函数返回的是一个对象</code></pre><ul><li>构造函数名字首字母要大写</li><li>我们构造函数不需要return 就可以返回结果</li><li>我们调用构造函数 必须使用 new</li><li>我们只要new 构造函数名() 调用函数就创建一个对象 xxx  {}</li><li>我们的属性和方法前面必须添加 this</li></ul>]]></content>
      
      
      <categories>
          
          <category> Out_Learn </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Javascript 基础学习第2天</title>
      <link href="/2022/05/02/Web_Learn/Javascript_Base_Learn/Javascript_Base02/"/>
      <url>/2022/05/02/Web_Learn/Javascript_Base_Learn/Javascript_Base02/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><center>怎么和Java，C 一模一样捏，屮，真没劲</center></blockquote><span id="more"></span><h4 id="拓展"><a href="#拓展" class="headerlink" title="拓展"></a>拓展</h4><h5 id="解释性语言"><a href="#解释性语言" class="headerlink" title="解释性语言"></a>解释性语言</h5><blockquote><p>利用解释器解释，运行时进行及时解释，并立即执行（当编译器以解释方式运行时，也称之为解释器）</p></blockquote><h5 id="编译性语言"><a href="#编译性语言" class="headerlink" title="编译性语言"></a>编译性语言</h5><blockquote><p>代码执行前进行编译，生成中间代码文件</p></blockquote><h4 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h4><h5 id="算术运算符"><a href="#算术运算符" class="headerlink" title="算术运算符"></a>算术运算符</h5><pre class="language-js" data-language="js"><code class="language-js"><span class="token number">1.</span> <span class="token operator">%</span> 取余 （取模）  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">4</span> <span class="token operator">%</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 0</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">5</span> <span class="token operator">%</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 2</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">3</span> <span class="token operator">%</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 3</span><span class="token number">2.</span> 浮点数 算数运算里面会有问题console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">0.1</span> <span class="token operator">+</span> <span class="token number">0.2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 0.30000000000000004</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">0.07</span> <span class="token operator">*</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 7.000000000000001</span><span class="token number">3.</span> 我们不能直接拿着浮点数来进行相比较 是否相等<span class="token keyword">var</span> num <span class="token operator">=</span> <span class="token number">0.1</span> <span class="token operator">+</span> <span class="token number">0.2</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num <span class="token operator">==</span> <span class="token number">0.3</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span></code></pre><h5 id="自增自减"><a href="#自增自减" class="headerlink" title="自增自减"></a>自增自减</h5><blockquote><p><code>++ ; --</code> </p></blockquote><h5 id="比较运算符"><a href="#比较运算符" class="headerlink" title="比较运算符"></a>比较运算符</h5><pre class="language-js" data-language="js"><code class="language-js">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">3</span> <span class="token operator">>=</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">&lt;=</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span><span class="token number">1.</span> 我们程序里面的等于符号 是 <span class="token operator">==</span>  默认转换数据类型 会把字符串型的数据转换为数字型 只要求值相等就可以console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">3</span> <span class="token operator">==</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'晗涩LV'</span> <span class="token operator">==</span> <span class="token string">'handsomelv'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// flase</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">18</span> <span class="token operator">==</span> <span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">18</span> <span class="token operator">==</span> <span class="token string">'18'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">18</span> <span class="token operator">!=</span> <span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span><span class="token number">2.</span> 我们程序里面有全等 一模一样  要求 两侧的值 还有 数据类型完全一致才可以 <span class="token boolean">true</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">18</span> <span class="token operator">===</span> <span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">18</span> <span class="token operator">===</span> <span class="token string">'18'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span></code></pre><h5 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h5><blockquote><p>短路运算（逻辑中断）</p><p><strong>个人理解：</strong> </p><ul><li>&amp;&amp;与操作，需要两者同 <strong>真</strong> ，则第一条件为真，需要查询第二条件是否为真，所以返回第二条件，第一条件假则必为假，只需返回第一条件</li><li>||或操作，需要两者至少一项为真，第一项为真，就无需继续判断第二项，返回第一项，第一项为假，则需要判断第二项是否为真，所以返回第二项</li></ul></blockquote><pre class="language-js" data-language="js"><code class="language-js"><span class="token number">1.</span> 用我们的布尔值参与的逻辑运算  <span class="token boolean">true</span> <span class="token operator">&amp;&amp;</span> <span class="token boolean">false</span>  <span class="token operator">==</span> <span class="token boolean">false</span> <span class="token number">2.</span> <span class="token number">123</span> <span class="token operator">&amp;&amp;</span> <span class="token number">456</span>  是值 或者是 表达式 参与逻辑运算？ <span class="token number">3.</span> 逻辑与短路运算  如果表达式<span class="token number">1</span> 结果为真 则返回表达式<span class="token number">2</span>  如果表达式<span class="token number">1</span>为假 那么返回表达式<span class="token number">1</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">123</span> <span class="token operator">&amp;&amp;</span> <span class="token number">456</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 456</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">0</span> <span class="token operator">&amp;&amp;</span> <span class="token number">456</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//  0</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">0</span> <span class="token operator">&amp;&amp;</span> <span class="token number">1</span> <span class="token operator">+</span> <span class="token number">2</span> <span class="token operator">&amp;&amp;</span> <span class="token number">456</span> <span class="token operator">*</span> <span class="token number">56789</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 0</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">''</span> <span class="token operator">&amp;&amp;</span> <span class="token number">1</span> <span class="token operator">+</span> <span class="token number">2</span> <span class="token operator">&amp;&amp;</span> <span class="token number">456</span> <span class="token operator">*</span> <span class="token number">56789</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ''</span><span class="token comment">// 如果有空的或者否定的为假 其余是真的  0  ''  null undefined  NaN</span><span class="token number">4.</span> 逻辑或短路运算  如果表达式<span class="token number">1</span> 结果为真 则返回的是表达式<span class="token number">1</span> 如果表达式<span class="token number">1</span> 结果为假 则返回表达式<span class="token number">2</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">123</span> <span class="token operator">||</span> <span class="token number">456</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 123</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">123</span> <span class="token operator">||</span> <span class="token number">456</span> <span class="token operator">||</span> <span class="token number">456</span> <span class="token operator">+</span> <span class="token number">123</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 123</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">0</span> <span class="token operator">||</span> <span class="token number">456</span> <span class="token operator">||</span> <span class="token number">456</span> <span class="token operator">+</span> <span class="token number">123</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 456</span><span class="token comment">// 逻辑中断很重要 它会影响我们程序运行结果思密达</span><span class="token keyword">var</span> num <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">123</span> <span class="token operator">||</span> num<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 0</span></code></pre><h4 id="流程控制"><a href="#流程控制" class="headerlink" title="流程控制"></a>流程控制</h4><h5 id="分支结构"><a href="#分支结构" class="headerlink" title="分支结构"></a>分支结构</h5><h6 id="if语句"><a href="#if语句" class="headerlink" title="if语句"></a>if语句</h6><pre class="language-js" data-language="js"><code class="language-js"><span class="token number">1.</span> 语法结构  <span class="token keyword">if</span> 如果  <span class="token keyword">else</span> 否则<span class="token keyword">if</span> <span class="token punctuation">(</span>条件表达式<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 执行语句1</span><span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 执行语句2 </span><span class="token punctuation">&#125;</span><span class="token number">2.</span> 执行思路 如果表达式结果为真 那么执行语句<span class="token number">1</span>  否则  执行语句<span class="token number">2</span><span class="token number">3.</span> 代码验证<span class="token keyword">var</span> age <span class="token operator">=</span> <span class="token function">prompt</span><span class="token punctuation">(</span><span class="token string">'请输入您的年龄:'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>age <span class="token operator">>=</span> <span class="token number">18</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'我想带你去网吧偷耳机'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'滚， 回家做作业去'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token number">5.</span> <span class="token keyword">if</span>里面的语句<span class="token number">1</span> 和 <span class="token keyword">else</span> 里面的语句<span class="token number">2</span> 最终只能有一个语句执行  <span class="token number">2</span>选<span class="token number">1</span><span class="token number">6.</span>  <span class="token keyword">else</span> 后面直接跟大括号</code></pre><h6 id="三元表达式"><a href="#三元表达式" class="headerlink" title="三元表达式"></a>三元表达式</h6><pre class="language-js" data-language="js"><code class="language-js">条件表达式  <span class="token operator">?</span> 表达式<span class="token number">1</span> <span class="token operator">:</span> 表达式二 <span class="token punctuation">;</span>真一假二</code></pre><h6 id="switch"><a href="#switch" class="headerlink" title="switch"></a>switch</h6><pre class="language-js" data-language="js"><code class="language-js"><span class="token keyword">switch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">case</span>  <span class="token operator">:</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">default</span><span class="token operator">:</span>        <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h5 id="循环结构"><a href="#循环结构" class="headerlink" title="循环结构"></a>循环结构</h5><blockquote><p>详情参考 C 和 Java（真没劲）</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Out_Learn </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Javascript 基础学习第1天</title>
      <link href="/2022/05/01/Web_Learn/Javascript_Base_Learn/Javascript_Base01/"/>
      <url>/2022/05/01/Web_Learn/Javascript_Base_Learn/Javascript_Base01/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><center>因为疫情原因，第一个不放假的五一，学习也渐渐没了兴趣</center></blockquote><span id="more"></span><h4 id="初识JavaScript"><a href="#初识JavaScript" class="headerlink" title="初识JavaScript"></a>初识JavaScript</h4><p>运行在客户端的脚本语言</p><h5 id="浏览器执行js简介"><a href="#浏览器执行js简介" class="headerlink" title="浏览器执行js简介"></a>浏览器执行js简介</h5><ul><li>渲染引擎：解析html和css，俗称内核</li><li>js引擎：js解释器，读取网页中的javascript代码，逐行解释</li></ul><h5 id="JS组成"><a href="#JS组成" class="headerlink" title="JS组成"></a>JS组成</h5><ul><li>ECMAScript：JavaScript语法</li><li>DOM：页面文档对象模型</li><li>BOM：浏览器对象模型</li></ul><h5 id="JS初体验"><a href="#JS初体验" class="headerlink" title="JS初体验"></a>JS初体验</h5><p>JavaScript三种书写方式</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> <span class="token number">1.</span> 行内式的js 直接写到元素的内部 <span class="token operator">--</span><span class="token operator">></span>    <span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"button"</span> value<span class="token operator">=</span><span class="token string">"JavaScript"</span> onclick<span class="token operator">=</span><span class="token string">"alert('行内式')"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> <span class="token number">2.</span>内嵌式的js <span class="token operator">--</span><span class="token operator">></span>    <span class="token operator">&lt;</span>script<span class="token operator">></span>        <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'内嵌式'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> <span class="token number">3.</span> 外部js script 双标签 <span class="token operator">--</span><span class="token operator">></span>    <span class="token operator">&lt;</span>script src<span class="token operator">=</span><span class="token string">"外部.js"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre><h5 id="输入输出"><a href="#输入输出" class="headerlink" title="输入输出"></a>输入输出</h5><table><thead><tr><th>方法</th><th>说明</th><th>归属</th></tr></thead><tbody><tr><td><code>alert(msg)</code></td><td>浏览器弹出警示框</td><td>浏览器</td></tr><tr><td><code>console.log(msg)</code></td><td>浏览器控制台打印输出信息</td><td>浏览器</td></tr><tr><td><code>prompt(info)</code></td><td>浏览器弹出输入框，用户可以输入</td><td>浏览器</td></tr></tbody></table><h4 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h4><blockquote><p>存放数据的容器，通过变量名获取数据，可以修改</p><p>程序在内存中申请的一块用来存放数据的空间</p></blockquote><h5 id="变量使用"><a href="#变量使用" class="headerlink" title="变量使用"></a>变量使用</h5><h6 id="声明变量"><a href="#声明变量" class="headerlink" title="声明变量"></a>声明变量</h6><blockquote><p><code>var 变量名 ;</code></p><ul><li><code>var</code> 是一个JS关键字，用来声明变量（variable，变量），自动分配内存空间</li></ul></blockquote><h6 id="赋值"><a href="#赋值" class="headerlink" title="赋值"></a>赋值</h6><blockquote><p><code>变量名 = 0</code></p></blockquote><h4 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h4><blockquote><p>JavaScript是弱类型语言或者说是动态语言；</p><p>变量的数据类型由js引擎根据变量值的数据类型自动判断</p></blockquote><blockquote><ul><li>简单数据类型：<code>Number , String , Boolean , Undefined , Null</code> </li><li>复杂数据类型：<code>Object</code> </li></ul></blockquote><h6 id="数字类型"><a href="#数字类型" class="headerlink" title="数字类型"></a>数字类型</h6><pre class="language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> num <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span> <span class="token comment">// num 数字型 </span><span class="token keyword">var</span> <span class="token constant">PI</span> <span class="token operator">=</span> <span class="token number">3.14</span> <span class="token comment">// PI 数字型</span>    <span class="token comment">// 1. 八进制  0 ~ 7  我们程序里面数字前面加0 表示八进制</span><span class="token keyword">var</span> num1 <span class="token operator">=</span> <span class="token number">010</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//  010  八进制 转换为 10进制 就是  8 </span><span class="token keyword">var</span> num2 <span class="token operator">=</span> <span class="token number">012</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 2. 十六进制  0 ~ 9  a ~ f    #ffffff  数字的前面加 0x 表示十六进制</span><span class="token keyword">var</span> num3 <span class="token operator">=</span> <span class="token number">0x9</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num3<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> num4 <span class="token operator">=</span> <span class="token number">0xa</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num4<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 3. 数字型的最大值</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Number<span class="token punctuation">.</span><span class="token constant">MAX_VALUE</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 4. 数字型的最小值</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Number<span class="token punctuation">.</span><span class="token constant">MIN_VALUE</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 5. 无穷大</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Number<span class="token punctuation">.</span><span class="token constant">MAX_VALUE</span> <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Infinity 无穷大  </span><span class="token comment">// 6. 无穷小</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token operator">-</span>Number<span class="token punctuation">.</span><span class="token constant">MAX_VALUE</span> <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// -Infinity 无穷大</span><span class="token comment">// 7. 非数字</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'JavaScript'</span> <span class="token operator">-</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// NaN</span></code></pre><pre class="language-js" data-language="js"><code class="language-js"><span class="token comment">// isNaN() 这个方法用来判断非数字   并且返回一个值 如果是数字返回的是 false 如果不是数字返回的是true</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">isNaN</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">isNaN</span><span class="token punctuation">(</span><span class="token string">'JavaScript'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span></code></pre><h6 id="字符串型"><a href="#字符串型" class="headerlink" title="字符串型"></a>字符串型</h6><blockquote><ul><li>引号</li><li>字符串转义字符  都是用 \ 开头 但是这些转义字符嵌套在引号里面</li></ul></blockquote><pre class="language-js" data-language="js"><code class="language-js"><span class="token comment">// 1. 检测获取字符串的长度 length </span><span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">'my name is andy'</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 15</span><span class="token comment">// 2. 字符串的拼接 +  只要有字符串和其他类型相拼接 最终的结果是字符串类型</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'沙漠'</span> <span class="token operator">+</span> <span class="token string">'骆驼'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 字符串的 沙漠骆驼</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'晗涩LV'</span> <span class="token operator">+</span> <span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// '晗涩LV18'</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'handsomelv'</span> <span class="token operator">+</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// handsomelvtrue</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">12</span> <span class="token operator">+</span> <span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 24</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'12'</span> <span class="token operator">+</span> <span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// '1212'</span></code></pre><h6 id="布尔型"><a href="#布尔型" class="headerlink" title="布尔型"></a>布尔型</h6><blockquote><p><code>Boolean(NaN)</code> 布尔类型转换</p></blockquote><blockquote><ul><li>true 参与加法运算当1来看</li><li>false 参与加法运算当 0来看</li><li>如果一个变量声明未赋值 就是 undefined 未定义数据类型</li><li>字符串+ 任意类型  等于 字符串</li><li>undefined 和数字相加 最后的结果是 NaN</li></ul></blockquote><blockquote><p><code>typeof</code> 返回数据类型</p><ul><li>prompt 取过来的值是 字符型的</li></ul></blockquote><h5 id="数据类型转换"><a href="#数据类型转换" class="headerlink" title="数据类型转换"></a>数据类型转换</h5><h6 id="转换为字符串"><a href="#转换为字符串" class="headerlink" title="转换为字符串"></a>转换为字符串</h6><pre class="language-js" data-language="js"><code class="language-js"><span class="token comment">// 1. 把数字型转换为字符串型 变量.toString()</span><span class="token keyword">var</span> num <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">var</span> str <span class="token operator">=</span> num<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> str<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 2. 我们利用 String(变量)   </span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">String</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 3. 利用 + 拼接字符串的方法实现转换效果 隐式转换</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num <span class="token operator">+</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><pre class="language-js" data-language="js"><code class="language-js"><span class="token comment">// 1. parseInt(变量)  可以把 字符型的转换为数字型 得到是整数</span><span class="token comment">// console.log(parseInt(age));</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token string">'3.14'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 3 取整</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token string">'3.94'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 3 取整</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token string">'120px'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 120 会去到这个px单位</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token string">'rem120px'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// NaN</span><span class="token comment">// 2. parseFloat(变量) 可以把 字符型的转换为数字型 得到是小数 浮点数</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">parseFloat</span><span class="token punctuation">(</span><span class="token string">'3.14'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 3.14</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">parseFloat</span><span class="token punctuation">(</span><span class="token string">'120px'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 120 会去掉这个px单位</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">parseFloat</span><span class="token punctuation">(</span><span class="token string">'rem120px'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// NaN</span><span class="token comment">// 3. 利用 Number(变量) </span><span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">'123'</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Number</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Number</span><span class="token punctuation">(</span><span class="token string">'12'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 4. 利用了算数运算 -  *  /  隐式转换</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'12'</span> <span class="token operator">-</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 12</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'123'</span> <span class="token operator">-</span> <span class="token string">'120'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'123'</span> <span class="token operator">*</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Out_Learn </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS 学习第7天</title>
      <link href="/2022/04/30/Web_Learn/CSS_Learn/CSS07/"/>
      <url>/2022/04/30/Web_Learn/CSS_Learn/CSS07/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><center>CSS暂且就先学到3D吧，要开始学习JS了</center></blockquote><span id="more"></span><h4 id="CSS新特性"><a href="#CSS新特性" class="headerlink" title="CSS新特性"></a>CSS新特性</h4><h5 id="CSS盒子模型"><a href="#CSS盒子模型" class="headerlink" title="CSS盒子模型"></a>CSS盒子模型</h5><blockquote><p>CSS3中可以通过<code>box-sizing</code> 来指定盒子模型;</p><ol><li><code>box-sizing:content-box</code> 盒子大小为<code>width+padding+border</code> （以前默认）</li><li><code>box-sizing:border-box</code> 盒子大小为<code>width</code> （不会撑大盒子）</li></ol></blockquote><h5 id="其他特性（了解）"><a href="#其他特性（了解）" class="headerlink" title="其他特性（了解）"></a>其他特性（了解）</h5><h6 id="CSS3滤镜filter"><a href="#CSS3滤镜filter" class="headerlink" title="CSS3滤镜filter"></a>CSS3滤镜<code>filter</code></h6><blockquote><p><code>filter: 函数() ;</code> 例如：<code>filter:blur(5px); blur</code> 模糊处理，数值越大越模糊</p></blockquote><h6 id="CSScalc-函数"><a href="#CSScalc-函数" class="headerlink" title="CSScalc 函数"></a>CSS<code>calc</code> 函数</h6><blockquote><p><code>calc()</code> 此CSS函数在声明CSS属性值时执行一些计算</p><p><code>width :calc (100% - 80px);</code> </p></blockquote><h5 id="CSS过渡"><a href="#CSS过渡" class="headerlink" title="CSS过渡"></a>CSS过渡</h5><blockquote><p>过渡（transition）,CSS过渡动画</p><p><code>transition : 要过渡的属性 花费时间 运动曲线 何时开始；</code></p><p>多个属性，利用逗号进行分割</p><ol><li>属性：想要变化的css属性，宽度高度 背景颜色 内外边距都可以。所有属性过渡all；</li><li>花费时间：单位是秒（必须写单位）</li><li>运动曲线：默认是ease（可以省略）</li><li>何时开始：单位是秒（必须写单位） 可以设置延迟触发时间 默认是0s（可以省略）</li></ol></blockquote><h4 id="CSS3-2D转换"><a href="#CSS3-2D转换" class="headerlink" title="CSS3 2D转换"></a>CSS3 2D转换</h4><blockquote><p>转换（tranform） 是CCS3中具有颠覆性的特征之一，可以实现元素的位移、旋转、缩放</p><ul><li>移动：transale</li><li>旋转：rolate</li><li>缩放：scale</li></ul></blockquote><h5 id="移动"><a href="#移动" class="headerlink" title="移动"></a>移动</h5><blockquote><p><code>transform : translate(x,y);</code> 或者分开写</p><p><code>transform : translateX(n);</code> </p><ul><li>不会影响其他元素的位置</li><li>对行内标签没有效果</li></ul></blockquote><h5 id="旋转"><a href="#旋转" class="headerlink" title="旋转"></a>旋转</h5><blockquote><p><code>transform : rotate（度数）</code></p><ul><li>rotate里面是度数，单位是<code>deg</code> </li><li>角度为正时顺时针，负逆时针</li><li>旋转的中心点是元素的中心点</li></ul></blockquote><blockquote><p>设置旋转点</p><pre class="language-css" data-language="css"><code class="language-css">1.可以跟方位名词<span class="token property">transform-origin</span><span class="token punctuation">:</span> left bottom<span class="token punctuation">;</span> 2. 默认的是 50%  50%  等价于 center  center3. 可以是px 像素 <span class="token property">transform-origin</span><span class="token punctuation">:</span> 50px 50px<span class="token punctuation">;</span> </code></pre></blockquote><h5 id="缩放"><a href="#缩放" class="headerlink" title="缩放"></a>缩放</h5><blockquote><p><code>transform: scale(x,y);</code></p><ul><li>x，y逗号分隔</li><li>只写一个参数，直接就是倍数</li><li>scale缩放优势：可以设置转换中心点缩放，默认中心点，而且不影响其他盒子</li></ul></blockquote><h5 id="2D综合变换"><a href="#2D综合变换" class="headerlink" title="2D综合变换"></a>2D综合变换</h5><pre class="language-css" data-language="css"><code class="language-css">我们同时有位移和其他属性，我们需要把位移放到最前面<span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translate</span><span class="token punctuation">(</span>150px<span class="token punctuation">,</span> 50px<span class="token punctuation">)</span> <span class="token function">rotate</span><span class="token punctuation">(</span>180deg<span class="token punctuation">)</span> <span class="token function">scale</span><span class="token punctuation">(</span>1.2<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="CSS动画"><a href="#CSS动画" class="headerlink" title="CSS动画"></a>CSS动画</h4><blockquote><p> <strong>动画(animation)</strong> 是CSS中具有颠覆性的特征之一，可通过设置多个节点来精准控制一个或一组动画，常用于实现复杂的动画效果</p><p>相比于过渡，动画可以实现更多变化，更多控制，连续自动播放等</p></blockquote><h5 id="动画的基本使用"><a href="#动画的基本使用" class="headerlink" title="动画的基本使用"></a>动画的基本使用</h5><h6 id="keyframes"><a href="#keyframes" class="headerlink" title="keyframes"></a>keyframes</h6><p><strong>定义动画</strong></p><pre class="language-css" data-language="css"><code class="language-css"><span class="token atrule"><span class="token rule">@keyframes</span> move</span> <span class="token punctuation">&#123;</span>          <span class="token comment">/* 开始状态 */</span>          <span class="token selector">0%</span> <span class="token punctuation">&#123;</span>              <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translateX</span><span class="token punctuation">(</span>0px<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">&#125;</span>          <span class="token comment">/* 结束状态 */</span>          <span class="token selector">100%</span> <span class="token punctuation">&#123;</span>              <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translateX</span><span class="token punctuation">(</span>1000px<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span></code></pre><p><strong>调用动画</strong></p><pre class="language-css" data-language="css"><code class="language-css"><span class="token comment">/* 2. 调用动画 */</span><span class="token comment">/* 动画名称 */</span><span class="token property">animation-name</span><span class="token punctuation">:</span> move<span class="token punctuation">;</span><span class="token comment">/* 持续时间 */</span><span class="token property">animation-duration</span><span class="token punctuation">:</span> 2s<span class="token punctuation">;</span></code></pre><h6 id="动画属性"><a href="#动画属性" class="headerlink" title="动画属性"></a>动画属性</h6><pre class="language-css" data-language="css"><code class="language-css"><span class="token selector">div</span> <span class="token punctuation">&#123;</span>    <span class="token property">width</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>    <span class="token property">background-color</span><span class="token punctuation">:</span> pink<span class="token punctuation">;</span>    <span class="token comment">/* 动画名称 */</span>    <span class="token property">animation-name</span><span class="token punctuation">:</span> move<span class="token punctuation">;</span>        <span class="token comment">/* 持续时间 */</span>    <span class="token property">animation-duration</span><span class="token punctuation">:</span> 2s<span class="token punctuation">;</span>        <span class="token comment">/* 运动曲线 */</span>    <span class="token property">animation-timing-function</span><span class="token punctuation">:</span> ease<span class="token punctuation">;</span>        <span class="token comment">/* 何时开始 */</span>    <span class="token property">animation-delay</span><span class="token punctuation">:</span> 1s<span class="token punctuation">;</span>        <span class="token comment">/* 重复次数  iteration 重复的 conut 次数  infinite  无限 */</span>    <span class="token property">animation-iteration-count</span><span class="token punctuation">:</span> infinite<span class="token punctuation">;</span>        <span class="token comment">/* 是否反方向播放 默认的是 normal  如果想要反方向 就写 alternate */</span>    <span class="token property">animation-direction</span><span class="token punctuation">:</span> alternate<span class="token punctuation">;</span>        <span class="token comment">/* 动画结束后的状态 默认的是 backwards  回到起始状态 我们可以让他停留在结束状态 forwards */</span>    <span class="token property">animation-fill-mode</span><span class="token punctuation">:</span> forwards<span class="token punctuation">;</span>         <span class="token comment">/* animation: name duration timing-function delay iteration-count direction fill-mode; */</span>    <span class="token property">animation</span><span class="token punctuation">:</span> move 2s linear 0s 1 alternate forwards<span class="token punctuation">;</span>        <span class="token comment">/* 前面2个属性 name  duration 一定要写 */</span>    <span class="token property">animation</span><span class="token punctuation">:</span> move 2s linear  alternate forwards<span class="token punctuation">;</span>        <span class="token comment">/*动画暂停*/</span>    <span class="token property">animation-play-state</span><span class="token punctuation">:</span> paused<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h6 id="速度曲线细节"><a href="#速度曲线细节" class="headerlink" title="速度曲线细节"></a>速度曲线细节</h6><blockquote><p><code>animation-timing-function:</code> 规定动画的速度曲线，，默认是“ease”</p></blockquote><table><thead><tr><th>值</th><th>描述</th></tr></thead><tbody><tr><td>linear</td><td>动画线性匀速</td></tr><tr><td>ease</td><td>默认，低速开始，加快，结束前减速</td></tr><tr><td>ease-in</td><td>动画以低速开始</td></tr><tr><td>ease-out</td><td>动画以低速结束</td></tr><tr><td>ease-in-out</td><td>低速开始和结束</td></tr><tr><td>steps()</td><td>指定了时间函数中的间隔数量（步长）</td></tr></tbody></table><h4 id="3D转换"><a href="#3D转换" class="headerlink" title="3D转换"></a>3D转换</h4><h5 id="3D移动"><a href="#3D移动" class="headerlink" title="3D移动"></a>3D移动</h5><pre class="language-css" data-language="css"><code class="language-css"><span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translateX</span><span class="token punctuation">(</span>100px<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translateY</span><span class="token punctuation">(</span>100px<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translateX</span><span class="token punctuation">(</span>100px<span class="token punctuation">)</span> <span class="token function">translateY</span><span class="token punctuation">(</span>100px<span class="token punctuation">)</span> <span class="token function">translateZ</span><span class="token punctuation">(</span>100px<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/* 1. translateZ 沿着Z轴移动 */</span><span class="token comment">/* 2. translateZ 后面的单位我们一般跟px */</span><span class="token comment">/* 3. translateZ(100px) 向外移动100px （向我们的眼睛来移动的） */</span><span class="token comment">/* 4. 3D移动有简写的方法 */</span><span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translate3d</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">,</span>z<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/* transform: translate3d(100px, 100px, 100px); */</span><span class="token comment">/* 5. xyz是不能省略的，如果没有就写0 */</span></code></pre><blockquote><p>透视 <code>perspective</code> </p><p>在2D平面产生近大远小视觉立体，二维效果</p><p>透视也就是视距，眼睛到屏幕的距离</p><p>透视写在被观察的元素的父盒子上面</p></blockquote><h5 id="3D旋转"><a href="#3D旋转" class="headerlink" title="3D旋转"></a>3D旋转</h5><pre class="language-css" data-language="css"><code class="language-css"><span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">rotateZ</span><span class="token punctuation">(</span>180deg<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">rotate3d</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">,</span>z<span class="token punctuation">,</span>deg<span class="token punctuation">)</span><span class="token punctuation">;</span>  x<span class="token punctuation">,</span>y<span class="token punctuation">,</span>z使用01选中，deg代表旋转角度</code></pre><h5 id="3D呈现"><a href="#3D呈现" class="headerlink" title="3D呈现"></a>3D呈现</h5><blockquote><p><code>transform-style : flat | preserve-3d</code></p><ul><li>控制子元素是否开启三维立体环境</li><li><code>flat</code> ：默认子元素不开启3D；<code>preserve-3d</code> ：子元素开启立体空间</li><li>代码给父级，影响子盒子</li></ul></blockquote>]]></content>
      
      
      <categories>
          
          <category> Out_Learn </category>
          
      </categories>
      
      
        <tags>
            
            <tag> H5-Css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS 学习第6天</title>
      <link href="/2022/04/28/Web_Learn/CSS_Learn/CSS06/"/>
      <url>/2022/04/28/Web_Learn/CSS_Learn/CSS06/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="HTML5新增"><a href="#HTML5新增" class="headerlink" title="HTML5新增"></a>HTML5新增</h4><h5 id="语义化标签"><a href="#语义化标签" class="headerlink" title="语义化标签"></a>语义化标签</h5><blockquote><ul><li><code>&lt;header&gt;</code> ：头部标签</li><li><code>&lt;nav&gt;</code> ：导航标签</li><li><code>&lt;article&gt;</code> ：内容标签</li><li><code>&lt;section&gt;</code> ：定义文档某个区域</li><li><code>&lt;aside&gt;</code> ：侧边栏标签</li><li><code>&lt;footer&gt;</code> ：尾部标签</li></ul></blockquote><h6 id="多媒体标签"><a href="#多媒体标签" class="headerlink" title="多媒体标签"></a>多媒体标签</h6><blockquote><ol><li>音频：<code>&lt;audio&gt;</code></li><li>视频：<code>&lt;video&gt;</code>；尽量使用mp4</li></ol></blockquote><p><strong>视频</strong></p><pre class="language-css" data-language="css"><code class="language-css">&lt;video src =<span class="token string">"文件地址"</span> controls =<span class="token string">"controls"</span>> &lt;/video></code></pre><pre class="language-css" data-language="css"><code class="language-css">&lt;video controls =<span class="token string">"controls"</span> width=<span class="token string">" "</span> height=<span class="token string">" "</span>>&lt;source src=<span class="token string">"move.ogg"</span> type=<span class="token string">"video/ogg"</span>>&lt;source src=<span class="token string">"move.mp4"</span> type=<span class="token string">"video/mp4"</span>>您的浏览器暂不支持&lt;video>标签播放视频&lt;/video></code></pre><table><thead><tr><th align="left">属性</th><th>值</th><th>描述</th></tr></thead><tbody><tr><td align="left"><code>autoplay</code></td><td>autoplay</td><td>视频就绪自动播放</td></tr><tr><td align="left"><code>control</code></td><td>control</td><td>向用户显示播放控件</td></tr><tr><td align="left"><code>width</code></td><td>pixel像素</td><td>设置播放器宽度</td></tr><tr><td align="left"><code>height</code></td><td>pixel像素</td><td>设置播放器高度</td></tr><tr><td align="left"><code>loop</code></td><td>loop</td><td>播放完是否继续播放该视频，循环播放</td></tr><tr><td align="left"><code>preload</code></td><td>auto；none</td><td>规定是否预加载视频，autoplay则忽略</td></tr><tr><td align="left"><code>src</code></td><td>url</td><td>视频地址</td></tr><tr><td align="left"><code>poster</code></td><td>imgurl</td><td>加载等待的画面照片</td></tr><tr><td align="left"><code>muted</code></td><td>muted</td><td>静音播放</td></tr></tbody></table><p><strong>音频</strong></p><pre class="language-css" data-language="css"><code class="language-css">&lt;audio src =<span class="token string">"文件地址"</span> controls =<span class="token string">"controls"</span>> &lt;/audio></code></pre><pre class="language-css" data-language="css"><code class="language-css">&lt;audio controls =<span class="token string">"controls"</span> >&lt;source src=<span class="token string">"move.ogg"</span> type=<span class="token string">"audio/ogg"</span>>&lt;source src=<span class="token string">"move.mp3"</span> type=<span class="token string">"audio/mp3"</span>>您的浏览器暂不支持&lt;audio>标签&lt;/audio></code></pre><table><thead><tr><th>属性</th><th>值</th><th align="left">描述</th></tr></thead><tbody><tr><td><code>autoplay</code></td><td>autoplay</td><td align="left">音频在就绪后马上播放</td></tr><tr><td><code>control</code></td><td>control</td><td align="left">向用户显示控件，比如播放按钮</td></tr><tr><td><code>loop</code></td><td>loop</td><td align="left">循环播放</td></tr><tr><td><code>src</code></td><td>url</td><td align="left">音频的地址</td></tr></tbody></table><h6 id="input类型"><a href="#input类型" class="headerlink" title="input类型"></a>input类型</h6><blockquote><p><code>type = &quot;email | url | date | time |month | week</code></p><p>​                <code>number | tel | search | color&quot;</code></p></blockquote><h6 id="表单属性"><a href="#表单属性" class="headerlink" title="表单属性"></a>表单属性</h6><table><thead><tr><th>属性</th><th>值</th><th>说明</th></tr></thead><tbody><tr><td>required</td><td>required</td><td>表单拥有该属性表示其内容不能为空</td></tr><tr><td>placeholder</td><td>提示文本</td><td>表单的提示信息，存在默认值将不显示</td></tr><tr><td>autofocus</td><td>autofocus</td><td>自动聚焦属性，页面加载完成自动聚焦到指定表单</td></tr><tr><td>autocomplete</td><td>off/on</td><td>当用户在字段开始键入时，浏览器基于之前键入的值，应该显示出在字段中填写的选项。默认已经打开，需要放在表单内，同时加上name属性，同时成功提交</td></tr><tr><td>multiple</td><td>multiple</td><td>可以多选文件提交</td></tr></tbody></table><h4 id="CSS3新特性"><a href="#CSS3新特性" class="headerlink" title="CSS3新特性"></a>CSS3新特性</h4><h5 id="CSS新增选择器"><a href="#CSS新增选择器" class="headerlink" title="CSS新增选择器"></a>CSS新增选择器</h5><h6 id="属性选择器"><a href="#属性选择器" class="headerlink" title="属性选择器"></a>属性选择器</h6><blockquote><p>属性选择器可以根据元素特定属性来选择元素，不用借用类或者id选择器</p></blockquote><table><thead><tr><th>选择符</th><th align="left">简介</th></tr></thead><tbody><tr><td>E[att]</td><td align="left">选择具有att属性的E元素</td></tr><tr><td>E[att=”val”]</td><td align="left">选择具有att属性且属性值等于val的E元素</td></tr><tr><td>E[att^=”val”]</td><td align="left">匹配具有att属性且值以val开头的E元素</td></tr><tr><td>E[att$=”val”]</td><td align="left">匹配具有att属性且值以val结尾的E元素</td></tr><tr><td>E[att*=”val”]</td><td align="left">匹配具有att属性且值中含有val的E元素</td></tr></tbody></table><h6 id="结构伪类选择器"><a href="#结构伪类选择器" class="headerlink" title="结构伪类选择器"></a>结构伪类选择器</h6><blockquote><p>结构伪类选择器主要根据文档结构来选择元素，常用于选择父级选择器里的子元素</p></blockquote><table><thead><tr><th>选择符</th><th align="left">简介</th></tr></thead><tbody><tr><td>E:first-child</td><td align="left">匹配父元素中的第一个子元素E</td></tr><tr><td>E:last-child</td><td align="left">匹配父元素中最后一个子元素E</td></tr><tr><td>E:nth-child(n)</td><td align="left">匹配父元素中的第n个子元素E</td></tr><tr><td>E:first-of-ytpe</td><td align="left">指定类型E的第一个</td></tr><tr><td>E:last-of-type</td><td align="left">指定类型E的最后一个</td></tr><tr><td>E:nth-of-type(n)</td><td align="left">指定类型E的第n个</td></tr></tbody></table><p><strong>n</strong> 可以是数字或者公式；2n偶数even；2n+1奇数odd；n从零开始</p><blockquote><p>区别：</p><ol><li><code>nth-child</code> 对父元素里面所有孩子排序选择（序号是固定的）先找到第<code>n</code> 个孩子，然后看看是否匹配</li><li><code>nth-of-type</code> 对父元素里面指定子元素排序选择。先去匹配<code>E</code> ，然后再根据<code>E</code> 找第<code>n</code> 个孩子</li></ol></blockquote><h6 id="伪元素选择器"><a href="#伪元素选择器" class="headerlink" title="伪元素选择器"></a>伪元素选择器</h6><blockquote><p>伪元素选择器可以帮助我们利用CSS创建新元素标签，而不需要HTML标签</p></blockquote><table><thead><tr><th align="left">选择符</th><th>简介</th></tr></thead><tbody><tr><td align="left"><code>::before</code></td><td>在元素内部的前面插入内容</td></tr><tr><td align="left"><code>::after</code></td><td>在元素内部的后面插入内容</td></tr></tbody></table><blockquote><p>属于行内元素，新创建的元素在文档树中找不到，所以称伪元素。</p><p>语法：<code>element::before&#123;&#125;</code> ；必须有<code>content</code> 属性。</p><p><code>before</code> 在父元素内容的前面创建元素，<code>after</code> 在父元素内容的后面创建元素；权重为1；</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Out_Learn </category>
          
      </categories>
      
      
        <tags>
            
            <tag> H5-Css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS 学习第5天</title>
      <link href="/2022/04/27/Web_Learn/CSS_Learn/CSS05/"/>
      <url>/2022/04/27/Web_Learn/CSS_Learn/CSS05/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="元素的显示与隐藏"><a href="#元素的显示与隐藏" class="headerlink" title="元素的显示与隐藏"></a>元素的显示与隐藏</h4><blockquote><p>类似网站广告，可以关闭和显示</p><p><strong>本质：让一个元素在页面中隐藏或者显示出来</strong></p></blockquote><h5 id="display显示隐藏"><a href="#display显示隐藏" class="headerlink" title="*display显示隐藏"></a>*display显示隐藏</h5><blockquote><p><strong><code>display</code></strong> 属性用于设置一个元素应如何显示</p><ul><li><strong><code>none</code></strong> ：隐藏对象</li><li><strong><code>block</code></strong> ：除了转换为块级元素，同时还有显示元素的意思</li></ul><p><strong><code>display</code></strong> 隐藏元素后，<strong>不再占有</strong>原来的位置</p></blockquote><h5 id="visibility可见性"><a href="#visibility可见性" class="headerlink" title="visibility可见性"></a>visibility可见性</h5><blockquote><p><strong><code>visibility</code></strong> 属性用于指定一个元素应可见还是隐藏</p><ul><li><strong><code>visible</code></strong> ：元素可视</li><li><strong><code>hidden</code></strong> ：元素隐藏</li></ul><p><strong><code>visibility</code></strong> 隐藏元素后，继续<strong>占有</strong>原来的位置</p></blockquote><h5 id="overflow溢出显示与隐藏"><a href="#overflow溢出显示与隐藏" class="headerlink" title="overflow溢出显示与隐藏"></a>overflow溢出显示与隐藏</h5><blockquote><p><strong><code>overflow</code></strong> 属性指定了如果内容溢出一个元素的框时，会发生什么</p><ul><li><strong><code>visible</code></strong> ：默认元素可视</li><li><strong><code>hidden</code></strong> ：不显示超过对象尺寸的内容</li><li><strong><code>scroll</code></strong> ：溢出的部分显示滚动条</li><li><strong><code>auto</code></strong> ：此为<code>body</code>对象和<code>textarea</code>的默认值，在需要时剪切内容并添加滚动条</li></ul><p><strong>如果有定位的盒子，慎用<code>hidden</code>，因为它会隐藏多余部分</strong></p></blockquote><h4 id="CSS高级技巧"><a href="#CSS高级技巧" class="headerlink" title="CSS高级技巧"></a>CSS高级技巧</h4><h5 id="精灵图（sprites）"><a href="#精灵图（sprites）" class="headerlink" title="精灵图（sprites）"></a>精灵图（sprites）</h5><blockquote><p>为了有效地减少服务器接受和发送请求的次数，提高页面的加载速度</p><p>将网页中的一些小背景图像整合到一张大图中，服务器只需要一次请求</p><ul><li>移动背景图片位置，此时可以使用<code>background-position</code></li><li>移动的距离也就是这个目标图片的<code>x</code>和<code>y</code>坐标，注意是网页中的坐标</li></ul></blockquote><h5 id="字体图标（iconfont）"><a href="#字体图标（iconfont）" class="headerlink" title="字体图标（iconfont）"></a>字体图标（iconfont）</h5><blockquote><p>主要用于显示网页中通用、常用的一些小图标</p><p><strong>字体图标展示的是图标，本质属于字体</strong></p><ul><li>轻量级：一个图标字体要比一系列的图像要小，一旦字体加载了，图标就会马上渲染出来，减少了服务器请求</li><li>灵活性：本质其实是文字，可以随意改变颜色、产生阴影、透明效果、旋转</li></ul></blockquote><h6 id="字体图标的下载"><a href="#字体图标的下载" class="headerlink" title="字体图标的下载"></a>字体图标的下载</h6><blockquote><ul><li><a href="https://icomoon.io/"><strong>icomoon</strong></a>字库</li><li>阿里<a href="https://www.iconfont.cn/"><strong>iconfont</strong></a>字库（免费）</li></ul></blockquote><h6 id="字体文件引用"><a href="#字体文件引用" class="headerlink" title="字体文件引用"></a>字体文件引用</h6><pre class="language-css" data-language="css"><code class="language-css"><span class="token comment">/* 字体声明 */</span>        <span class="token atrule"><span class="token rule">@font-face</span></span> <span class="token punctuation">&#123;</span>            <span class="token property">font-family</span><span class="token punctuation">:</span> <span class="token string">'icomoon'</span><span class="token punctuation">;</span>            <span class="token property">src</span><span class="token punctuation">:</span> <span class="token url"><span class="token function">url</span><span class="token punctuation">(</span><span class="token string url">'fonts/icomoon.eot?p4ssmb'</span><span class="token punctuation">)</span></span><span class="token punctuation">;</span>            <span class="token property">src</span><span class="token punctuation">:</span> <span class="token url"><span class="token function">url</span><span class="token punctuation">(</span><span class="token string url">'fonts/icomoon.eot?p4ssmb#iefix'</span><span class="token punctuation">)</span></span> <span class="token function">format</span><span class="token punctuation">(</span><span class="token string">'embedded-opentype'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token url"><span class="token function">url</span><span class="token punctuation">(</span><span class="token string url">'fonts/icomoon.ttf?p4ssmb'</span><span class="token punctuation">)</span></span> <span class="token function">format</span><span class="token punctuation">(</span><span class="token string">'truetype'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token url"><span class="token function">url</span><span class="token punctuation">(</span><span class="token string url">'fonts/icomoon.woff?p4ssmb'</span><span class="token punctuation">)</span></span> <span class="token function">format</span><span class="token punctuation">(</span><span class="token string">'woff'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token url"><span class="token function">url</span><span class="token punctuation">(</span><span class="token string url">'fonts/icomoon.svg?p4ssmb#icomoon'</span><span class="token punctuation">)</span></span> <span class="token function">format</span><span class="token punctuation">(</span><span class="token string">'svg'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token property">font-weight</span><span class="token punctuation">:</span> normal<span class="token punctuation">;</span>            <span class="token property">font-style</span><span class="token punctuation">:</span> normal<span class="token punctuation">;</span>            <span class="token property">font-display</span><span class="token punctuation">:</span> block<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span></code></pre><h5 id="CSS三角"><a href="#CSS三角" class="headerlink" title="CSS三角"></a>CSS三角</h5><blockquote><ol><li>创建无宽高的盒子</li><li>设置盒子全边框，使正方形盒子边框透明：<code>border: 50px solid</code> <strong>transparent;</strong></li><li>选择某一方向边框可视化</li><li>CSS原生三角制作：<code>border-left-color: pink;</code></li></ol></blockquote><h5 id="CSS用户界面样式"><a href="#CSS用户界面样式" class="headerlink" title="CSS用户界面样式"></a>CSS用户界面样式</h5><h5 id="鼠标样式cursor"><a href="#鼠标样式cursor" class="headerlink" title="鼠标样式cursor"></a>鼠标样式<code>cursor</code></h5><pre class="language-css" data-language="css"><code class="language-css"><span class="token selector">li</span> <span class="token punctuation">&#123;</span>    <span class="token property">cursor</span> <span class="token punctuation">:</span>pointer<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><blockquote><p>设置或检索在对象上移动的鼠标指针采用何种系统预定义的光标形状</p><table><thead><tr><th>属性值</th><th>描述</th></tr></thead><tbody><tr><td><strong><code>default</code></strong></td><td>默认</td></tr><tr><td><strong><code>pointer</code></strong></td><td><strong>小手</strong></td></tr><tr><td><strong><code>move</code></strong></td><td><strong>移动</strong></td></tr><tr><td><strong><code>text</code></strong></td><td><strong>文本</strong></td></tr><tr><td><strong><code>not-allowed</code></strong></td><td><strong>禁止</strong></td></tr></tbody></table></blockquote><h5 id="轮廓线outline去除"><a href="#轮廓线outline去除" class="headerlink" title="轮廓线outline去除"></a>轮廓线<code>outline</code>去除</h5><blockquote><p><strong>轮廓线特指填写表单时文本框的蓝色边框</strong></p></blockquote><pre class="language-css" data-language="css"><code class="language-css"><span class="token selector">input</span> <span class="token punctuation">&#123;</span>    <span class="token property">outline</span> <span class="token punctuation">:</span> none<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h5 id="防止拖拽文本域resize"><a href="#防止拖拽文本域resize" class="headerlink" title="防止拖拽文本域resize"></a>防止拖拽文本域<code>resize</code></h5><blockquote><p>默认文本域可以进行拖动大小尺寸</p></blockquote><pre class="language-css" data-language="css"><code class="language-css"><span class="token selector">textarea</span> <span class="token punctuation">&#123;</span>    <span class="token property">resize</span> <span class="token punctuation">:</span> none<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h5 id="vertical-align属性应用"><a href="#vertical-align属性应用" class="headerlink" title="vertical-align属性应用"></a><code>vertical-align</code>属性应用</h5><blockquote><p><code>vertical-align</code> 经常用于设置图片或者表单（行内块元素）和文字垂直对齐</p><p><strong><code>vertical-align : baseline | top | middle | bottom</code></strong></p><ul><li><code>baseline</code>：基线，普通小写英文字母下线</li><li><code>top | bottom</code>：文字顶线和底线</li><li><code>middle</code>：文字中线</li></ul></blockquote><blockquote><p><em><strong>解决图片底部默认空白缝隙问题</strong></em></p><p><em>bug：图片底部会有一个空白缝隙，原因是行内块元素会和文字的基线对齐</em></p><ol><li>给图片添加 <code>vertical-align : top | middle | bottom</code></li><li>把图片转换为块级元素 <code>display : block;</code></li></ol></blockquote><h5 id="溢出的文字省略号显示"><a href="#溢出的文字省略号显示" class="headerlink" title="溢出的文字省略号显示"></a>溢出的文字省略号显示</h5><h6 id="单行"><a href="#单行" class="headerlink" title="单行"></a>单行</h6><blockquote><ol><li><strong>单行文本溢出显示省略号–必须满足三个条件</strong></li></ol><pre class="language-css" data-language="css"><code class="language-css"><span class="token comment">/*1. 先强制一行内显示文本*/</span><span class="token property">white-space</span> <span class="token punctuation">:</span> nowrap <span class="token punctuation">;</span> <span class="token punctuation">(</span>默认normal自动换行<span class="token punctuation">)</span><span class="token comment">/*2. 超出的部分隐藏*/</span><span class="token property">overflow</span> <span class="token punctuation">:</span> hidden<span class="token punctuation">;</span><span class="token comment">/*3. 文字用省略号替代超出的部分*/</span><span class="token property">text-overflow</span> <span class="token punctuation">:</span> ellipsis<span class="token punctuation">;</span></code></pre></blockquote><h6 id="多行"><a href="#多行" class="headerlink" title="多行"></a>多行</h6><blockquote><p>多行文本溢出显示省略号，有较大的兼容性，适合webkit浏览器或移动端</p><pre class="language-css" data-language="css"><code class="language-css"><span class="token property">overflow</span> <span class="token punctuation">:</span> hidden<span class="token punctuation">;</span><span class="token property">text-overflow</span> <span class="token punctuation">:</span> ellipsis<span class="token punctuation">;</span><span class="token comment">/*弹性盒子模型显示*/</span><span class="token property">display</span> <span class="token punctuation">:</span> -webkit-box<span class="token punctuation">;</span><span class="token comment">/*限制在一个块元素显示的文本的行数*/</span><span class="token property">-webkit-line-clamp</span> <span class="token punctuation">:</span> 2<span class="token punctuation">;</span><span class="token comment">/*设置或检索伸缩盒对象的子元素的排列方式*/</span><span class="token property">-webkit-box-orient</span> <span class="token punctuation">:</span> vertical<span class="token punctuation">;</span></code></pre></blockquote><h5 id="常见布局技巧"><a href="#常见布局技巧" class="headerlink" title="常见布局技巧"></a>常见布局技巧</h5><h6 id="margin负值的运用"><a href="#margin负值的运用" class="headerlink" title="margin负值的运用"></a><code>margin</code>负值的运用</h6><blockquote><p><code>margin-left : -1;</code></p><p>各个元素存在边框，；利用<code>margin</code>负值使后置元素覆盖前一个元素，最终使边框相同</p><ol><li>让每个盒子<code>margin</code>往左移动<code>-1px</code>正好压住相邻盒子边框</li><li>鼠标经过某个盒子的时候，提高当前盒子的层级即可（如果没有定位，则加相对定位（保留位置），如果有定位，则加<code>z-index</code>）</li></ol></blockquote><h6 id="文字围绕浮动元素"><a href="#文字围绕浮动元素" class="headerlink" title="文字围绕浮动元素"></a>文字围绕浮动元素</h6><blockquote><p>巧妙运用浮动元素不会压住文字的特性</p><p><strong><code>float</code></strong></p></blockquote><h6 id="行内块的巧妙运用"><a href="#行内块的巧妙运用" class="headerlink" title="行内块的巧妙运用"></a>行内块的巧妙运用</h6><blockquote><p>行内块元素，元素间有间隔，适用于某些方面</p></blockquote><h6 id="CSS三角强化"><a href="#CSS三角强化" class="headerlink" title="CSS三角强化"></a>CSS三角强化</h6><blockquote><p><strong>梯形图片制作</strong></p><p><strong>梯形 = 矩形 + 三角形</strong></p><pre class="language-css" data-language="css"><code class="language-css"><span class="token comment">/* 把上边框宽度调大 */</span><span class="token comment">/* border-top: 100px solid transparent;border-right: 50px solid skyblue; */</span><span class="token comment">/* 左边和下边的边框宽度设置为0 */</span><span class="token comment">/* border-bottom: 0 solid blue;border-left: 0 solid green; */</span><span class="token comment">/* 1.只保留右边的边框有颜色 */</span><span class="token property">border-color</span><span class="token punctuation">:</span> transparent red transparent transparent<span class="token punctuation">;</span><span class="token comment">/* 2. 样式都是solid */</span><span class="token property">border-style</span><span class="token punctuation">:</span> solid<span class="token punctuation">;</span><span class="token comment">/* 3. 上边框宽度要大， 右边框 宽度稍小， 其余的边框该为 0 */</span><span class="token property">border-width</span><span class="token punctuation">:</span> 100px 50px 0 0<span class="token punctuation">;</span></code></pre></blockquote>]]></content>
      
      
      <categories>
          
          <category> Out_Learn </category>
          
      </categories>
      
      
        <tags>
            
            <tag> H5-Css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS 学习第4天</title>
      <link href="/2022/04/26/Web_Learn/CSS_Learn/CSS04/"/>
      <url>/2022/04/26/Web_Learn/CSS_Learn/CSS04/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="CSS浮动"><a href="#CSS浮动" class="headerlink" title="CSS浮动"></a>CSS浮动</h4><h5 id="清除浮动总结"><a href="#清除浮动总结" class="headerlink" title="清除浮动总结"></a>清除浮动总结</h5><ul><li>父级没高度</li><li>子盒子浮动</li><li>影响下面布局</li></ul><h4 id="PS切图"><a href="#PS切图" class="headerlink" title="PS切图"></a>PS切图</h4><h5 id="图层切图"><a href="#图层切图" class="headerlink" title="图层切图"></a>图层切图</h5><blockquote><p>右击图层-&gt;快读导出；合并图层<code>ctrl+e</code></p></blockquote><h5 id="切片切图"><a href="#切片切图" class="headerlink" title="切片切图"></a>切片切图</h5><blockquote><p>切片工具，导出，存储为web所用格式，选中的切片</p></blockquote><h5 id="Cutterman"><a href="#Cutterman" class="headerlink" title="Cutterman"></a>Cutterman</h5><blockquote><p><a href="*https://www.cutterman.cn/zh/cutterman*">cutterman</a>工具 - 最好用的切图工具</p></blockquote><h4 id="书写习惯"><a href="#书写习惯" class="headerlink" title="书写习惯"></a>书写习惯</h4><blockquote><ol><li>布局定位属性：<code>display / position / float / clear / visibility / overflow</code></li><li>自身属性：<code>width / height / margin / padding / border / background</code></li><li>文本属性：<code>color / font / text-decoration / text-align / vettical-align / white-space / break-word</code></li><li>其他属性(CSS3)：<code>content / cursor / border-radius / box-shadow / text-shadow </code></li></ol></blockquote><h4 id="CSS定位（毒瘤广告）"><a href="#CSS定位（毒瘤广告）" class="headerlink" title="CSS定位（毒瘤广告）"></a>CSS定位（毒瘤广告）</h4><h5 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h5><blockquote><p>定位可以让盒子自由的在某个盒子内移动位置或者固定屏幕中某个位置，并且可以压住其他盒子</p></blockquote><h5 id="定位组成"><a href="#定位组成" class="headerlink" title="定位组成"></a>定位组成</h5><blockquote><p><strong>定位</strong>：将盒子定在某个位置，所以定位也就是摆放盒子，按照定位的方式移动盒子</p><p>定位= 定位模式 + 边偏移</p><p><code>定位模式用于指定一个元素在文档中的定位方式，边偏移决定了该元素的最终位置</code></p></blockquote><h6 id="定位模式"><a href="#定位模式" class="headerlink" title="定位模式"></a>定位模式</h6><blockquote><p>css中的<code>position</code> 属性设置</p></blockquote><table><thead><tr><th>属性值</th><th>描述</th></tr></thead><tbody><tr><td><code>static</code></td><td>静态定位</td></tr><tr><td><code>relative</code></td><td>相对定位</td></tr><tr><td><code>absolute</code></td><td>绝对定位</td></tr><tr><td><code>fixed</code></td><td>固定定位</td></tr></tbody></table><h6 id="边偏移"><a href="#边偏移" class="headerlink" title="边偏移"></a>边偏移</h6><blockquote><p>边偏移就是定位的盒子移动到最终位置；</p><p>有 <code>top | bottom | left | right</code> 4个属性</p></blockquote><h5 id="定位"><a href="#定位" class="headerlink" title="定位"></a>定位</h5><p><em><strong>子绝父相</strong></em></p><blockquote><p>相对定位经常用来作为绝对定位的父级</p><p>总结：因为父级需要占有位置，子盒子不需要占有位置</p></blockquote><h6 id="静态定位"><a href="#静态定位" class="headerlink" title="静态定位"></a>静态定位</h6><blockquote><p><strong><code>选择器 &#123; position : static ;&#125;</code></strong></p><ul><li>静态定位按照标准流特性摆放位置，没有边偏移</li></ul></blockquote><h6 id="相对定位（限制绝对定位）"><a href="#相对定位（限制绝对定位）" class="headerlink" title="相对定位（限制绝对定位）"></a>相对定位（限制绝对定位）</h6><blockquote><p>相对定位在元素移动时，是相对于原来的位置来说的</p><p><strong><code>选择器 &#123;position : relative;&#125;</code></strong></p><p><em><strong>虽然相对位置移动，但不脱标，原来的位置仍然保留</strong></em></p></blockquote><h6 id="绝对定位"><a href="#绝对定位" class="headerlink" title="绝对定位"></a>绝对定位</h6><blockquote><p>绝对定位是元素在移动时，相对与它祖先元素来说的</p><p><strong><code>选择器 &#123;position : absolute;&#125;</code></strong></p><ul><li>如果<strong>没有祖先元素</strong>或者<strong>祖先元素没有定位</strong>，则以浏览器（整个文档）为准定位</li><li>如果父元素有定位（相对，绝对，固定定位），则以最近一级的有定位父元素为参考点移动位置</li><li>绝对定位不再占有原先的位置 <strong>（脱标）</strong></li></ul></blockquote><h6 id="固定定位"><a href="#固定定位" class="headerlink" title="固定定位"></a>固定定位</h6><blockquote><p>固定定位是元素固定于浏览器可视区的位置</p><p><strong><code>选择器 &#123;position : fixed;&#125;</code></strong></p><ul><li>以浏览器的可视窗口为参照点移动元素</li><li>跟父元素没有关系</li></ul></blockquote><h6 id="粘性定位"><a href="#粘性定位" class="headerlink" title="粘性定位"></a>粘性定位</h6><blockquote><p>粘性定位可以被认为是相对定位和固定定位的混合</p><p><strong><code>选择器 &#123;position : sticky; top: 10px&#125;</code></strong></p><ul><li>以浏览器的可视窗口为参照点移动元素（固定定位）</li><li>粘性定位占有原先的位置（相对定位）</li><li>必须添加<code>top、left、right、bottom</code>其中一个才有效</li></ul></blockquote><h6 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h6><table><thead><tr><th>定位模式</th><th>是否脱标</th><th>移动位置</th><th>是否常用</th></tr></thead><tbody><tr><td><code>static</code>静态定位</td><td>否</td><td>不能使用边偏移</td><td>很少</td></tr><tr><td><code>relative</code>相对定位</td><td>否（占有位置）</td><td>相对于自身位置移动</td><td>常用</td></tr><tr><td><code>absolute</code>绝对定位</td><td>是（不占有位置）</td><td>带有定位的父级</td><td>常用</td></tr><tr><td><code>fixed</code>固定定位</td><td>是（不占有位置）</td><td>浏览器可视区</td><td>常用</td></tr><tr><td><code>sticky</code>粘性定位</td><td>否（占有位置）</td><td>浏览器可视区</td><td>当前阶段少</td></tr></tbody></table><h5 id="定位叠放次序"><a href="#定位叠放次序" class="headerlink" title="定位叠放次序"></a>定位叠放次序</h5><blockquote><p><strong><code>z-index</code></strong></p><p>在使用定位布局时，可能会出现盒子重叠的情况，利用<code>z-index</code>来控制盒子的前后次序</p><p><strong><code>选择器 &#123; z-index: 1;&#125;</code></strong></p><ul><li>数值可以是正整数，负整数或0，默认是<code>auto</code>，数值越大，盒子越靠上；</li><li>如果属性值相同，后来者居上</li><li></li></ul></blockquote><h5 id="定位拓展"><a href="#定位拓展" class="headerlink" title="定位拓展"></a>定位拓展</h5><h6 id="绝对定位盒子居中"><a href="#绝对定位盒子居中" class="headerlink" title="绝对定位盒子居中"></a>绝对定位盒子居中</h6><blockquote><p><strong>水平居中</strong></p><p><code>left:50%;</code></p><p><code>margin-left: 宽度一半 px</code></p></blockquote><blockquote><p><strong>垂直居中</strong></p><p><code>top:50%;</code></p><p><code>margin-top: 高度一半 px</code></p></blockquote><h6 id="定位特殊属性"><a href="#定位特殊属性" class="headerlink" title="定位特殊属性"></a>定位特殊属性</h6><blockquote><p><strong>绝对定位和固定定位也和浮动类似</strong></p><ol><li>行内元素添加绝对或者固定定位，可以直接设置高度和宽度</li><li>块级元素添加绝对或固定定位，如果不给宽度或高度，默认大小是内容的大小</li></ol></blockquote><blockquote><p>浮动元素会压住下面标准流的盒子，但是不会压住标准流里的文字图片</p><p>绝对定位（固定定位）会压住下面标准流的所有内容</p><p><em>浮动之所以不会压住文字，因为浮动产生的目的最初是为了做文字环绕效果</em></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Out_Learn </category>
          
      </categories>
      
      
        <tags>
            
            <tag> H5-Css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS 学习第3天</title>
      <link href="/2022/04/25/Web_Learn/CSS_Learn/CSS03/"/>
      <url>/2022/04/25/Web_Learn/CSS_Learn/CSS03/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="盒子模型"><a href="#盒子模型" class="headerlink" title="盒子模型"></a>盒子模型</h4><h5 id="内边距（padding）"><a href="#内边距（padding）" class="headerlink" title="内边距（padding）"></a>内边距（padding）</h5><ul><li>如果盒子本身未指定width/height属性，padding不会撑开盒子大小</li></ul><h5 id="外边距（margin）"><a href="#外边距（margin）" class="headerlink" title="外边距（margin）"></a>外边距（margin）</h5><p>margin属性用于设置外边距</p><p><code>margin -top | bottom | left | right</code>    上下左右</p><p>使用方式和<code>padding</code>一样</p><h6 id="外边距典型应用"><a href="#外边距典型应用" class="headerlink" title="外边距典型应用"></a>外边距典型应用</h6><p>外边距可以让盒子水平居中</p><ul><li><p>盒子必须指定了宽度</p></li><li><p>盒子的左右外边距设置为<code>auto</code></p></li><li><p><code>.header&#123; width:960px; margin:0 auto;&#125;</code></p></li></ul><p>常见写法：</p><ul><li><code>margin-left:auto; margin-right:auto;</code></li><li><code>margin:auto;</code></li><li><code>margin:0 auto;</code></li></ul><blockquote><p>以上方法是让块级元素居中，<strong>行内元素或者行内块元素给父元素添加<code>text-align:center</code>即可</strong></p></blockquote><h5 id="圆角边框"><a href="#圆角边框" class="headerlink" title="圆角边框"></a>圆角边框</h5><p><code>border-radius: length | xxx%</code></p><ul><li>边框 - 半径；    圆与矩形的交集</li><li>百分比代表宽度的xxx%</li><li>两个数值代表对角线</li></ul><h5 id="盒子阴影"><a href="#盒子阴影" class="headerlink" title="盒子阴影"></a>盒子阴影</h5><p><code>box-shadow: h-shadow v-shadow blur spread color inset;</code></p><table><thead><tr><th>属性值</th><th>描述</th></tr></thead><tbody><tr><td><code>h-shadow</code></td><td>必需，水平阴影的位置，允许负值</td></tr><tr><td><code>v-shadow</code></td><td>必需，垂直阴影的位置，允许负值</td></tr><tr><td><code>blur</code></td><td>可选，模糊距离</td></tr><tr><td><code>spread</code></td><td>可选，阴影的尺寸</td></tr><tr><td><code>color</code></td><td>可选，阴影的颜色</td></tr><tr><td><code>inset</code></td><td>可选，将外部阴影（outset）改为内部阴影</td></tr></tbody></table><ul><li>默认外阴影（outset）</li><li>盒子阴影不占用空间，不会影响其他盒子排列</li><li>文字阴影类似</li></ul><h4 id="CSS浮动"><a href="#CSS浮动" class="headerlink" title="CSS浮动"></a>CSS浮动</h4><h5 id="标准流"><a href="#标准流" class="headerlink" title="标准流"></a>标准流</h5><blockquote><p><strong>块级元素和行内元素按规定好默认方式排列</strong></p></blockquote><h5 id="浮动（float）"><a href="#浮动（float）" class="headerlink" title="浮动（float）"></a>浮动（float）</h5><blockquote><p><strong>浮动可以改变元素标签默认排列方式</strong></p><ul><li><p><em>多个块级元素纵向排列找标准流，块级元素横向排列找浮动</em></p></li><li><p><code>float</code> <strong>属性用于创建浮动框，将其移动到一边，直到左边缘或右边缘触及包含快或另一个浮动框的边缘</strong></p><p>  <code>选择器 &#123;float: 属性值;&#125;</code>    </p><ul><li><code>none</code>    默认不浮动</li><li><code>left</code>    元素向左浮动</li><li><code>right</code>  元素向右浮动</li></ul></li></ul></blockquote><h6 id="浮动特性"><a href="#浮动特性" class="headerlink" title="浮动特性"></a>浮动特性</h6><ul><li>浮动元素会脱离标准流，脱标不会再保留原先的位置</li><li>浮动元素会一行内显示并且元素顶部对齐</li><li>浮动元素会具有行内块元素的特性</li></ul><ol><li><strong>浮动和标准流的父盒子搭配</strong></li><li><strong>一个元素浮动，理论上其余兄弟元素也要浮动，浮动的盒子只会影响后面的标准流，不会影响前面的标准流</strong></li></ol><h5 id="清除浮动"><a href="#清除浮动" class="headerlink" title="清除浮动"></a>清除浮动</h5><blockquote><p>由于父级盒子过多，不方便给高度，但子盒子浮动不占位置，最后父盒子高度为0，就会影响下面的标准流盒子</p><p><code>选择器 &#123; clear : 属性值;&#125;</code></p><p><code>left</code>：不允许左侧有浮动元素（清除左侧浮动的影响）</p><p><code>right</code>：不允许右侧有浮动元素（清除右侧浮动的影响）</p><p><code>both</code>：同时清除两侧浮动的影响</p></blockquote><blockquote><ol><li><strong>额外标签法</strong>也称隔墙法，w3c推荐做法</li><li>父级添加<code>overflow</code>属性</li><li>父级添加<code>after</code>伪属性</li><li>父级添加双伪属性</li></ol></blockquote><h6 id="额外标签法"><a href="#额外标签法" class="headerlink" title="额外标签法"></a>额外标签法</h6><blockquote><p>额外标签法会在浮动元素末尾添加一个空标签，例如<code>&lt;div style=&quot;clear:both&quot;&gt;&lt;/div&gt;</code>，或者其他标签<code>&lt;br/&gt;</code></p><p>这个新增的盒子要求必须是块级元素不能是行内元素</p></blockquote><h6 id="父级添加overflow"><a href="#父级添加overflow" class="headerlink" title="父级添加overflow"></a>父级添加<code>overflow</code></h6><blockquote><p>可以给父级添加<code>overflow</code>属性，属性值设置为<code>hidden、auto、scroll</code></p><p><strong>无法显示溢出部分</strong></p></blockquote><h6 id="after伪元素法"><a href="#after伪元素法" class="headerlink" title="after伪元素法"></a><code>after</code>伪元素法</h6><blockquote><p><code>.clearfix:after</code>方式是额外标签法的升级版，父元素添加</p></blockquote><blockquote><pre class="language-css" data-language="css"><code class="language-css"><span class="token selector">.clearfix:after</span> <span class="token punctuation">&#123;</span> <span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">""</span><span class="token punctuation">;</span> <span class="token property">display</span><span class="token punctuation">:</span> block<span class="token punctuation">;</span> <span class="token property">height</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span> <span class="token property">clear</span><span class="token punctuation">:</span> both<span class="token punctuation">;</span> <span class="token property">visibility</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.clearfix</span> <span class="token punctuation">&#123;</span><span class="token comment">/*IE6,7专有*/</span> <span class="token property">zoom</span><span class="token punctuation">:</span> 1<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><ul><li>优点：没有增加标签，结构更简单</li><li>缺点：照顾低版本浏览器</li></ul></blockquote><h6 id="双伪元素清除浮动"><a href="#双伪元素清除浮动" class="headerlink" title="双伪元素清除浮动"></a>双伪元素清除浮动</h6><blockquote><p><code>.clearfix:before,.clearfix:after</code>    双向清除</p></blockquote><blockquote><pre class="language-css" data-language="css"><code class="language-css"><span class="token selector">.clearfix:before,.clearfix:after</span> <span class="token punctuation">&#123;</span> <span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">""</span><span class="token punctuation">;</span> <span class="token property">display</span><span class="token punctuation">:</span> table<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.clearfix:after</span> <span class="token punctuation">&#123;</span> <span class="token property">clear</span><span class="token punctuation">:</span>both<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.clearfix</span> <span class="token punctuation">&#123;</span><span class="token comment">/*IE6,7专有*/</span> <span class="token property">zoom</span><span class="token punctuation">:</span> 1<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre></blockquote>]]></content>
      
      
      <categories>
          
          <category> Out_Learn </category>
          
      </categories>
      
      
        <tags>
            
            <tag> H5-Css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS 学习第2天</title>
      <link href="/2022/04/24/Web_Learn/CSS_Learn/CSS02/"/>
      <url>/2022/04/24/Web_Learn/CSS_Learn/CSS02/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="复合选择器"><a href="#复合选择器" class="headerlink" title="复合选择器"></a>复合选择器</h4><h5 id="后代选择器"><a href="#后代选择器" class="headerlink" title="后代选择器"></a>后代选择器</h5><blockquote><p>又称包含选择器，可以选择父元素里的子元素；</p><p><code>元素1 元素2 ... &#123;样式声明&#125;</code></p></blockquote><ul><li>空格隔开</li><li>层层查找</li><li>元素一和元素二可以是任意的基础选择器；<code>.class ul li &#123;&#125;</code></li></ul><h5 id="子选择器"><a href="#子选择器" class="headerlink" title="子选择器"></a>子选择器</h5><blockquote><p>子元素选择器选择作为某一元素的最近一级元素；亲儿子元素</p><p><code>元素1&gt;元素2 &#123;样式声明&#125;</code></p></blockquote><h5 id="并集选择器"><a href="#并集选择器" class="headerlink" title="并集选择器"></a>并集选择器</h5><blockquote><p>可以选择多组标签，同时定义相同的样式</p><p>并集选择器是各选择器通过逗号连接，任何选择器都可以作为并集选择器一部分</p><p><code>元素1,元素2 &#123;样式声明&#125;</code></p></blockquote><h5 id="伪类选择器"><a href="#伪类选择器" class="headerlink" title="伪类选择器"></a>伪类选择器</h5><blockquote><p>添加特殊效果，比如链接</p><p>用冒号(:)表示</p></blockquote><h6 id="链接伪类选择器"><a href="#链接伪类选择器" class="headerlink" title="链接伪类选择器"></a>链接伪类选择器</h6><blockquote><p><code>a:link</code>    选择所有未访问</p><p><code>a:visited</code>    选择所有以访问</p><p><code>a:hover</code>    指针位于其上</p><p><code>a:active</code>    选择活动链接，按下未抬起</p></blockquote><h6 id="focus伪类选择器"><a href="#focus伪类选择器" class="headerlink" title="focus伪类选择器"></a>focus伪类选择器</h6><blockquote><p>用于选取获得焦点的表单元素</p><p><code>input:focus&#123;&#125;</code>    </p></blockquote><h4 id="CSS元素显示模式"><a href="#CSS元素显示模式" class="headerlink" title="CSS元素显示模式"></a>CSS元素显示模式</h4><h5 id="元素显示模式"><a href="#元素显示模式" class="headerlink" title="元素显示模式"></a>元素显示模式</h5><blockquote><p>元素以什么方式进行显示</p></blockquote><h6 id="块元素"><a href="#块元素" class="headerlink" title="块元素"></a>块元素</h6><blockquote><p><code>&lt;h1&gt;~&lt;h6&gt;,&lt;p&gt;,&lt;div&gt;,&lt;ul&gt;,&lt;ol&gt;,&lt;li&gt;</code></p><ul><li>独占一行</li><li>高度宽度，内外边距可控</li><li>容器盒子，内部可以存放块级、行内元素；文字类元素内不能使用块级元素</li></ul></blockquote><h6 id="行内元素"><a href="#行内元素" class="headerlink" title="行内元素"></a>行内元素</h6><blockquote><p><code>&lt;a&gt;,&lt;strong&gt;,&lt;b&gt;,&lt;em&gt;,&lt;i&gt;,&lt;del&gt;,&lt;s&gt;,&lt;ins&gt;,&lt;u&gt;,&lt;span&gt;</code></p><ul><li>相邻行内元素在一行，一行显示多个</li><li>宽高设置无效</li><li>默认宽度为内容宽度</li><li>行内元素容纳文本和行内元素；链接内部不能放链接，但能存放块级元素，且可转换为块级元素</li></ul></blockquote><h6 id="行内块元素"><a href="#行内块元素" class="headerlink" title="行内块元素"></a>行内块元素</h6><blockquote><p><code>&lt;input&gt;,&lt;img&gt;,&lt;td&gt;</code></p><ul><li>同时具有行内元素和块元素特点</li><li>和相邻行内元素在一行，一行显示多个</li><li>默认宽度为内容宽度</li><li>高度，内外边距可控</li></ul></blockquote><h5 id="元素显示模式转换"><a href="#元素显示模式转换" class="headerlink" title="元素显示模式转换"></a>元素显示模式转换</h5><blockquote><p>一个模式的元素需要另一种模式的特性</p><ul><li><code>display:block;</code>    行内元素转块级元素</li><li><code>display:inline;</code>    块级元素转行内元素</li><li><code>display:inline-block;</code>    转换为行内块元素</li></ul></blockquote><h5 id="垂直居中"><a href="#垂直居中" class="headerlink" title="垂直居中"></a>垂直居中</h5><blockquote><p>行高等于块元素高度</p><p><code>height = line-hight</code></p></blockquote><h4 id="CSS背景"><a href="#CSS背景" class="headerlink" title="CSS背景"></a>CSS背景</h4><h5 id="背景图片"><a href="#背景图片" class="headerlink" title="背景图片"></a>背景图片</h5><blockquote><p><code>background-image: none | url()</code>    指定背景图片</p></blockquote><h6 id="背景平铺"><a href="#背景平铺" class="headerlink" title="背景平铺"></a>背景平铺</h6><blockquote><p><code>background-repeat: repeat | no-repeat |repeat-x |repeat-y</code>    对背景图像进行平铺</p></blockquote><h6 id="背景图片位置"><a href="#背景图片位置" class="headerlink" title="背景图片位置"></a>背景图片位置</h6><blockquote><p><code>background-position: x y</code>    x坐标和y坐标</p><p><code>length</code> 百分数 | 由浮点数和单位标识符组成的长度值</p><p><code>position</code> <code>top | center | bottom | left | right</code> 方位名词</p></blockquote><h6 id="背景图像固定"><a href="#背景图像固定" class="headerlink" title="背景图像固定"></a>背景图像固定</h6><blockquote><p><code>background-attachment: scroll | fixed</code></p><ul><li><code>scroll</code>    背景图像是随对象内容滚动</li><li><code>fixed</code>    背景图像固定</li></ul></blockquote><h6 id="背景复合写法"><a href="#背景复合写法" class="headerlink" title="背景复合写法"></a>背景复合写法</h6><blockquote><p><code>background: 颜色    图片地址    背景平铺    图像滚动    图像位置</code></p></blockquote><h6 id="背景色半透明"><a href="#背景色半透明" class="headerlink" title="背景色半透明"></a>背景色半透明</h6><blockquote><p><code>background: rgba(0,0,0,0.3)</code></p><p><code>rgba( red , green , blue , alpha透明度)</code></p></blockquote><h4 id="CSS三大特性"><a href="#CSS三大特性" class="headerlink" title="CSS三大特性"></a>CSS三大特性</h4><h5 id="层叠性"><a href="#层叠性" class="headerlink" title="层叠性"></a>层叠性</h5><p>相同样式会覆盖</p><ul><li>样式冲突：就近原则（从上往下，类似方法重写）</li><li>样式不冲突，不进行层叠</li></ul><h5 id="继承性"><a href="#继承性" class="headerlink" title="继承性"></a>继承性</h5><p>子标签会继承父标签的某些样式</p><ul><li>简化代码，降低css复杂性</li><li>子元素可以继承父元素的样式（<code>text- ,font- ,line- ,</code>这些元素开头的可以继承，以及<code>color</code>属性）</li></ul><h6 id="行高继承性"><a href="#行高继承性" class="headerlink" title="行高继承性"></a>行高继承性</h6><pre class="language-css" data-language="css"><code class="language-css"><span class="token selector">body</span><span class="token punctuation">&#123;</span>    <span class="token property">font</span> <span class="token punctuation">:</span>12px/1.5 Microsoft YaHei<span class="token punctuation">&#125;</span></code></pre><ul><li>行高可以不跟单位：<code>1.5</code>表当前文字大小的1.5倍</li><li>子元素可以根据自己文字大小自动调整行高</li></ul><h5 id="优先级"><a href="#优先级" class="headerlink" title="优先级"></a>优先级</h5><p>当同一个元素指定多个选择器</p><ul><li>选择器相同，执行层叠性</li><li>不同，根据权重执行</li></ul><table><thead><tr><th>选择器</th><th>选择器权重</th></tr></thead><tbody><tr><td>继承或者 *</td><td>0 0 0 0</td></tr><tr><td>元素选择器</td><td>0 0 0 1</td></tr><tr><td>类选择器，伪类选择器</td><td>0 0 1 0</td></tr><tr><td>id选择器</td><td>0 1 0 0</td></tr><tr><td>行内样式style=””</td><td>1 0 0 0</td></tr><tr><td>!important</td><td>无穷大</td></tr></tbody></table><blockquote><pre class="language-css" data-language="css"><code class="language-css"><span class="token selector">div</span> <span class="token punctuation">&#123;</span> <span class="token property">color</span><span class="token punctuation">:</span> red<span class="token important">!important</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre></blockquote><blockquote><p><code>a</code>链接拥有浏览器默认样式</p></blockquote><h6 id="权重叠加"><a href="#权重叠加" class="headerlink" title="权重叠加"></a>权重叠加</h6><p>复合选择器会有权重叠加的问题</p><blockquote><pre class="language-css" data-language="css"><code class="language-css"><span class="token selector">ul li</span> <span class="token punctuation">&#123;</span> <span class="token property">color</span><span class="token punctuation">:</span>green<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">li</span> <span class="token punctuation">&#123;</span> <span class="token property">color</span><span class="token punctuation">:</span>red<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>范围越小，权重越大</p><p><code>ul li</code>的权重叠加高于<code>li</code>的权重，不会进位</p></blockquote><h4 id="盒子模型"><a href="#盒子模型" class="headerlink" title="盒子模型"></a>盒子模型</h4><h5 id="盒子模型组成"><a href="#盒子模型组成" class="headerlink" title="盒子模型组成"></a>盒子模型组成</h5><ul><li>border边框</li><li>content内容</li><li>padding内边距</li><li>margin外边距</li></ul><h5 id="边框（border）"><a href="#边框（border）" class="headerlink" title="边框（border）"></a>边框（border）</h5><p><code>border : border-width || border-style || border-color</code>    边框粗细，样式，颜色</p><ul><li><code>border-style: solid | dashed | dotted</code>     实线，虚线，点线</li></ul><h6 id="边框复合写法"><a href="#边框复合写法" class="headerlink" title="边框复合写法"></a>边框复合写法</h6><p><code>border : border-width | border-style | border-color</code>    边框粗细，样式，颜色`</p><h6 id="边框分开写法"><a href="#边框分开写法" class="headerlink" title="边框分开写法"></a>边框分开写法</h6><p><code>border- top | bottom | left | right</code> 上下左右边框</p><h6 id="表格细线边框"><a href="#表格细线边框" class="headerlink" title="表格细线边框"></a>表格细线边框</h6><p><code>border-collapse:collapse</code></p><ul><li><code>collapse</code>单词是合并的意思</li><li>表示相邻边框合并</li></ul><h6 id="内边距（padding）"><a href="#内边距（padding）" class="headerlink" title="内边距（padding）"></a>内边距（padding）</h6><p>padding属性用于设置内边距，设置边框与内容之间的距离</p><p><code>padding- top | bottom | left | right</code>    上下左右</p><p><code>padding:X px</code>    内边距</p><ul><li>1：上下左右；</li><li>2：上下，左右；</li><li>3：上，左右，下；</li><li>4：上，右，下，左；顺时针；</li></ul>]]></content>
      
      
      <categories>
          
          <category> Out_Learn </category>
          
      </categories>
      
      
        <tags>
            
            <tag> H5-Css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS 学习第1天</title>
      <link href="/2022/04/23/Web_Learn/CSS_Learn/CSS01/"/>
      <url>/2022/04/23/Web_Learn/CSS_Learn/CSS01/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>开始正式学CSS啦</p></blockquote><span id="more"></span><h3 id="CSS-层叠样式表"><a href="#CSS-层叠样式表" class="headerlink" title="CSS 层叠样式表"></a>CSS 层叠样式表</h3><h4 id="基础选择器"><a href="#基础选择器" class="headerlink" title="基础选择器"></a>基础选择器</h4><blockquote><p>选择器{样式}</p><pre class="language-css" data-language="css"><code class="language-css"><span class="token selector">p</span><span class="token punctuation">&#123;</span><span class="token property">color</span><span class="token punctuation">:</span>red<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre></blockquote><h5 id="代码规范"><a href="#代码规范" class="headerlink" title="代码规范"></a>代码规范</h5><h6 id="空格"><a href="#空格" class="headerlink" title="空格"></a>空格</h6><pre class="language-css" data-language="css"><code class="language-css"><span class="token selector">h1</span> <span class="token punctuation">&#123;</span>    <span class="token property">color</span><span class="token punctuation">:</span> pink<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><blockquote><ol><li>属性选择器前面，冒号后面，保留一个空格</li><li>选择器和大括号中间保留空格</li></ol></blockquote><h5 id="标签选择器"><a href="#标签选择器" class="headerlink" title="标签选择器"></a>标签选择器</h5><blockquote><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css"> <span class="token selector">标签名</span><span class="token punctuation">&#123;</span>     <span class="token property">属性</span><span class="token punctuation">:</span>属性值<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span></code></pre></blockquote><h5 id="类选择器"><a href="#类选择器" class="headerlink" title="类选择器"></a>类选择器</h5><p>结构需要使用class属性来调用class类</p><blockquote><p>类选择器：</p><p>​    样式点定义，结构class调用，一个或多个</p></blockquote><h6 id="多类名"><a href="#多类名" class="headerlink" title="多类名"></a>多类名</h6><blockquote><p>使用方式</p><p><code>class=&quot;red font&quot;</code>多类名添加空格即可</p></blockquote><h5 id="id选择器"><a href="#id选择器" class="headerlink" title="id选择器"></a>id选择器</h5><pre class="language-css" data-language="css"><code class="language-css"><span class="token selector">#hso</span> <span class="token punctuation">&#123;</span>    <span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>hso<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><p>id具有唯一性</p><h5 id="通配符选择器"><a href="#通配符选择器" class="headerlink" title="通配符选择器"></a>通配符选择器</h5><p>通配符选择器使用“ * ”定义，表示选取页面的所有元素】</p><pre class="language-css" data-language="css"><code class="language-css"><span class="token selector">*</span> <span class="token punctuation">&#123;</span>    <span class="token property">color</span><span class="token punctuation">:</span>red<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><ul><li>不需要调用，自动使用样式</li><li>特殊情况才使用，比如边距</li></ul><h4 id="字体属性"><a href="#字体属性" class="headerlink" title="字体属性"></a>字体属性</h4><h5 id="字体系列"><a href="#字体系列" class="headerlink" title="字体系列"></a>字体系列</h5><p><code>font-family:&quot;Microsoft Yahei&quot;,&quot;Consolas&quot;;</code></p><blockquote><p>选择多个字体，兼容性高</p></blockquote><h5 id="字体大小"><a href="#字体大小" class="headerlink" title="字体大小"></a>字体大小</h5><p><code>font-size:20px;</code></p><blockquote><p>标题文字比较特殊，需要单独指定文字大小</p></blockquote><h5 id="字体粗细"><a href="#字体粗细" class="headerlink" title="字体粗细"></a>字体粗细</h5><p><code>font-weight:normal|bold;</code>  </p><blockquote><p>700相当于bold；400相当于normal；</p></blockquote><h5 id="文字样式"><a href="#文字样式" class="headerlink" title="文字样式"></a>文字样式</h5><p><code>font-style:normal|italic;</code>  </p><blockquote><p>一般不使用italic，反而将em属性倾斜的回正</p></blockquote><h5 id="字体复合属性"><a href="#字体复合属性" class="headerlink" title="字体复合属性"></a>字体复合属性</h5><p><code>font: font-style font-weight font-size/line=height font-family</code> </p><blockquote><p>严格按照顺序，必选保留<code>font-size font-family</code></p></blockquote><h4 id="文本属性"><a href="#文本属性" class="headerlink" title="文本属性"></a>文本属性</h4><h5 id="文本颜色"><a href="#文本颜色" class="headerlink" title="文本颜色"></a>文本颜色</h5><p><code>color: red|#ff0000|rgb(255,0,0)</code></p><blockquote><p>预定义颜色值，十六进制，rgb代码</p></blockquote><h5 id="对齐文本"><a href="#对齐文本" class="headerlink" title="对齐文本"></a>对齐文本</h5><p><code>text-align: center|left|right</code></p><blockquote><p><code>text-align</code> 只能用于水平对齐</p></blockquote><h5 id="装饰文本"><a href="#装饰文本" class="headerlink" title="装饰文本"></a>装饰文本</h5><p><code>text-decoration: none|underline 下划线|overline 上划线|line-through 删除线(不常用)</code></p><h5 id="文本缩进"><a href="#文本缩进" class="headerlink" title="文本缩进"></a>文本缩进</h5><p><code>text-indent: X px |2 em;</code></p><blockquote><p>首行缩进X 距离</p></blockquote><h5 id="行间距"><a href="#行间距" class="headerlink" title="行间距"></a>行间距</h5><p><code>line-height: X px;</code></p><blockquote><p>行高: 上间距，文本高度，下间距；</p></blockquote><h4 id="引入方式"><a href="#引入方式" class="headerlink" title="引入方式"></a>引入方式</h4><h5 id="内部样式表"><a href="#内部样式表" class="headerlink" title="内部样式表"></a>内部样式表</h5><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">    <span class="token selector">p</span> <span class="token punctuation">&#123;</span>        <span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span></code></pre><blockquote><ul><li>一般放于<code>&lt;head&gt;</code>内部</li><li>控制整个html页面</li><li>代码结构清晰，但并未实现结构与样式分离</li></ul></blockquote><h5 id="行内样式表"><a href="#行内样式表" class="headerlink" title="行内样式表"></a>行内样式表</h5><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span><span class="token property">font-size</span><span class="token punctuation">:</span> 12px<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span></span><span class="token punctuation">></span></span>    显示文本<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><h5 id="外部样式表"><a href="#外部样式表" class="headerlink" title="外部样式表"></a>外部样式表</h5><p>样式单独写到CSS文件中，之后引用到HTML中</p><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>css文件路径<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></code></pre><h5 id="引入方式总结"><a href="#引入方式总结" class="headerlink" title="引入方式总结"></a>引入方式总结</h5><table><thead><tr><th>样式表</th><th>优点</th><th>缺点</th><th>使用情况</th><th>控制范围</th></tr></thead><tbody><tr><td>行内样式表</td><td>方便书写，权重高</td><td>结构样式混写</td><td>较少</td><td>控制一个标签</td></tr><tr><td>内部样式表</td><td>部分结构和样式相分离</td><td>没有彻底分离</td><td>较多</td><td>控制一个界面</td></tr><tr><td>外部样式表</td><td>完全实现结构和样式分离</td><td>需要引入</td><td>最多</td><td>控制多个界面</td></tr></tbody></table><h3 id="Emmet语法"><a href="#Emmet语法" class="headerlink" title="Emmet语法"></a>Emmet语法</h3><h4 id="快速生成HTML"><a href="#快速生成HTML" class="headerlink" title="快速生成HTML"></a>快速生成HTML</h4><blockquote><p><code>div+tab</code></p><p><code>div*x</code>    多项</p><p><code>div+p</code>    同等级</p><p><code>p.class|#id</code>    默认填写类选择器和id选择器</p><p><code>.class$*5</code>    按顺序生成    <code>$</code>自增</p><p><code>div&#123;&#125;</code>    大括号默认文字</p></blockquote><h4 id="快速生成CSS"><a href="#快速生成CSS" class="headerlink" title="快速生成CSS"></a>快速生成CSS</h4><blockquote><p><code>w100</code>    简写属性和值</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Out_Learn </category>
          
      </categories>
      
      
        <tags>
            
            <tag> H5-Css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTML 综合学习</title>
      <link href="/2022/04/22/Web_Learn/HTML5/"/>
      <url>/2022/04/22/Web_Learn/HTML5/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>开始正式学啦</p></blockquote><span id="more"></span><h3 id="标签示例"><a href="#标签示例" class="headerlink" title="标签示例"></a>标签示例</h3><h4 id="普通标签"><a href="#普通标签" class="headerlink" title="普通标签"></a>普通标签</h4><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>!DOCTYPE</span><span class="token punctuation">></span></span> 文档类型声明标签<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span> <span class="token attr-value"><span class="token punctuation attr-equals">=</span> <span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> 字符集<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span> - <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h6</span><span class="token punctuation">></span></span> 双标签 标题标签作为标题使用  该文字重要性<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span> 双标签 段落标签<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/></span></span> 换行<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>hr</span><span class="token punctuation">/></span></span> 下划线<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>strong</span><span class="token punctuation">></span></span> 加粗 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>b</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>em</span><span class="token punctuation">></span></span> 倾斜 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>del</span><span class="token punctuation">></span></span> 删除线 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>s</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ins</span><span class="token punctuation">></span></span> 下划线  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>u</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>  布局  一行支持一个 大盒子  块标签<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span> 布局 一行多个 小盒子  行标签</code></pre><h4 id="图像标签"><a href="#图像标签" class="headerlink" title="图像标签"></a>图像标签</h4><pre class="language-html" data-language="html"><code class="language-html">&lt;img src ="url"/ alt="">src  文件路径alt  图片替换文本（图片不可显示title  提示文本，鼠标放到图片上面提示文本width 宽度  height  高度border 边框宽度图像路径  同级  无符号；下一级  /；上一级  ../；</code></pre><h4 id="超链接标签"><a href="#超链接标签" class="headerlink" title="超链接标签"></a>超链接标签</h4><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>跳转目标<span class="token punctuation">"</span></span> <span class="token attr-name">target</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>打开方式<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>文本<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>href</span><span class="token punctuation">></span></span>target：_self 当前窗口打开；_blank 新窗口打开空链接：#下载链接：文件，压缩包网页元素链接：音频，视频，等锚点链接：#xxx；id=“xxx”</code></pre><h4 id="注释标签"><a href="#注释标签" class="headerlink" title="注释标签"></a>注释标签</h4><pre class="language-html" data-language="html"><code class="language-html"><span class="token comment">&lt;!--xxx--></span></code></pre><h4 id="符号"><a href="#符号" class="headerlink" title="符号"></a>符号</h4><pre class="language-html" data-language="html"><code class="language-html"><span class="token entity named-entity" title="&nbsp;">&amp;nbsp;</span> 空格；&lt; : <span class="token entity named-entity" title="&lt;">&amp;lt;</span>> :<span class="token entity named-entity" title="&gt;">&amp;gt;</span></code></pre><h4 id="表格标签-显示数据"><a href="#表格标签-显示数据" class="headerlink" title="表格标签:显示数据"></a>表格标签:显示数据</h4><h5 id="表格基本语法"><a href="#表格基本语法" class="headerlink" title="表格基本语法"></a>表格基本语法</h5><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>表格内容<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>表格内容<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>表格内容<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>table</span><span class="token punctuation">></span></span></code></pre><table>    <tr>        <td>表格内容</td>        <td>表格内容</td>        <td>表格内容</td>    </tr></table><h5 id="表格单元格标签"><a href="#表格单元格标签" class="headerlink" title="表格单元格标签"></a>表格单元格标签</h5><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">></span></span>姓名<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>表格内容<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>表格内容<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>表格内容<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>table</span><span class="token punctuation">></span></span></code></pre><table>    <tr><th>姓名</th></tr>    <tr>        <td>表格内容</td>        <td>表格内容</td>        <td>表格内容</td>    </tr></table><h5 id="表格属性"><a href="#表格属性" class="headerlink" title="表格属性"></a>表格属性</h5><table><thead><tr><th>属性名</th><th>属性值</th><th>描述</th></tr></thead><tbody><tr><td>align</td><td>left、center、right</td><td>表格相对对齐方式</td></tr><tr><td>border</td><td>1或””</td><td>表格边框存在，””表示没有边框</td></tr><tr><td>cellpadding</td><td>像素值</td><td>单元边界与内容间距，默认1像素、、内边距</td></tr><tr><td>cellspacing</td><td>像素值</td><td>单元格之间的空白、、外边距</td></tr><tr><td>width</td><td>像素值或百分比</td><td>表格宽度</td></tr></tbody></table><h6 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h6><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span> <span class="token attr-name">align</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>center<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">></span></span>排名<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">></span></span>关键词<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">></span></span>相关链接<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>Github<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://github.com<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>相关<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>Blog<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://handsomelv.top<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>相关<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>table</span><span class="token punctuation">></span></span></code></pre><table align="center" border=1>    <tr>        <th>排名</th>        <th>关键词</th>        <th>相关链接</th>    </tr>    <tr>            <td>1</td>        <td>Github</td>        <td>            <a href="https://github.com">相关</a>        </td>    </tr>    <tr>            <td>2</td>        <td>Blog</td>        <td>            <a href="https://handsomelv.top">相关</a>        </td>    </tr></table><h5 id="表格结构标签"><a href="#表格结构标签" class="headerlink" title="表格结构标签"></a>表格结构标签</h5><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>thead</span><span class="token punctuation">></span></span>表格头部标签<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>thead</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tbody</span><span class="token punctuation">></span></span>表格主体标签<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tbody</span><span class="token punctuation">></span></span></code></pre><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span> <span class="token attr-name">align</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>center<span class="token punctuation">"</span></span> <span class="token attr-name">border</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>1</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>thead</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">></span></span>排名<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">></span></span>关键词<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">></span></span>相关链接<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>thead</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tbody</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>Github<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://github.com<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>相关<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>Blog<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://handsomelv.top<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>相关<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tbody</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>table</span><span class="token punctuation">></span></span></code></pre><h5 id="合并单元格"><a href="#合并单元格" class="headerlink" title="合并单元格"></a>合并单元格</h5><blockquote><p>目标单元格：（写合并代码）</p><ul><li>跨行：最上侧单元格为目标单元格;    colspan</li><li>跨列：最左侧单元格为目标单元格;    rowspan</li></ul></blockquote><h4 id="列表标签：布局"><a href="#列表标签：布局" class="headerlink" title="列表标签：布局"></a>列表标签：布局</h4><h5 id="无序列表：-lt-ul-gt-lt-li-gt"><a href="#无序列表：-lt-ul-gt-lt-li-gt" class="headerlink" title="无序列表：&lt;ul&gt;;&lt;li&gt;"></a>无序列表：<code>&lt;ul&gt;;&lt;li&gt;</code></h5><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>列表项<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span></code></pre><blockquote><p><code>&lt;ul&gt;</code>里只能嵌套<code>&lt;li&gt;</code></p><p><code>&lt;li&gt;</code>相当于一个容器，可以容纳所有元素</p></blockquote><h5 id="有序列表：-lt-ol-gt-lt-li-gt"><a href="#有序列表：-lt-ol-gt-lt-li-gt" class="headerlink" title="有序列表：&lt;ol&gt;;&lt;li&gt;"></a>有序列表：<code>&lt;ol&gt;;&lt;li&gt;</code></h5><h5 id="自定义列表"><a href="#自定义列表" class="headerlink" title="自定义列表"></a>自定义列表</h5><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dl</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dt</span><span class="token punctuation">></span></span>名称<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dt</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dd</span><span class="token punctuation">></span></span>名称描述<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dd</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dl</span><span class="token punctuation">></span></span></code></pre><h4 id="表单标签：收集信息"><a href="#表单标签：收集信息" class="headerlink" title="表单标签：收集信息"></a>表单标签：收集信息</h4><blockquote><p>表单域，表单元素，提示信息</p></blockquote><h5 id="表单域"><a href="#表单域" class="headerlink" title="表单域"></a>表单域</h5><p><code>&lt;form&gt;&lt;/form&gt;</code>用于定义表单域，实现信息的收集和传递</p><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>url<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>提交方式<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>表单域姓名<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    各种表单元素控件<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span></code></pre><h5 id="表单元素"><a href="#表单元素" class="headerlink" title="表单元素"></a>表单元素</h5><h6 id="input-输入表单元素"><a href="#input-输入表单元素" class="headerlink" title="input 输入表单元素"></a>input 输入表单元素</h6><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token punctuation">></span></span></code></pre><blockquote><p><code>type:button;checkbox;file;hidden;image;text;password;radio 单选;reset 重置;subit 提交;</code>    </p><p><code>name:</code>定义<code>input</code>元素名称；<code>value:</code>规定<code>input</code>元素的值；<code>check:</code>check,是否选中；<code>maxlength:</code>正整数，输入字符最大长度</p></blockquote><h6 id="label-标签"><a href="#label-标签" class="headerlink" title="label 标签"></a>label 标签</h6><p><code>&lt;label&gt;</code>用于绑定表单元素，点击<code>&lt;label&gt;</code>自动对焦到对应的表单元素</p><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sex<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>男<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>radio<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sex<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sex<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span></code></pre><h6 id="select标签"><a href="#select标签" class="headerlink" title="select标签"></a>select标签</h6><p><code>&lt;select&gt;</code>下拉列表</p><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span><span class="token punctuation">></span></span>选项1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span><span class="token punctuation">></span></span>选项2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span></code></pre><select>    <option>选项1</option>    <option>选项2</option></select><h6 id="textarea文本域"><a href="#textarea文本域" class="headerlink" title="textarea文本域"></a>textarea文本域</h6><p><code>&lt;textarea&gt;</code>定义多行文本输入控件</p><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>textarea</span><span class="token punctuation">></span></span>文本内容<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>textarea</span><span class="token punctuation">></span></span></code></pre><textarea>文本内容</textarea>]]></content>
      
      
      <categories>
          
          <category> Out_Learn </category>
          
      </categories>
      
      
        <tags>
            
            <tag> H5-Css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>闲时再会</title>
      <link href="/2021/12/09/going/"/>
      <url>/2021/12/09/going/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>这半年尤其的快，小站也没时间运营，下一步就是决定在以后的日子里，<del>闲时更新</del>，届时再见！安好</p><span id="more"></span>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>LSP协议被劫持解决方法</title>
      <link href="/2021/07/17/PC_Issues/LSP_Plm/"/>
      <url>/2021/07/17/PC_Issues/LSP_Plm/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>事情是这样的：</p><center>就在昨天，学习了一丢丢Java爬虫方面的知识，爬了一下自己的这个小站，结果今天早上起来发现，连上网络之后，某些网站可以访问，某些不可以，啊这，这可就难受了，在网上搜了一下，发现是LSP协议被劫持了</center>解决方法在下面</blockquote><span id="more"></span><blockquote><p>LSP就是 TCP/IP 等协议的接口．LSP用在正途上可以方便程序员们编写监视系统网络通讯情况的Sniffer，可是现在常见的LSP都被用于 浏览器劫持 。 另外，LSP是指一个FEC在MPLS网络中经过的路径称为标签交换路径LSP（Label Switched Path），是从入口到出口的一个单向路径。<br>LSP协议被劫持导致不能上网《传说中的”浏览器劫持”》<br>故障表现:本地连接显示止常，登陆QQ显示网络连接超时，打开浏览器不能显示网页，网络丢包率达到了100%，本地连接数据包收到为0，查杀木马、病毒也不能解决问题。<br>原因分析:Winsock LSP全称Windows Socket Laycred Scrvice Providcr(分层服务提供商)，它是Windows底层网络Socker通信需要经过的大门。一些流氓软件可以把自已加进去，就可以截取、访问、修改网络的数据包，可以随意添加广告，还能获取你的浏览习惯.如果加进的是木马，后果可想而知。而且因LSP工.作在底层，所以无论你用什么浏览器，都逃不了经过它。而LSP中的dll文件被删除后，就会出现无法上网的情况。</p></blockquote><h2 id="检测工具直接修复"><a href="#检测工具直接修复" class="headerlink" title="检测工具直接修复"></a>检测工具直接修复</h2><blockquote><p>首先，360和火绒等主流电脑管家工具中都有相关功能.<br>使用360急救箱网络修复或360安全卫士LSP修复功能来修复（如果提示你的“LSP没有异常，不用修复”，但是你还是上不了网，执行ping命令，在ip地址处会出现（无法ping通外网。那么你就用360的“恢复Winsock LSP到初始状态”的功能。）<br>用LSPFix这个工具在断开网络下修复。<br>火绒则是在“安全工具”-&gt;“断网修复”，进行全面检查，在检查出LSP协议被劫持后，点击修复即可。</p></blockquote><h2 id="命令行工具修复"><a href="#命令行工具修复" class="headerlink" title="命令行工具修复"></a>命令行工具修复</h2><blockquote><p>Windows XP Service Pack 2 中有两个新增的 Netsh 命令。<br>“ netsh winsock reset catalog   该命令将 Winsock 目录重置为默认配置。如果安装了可导致网络连接丢失的不正确的 LSP，该命令会很有用。尽管使用该命令可以还原网络连接，但应该慎重使用，因为以前安装的 LSP 都将需要重新安装。” netsh winsock show catalog   该命令会显示安装在计算机上的 Winsock LSP 列表</p></blockquote><h2 id="重装网卡驱动"><a href="#重装网卡驱动" class="headerlink" title="重装网卡驱动"></a>重装网卡驱动</h2><blockquote><p>在完成上述操作后，如果还是无法上网，建议重装一下电脑网卡驱动（本人是需要这一步。</p></blockquote><h2 id="重新联网"><a href="#重新联网" class="headerlink" title="重新联网"></a>重新联网</h2><blockquote><p>最后，重置一下网络连接，也就是重新联网。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Solve_Problem </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>猜数字小游戏</title>
      <link href="/2021/07/15/Java_Learn/university_2_summ_holid/GuessNumGame/"/>
      <url>/2021/07/15/Java_Learn/university_2_summ_holid/GuessNumGame/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><img src="/images/posts/Java_Learn/university_2_summ_holid/GuessNumGame/%E6%95%88%E6%9E%9C.jpg" alt="效果" loading="lazy"></p><blockquote><center>一个猜数字小游戏，大二实训自做</center></blockquote><span id="more"></span><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote><p>刚做出来,没什么好说的，本来也就不是啥大项目<br>初代版本，没改字体颜色大小啥的，可以自己改<br>不过自己能做出来，很高兴<br>废话不多说，直接放源码</p></blockquote><h2 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h2><blockquote><p>一个GuessNumFrame类<br>同时还用了一个封装好的本地工具类：LocationUtil<br>注意代码中图片地址非确定，改为自己的</p></blockquote><p>GuessNumFrame类:</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">top<span class="token punctuation">.</span>handsomelv<span class="token punctuation">.</span>study<span class="token punctuation">.</span>test</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>awt<span class="token punctuation">.</span></span><span class="token class-name">Color</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>awt<span class="token punctuation">.</span>event<span class="token punctuation">.</span></span><span class="token class-name">ActionEvent</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>awt<span class="token punctuation">.</span>event<span class="token punctuation">.</span></span><span class="token class-name">ActionListener</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Random</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>swing<span class="token punctuation">.</span></span><span class="token class-name">ImageIcon</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>swing<span class="token punctuation">.</span></span><span class="token class-name">JButton</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>swing<span class="token punctuation">.</span></span><span class="token class-name">JFrame</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>swing<span class="token punctuation">.</span></span><span class="token class-name">JLabel</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>swing<span class="token punctuation">.</span></span><span class="token class-name">JOptionPane</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>swing<span class="token punctuation">.</span></span><span class="token class-name">JTextArea</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">top<span class="token punctuation">.</span>handsomelv<span class="token punctuation">.</span>study<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">LocationUtil</span></span><span class="token punctuation">;</span><span class="token comment">/** *  * &lt;p>项目名称: GuessNumGame &lt;/p>  * &lt;p>文件名称: GuessNumFrame &lt;/p>  * &lt;p>创建时间: 2021/7/15/12:56 &lt;/p> * @author &lt;a href="mail to: handsomelvv@qq.com">HANDSOME_LV&lt;/a> * @version v1.0 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GuessNumFrame</span> <span class="token keyword">extends</span> <span class="token class-name">JFrame</span> <span class="token keyword">implements</span> <span class="token class-name">ActionListener</span> <span class="token punctuation">&#123;</span><span class="token comment">//生成随机数</span><span class="token class-name">Random</span> rand <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//用Random产生随机数</span><span class="token keyword">int</span> randNum <span class="token operator">=</span> rand<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//接收随机数randNum在[0,100)内</span><span class="token comment">//添加按钮</span><span class="token keyword">private</span> <span class="token class-name">JButton</span> close<span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token class-name">JButton</span> go<span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token class-name">JButton</span> again<span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token class-name">JButton</span> tel<span class="token punctuation">;</span><span class="token comment">//添加文本输入输出框</span><span class="token keyword">private</span> <span class="token class-name">JTextArea</span> getnum<span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token class-name">JTextArea</span> outnum<span class="token punctuation">;</span><span class="token comment">//重写构造器</span><span class="token keyword">public</span> <span class="token class-name">GuessNumFrame</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"构造器"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">JLabel</span> mainJLabel <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JLabel</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ImageIcon</span><span class="token punctuation">(</span><span class="token string">"image/case02/background.jpg"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setIconImage</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ImageIcon</span><span class="token punctuation">(</span><span class="token string">"image/case02/icon.jpg"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getImage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setUndecorated</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>mainJLabel<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//设置界面可以跟随鼠标移动</span><span class="token class-name">LocationUtil</span> util <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LocationUtil</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setBounds</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span><span class="token number">50</span><span class="token punctuation">,</span><span class="token number">400</span><span class="token punctuation">,</span><span class="token number">300</span><span class="token punctuation">)</span><span class="token punctuation">;</span>close <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JButton</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ImageIcon</span><span class="token punctuation">(</span><span class="token string">"image/case02/close.png"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>close<span class="token punctuation">.</span><span class="token function">setContentAreaFilled</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>close<span class="token punctuation">.</span><span class="token function">setBorderPainted</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>close<span class="token punctuation">.</span><span class="token function">setBounds</span><span class="token punctuation">(</span><span class="token number">365</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">24</span><span class="token punctuation">,</span><span class="token number">23</span><span class="token punctuation">)</span><span class="token punctuation">;</span>mainJLabel<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>close<span class="token punctuation">)</span><span class="token punctuation">;</span>go <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JButton</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ImageIcon</span><span class="token punctuation">(</span><span class="token string">"image/case02/go.png"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>go<span class="token punctuation">.</span><span class="token function">setContentAreaFilled</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>go<span class="token punctuation">.</span><span class="token function">setBorderPainted</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>go<span class="token punctuation">.</span><span class="token function">setBounds</span><span class="token punctuation">(</span><span class="token number">295</span><span class="token punctuation">,</span><span class="token number">123</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>mainJLabel<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>go<span class="token punctuation">)</span><span class="token punctuation">;</span>again <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JButton</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ImageIcon</span><span class="token punctuation">(</span><span class="token string">"image/case02/again_press.png"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>again<span class="token punctuation">.</span><span class="token function">setContentAreaFilled</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>again<span class="token punctuation">.</span><span class="token function">setBorderPainted</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>again<span class="token punctuation">.</span><span class="token function">setBounds</span><span class="token punctuation">(</span><span class="token number">233</span><span class="token punctuation">,</span><span class="token number">164</span><span class="token punctuation">,</span><span class="token number">80</span><span class="token punctuation">,</span><span class="token number">26</span><span class="token punctuation">)</span><span class="token punctuation">;</span>mainJLabel<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>again<span class="token punctuation">)</span><span class="token punctuation">;</span>tel <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JButton</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ImageIcon</span><span class="token punctuation">(</span><span class="token string">"image/case02/tel_press.png"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>tel<span class="token punctuation">.</span><span class="token function">setContentAreaFilled</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>tel<span class="token punctuation">.</span><span class="token function">setBorderPainted</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>tel<span class="token punctuation">.</span><span class="token function">setBounds</span><span class="token punctuation">(</span><span class="token number">88</span><span class="token punctuation">,</span><span class="token number">164</span><span class="token punctuation">,</span><span class="token number">80</span><span class="token punctuation">,</span><span class="token number">26</span><span class="token punctuation">)</span><span class="token punctuation">;</span>mainJLabel<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>tel<span class="token punctuation">)</span><span class="token punctuation">;</span>getnum <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JTextArea</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>getnum<span class="token punctuation">.</span><span class="token function">setBackground</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Color</span><span class="token punctuation">(</span><span class="token number">240</span><span class="token punctuation">,</span><span class="token number">173</span><span class="token punctuation">,</span><span class="token number">43</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>getnum<span class="token punctuation">.</span><span class="token function">setBounds</span><span class="token punctuation">(</span><span class="token number">206</span><span class="token punctuation">,</span><span class="token number">126</span><span class="token punctuation">,</span> <span class="token number">39</span><span class="token punctuation">,</span> <span class="token number">17</span><span class="token punctuation">)</span><span class="token punctuation">;</span>mainJLabel<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>getnum<span class="token punctuation">)</span><span class="token punctuation">;</span>outnum <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JTextArea</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>outnum<span class="token punctuation">.</span><span class="token function">setBackground</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Color</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">,</span><span class="token number">191</span><span class="token punctuation">,</span><span class="token number">31</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>outnum<span class="token punctuation">.</span><span class="token function">setBounds</span><span class="token punctuation">(</span><span class="token number">86</span><span class="token punctuation">,</span><span class="token number">218</span><span class="token punctuation">,</span> <span class="token number">230</span><span class="token punctuation">,</span> <span class="token number">60</span><span class="token punctuation">)</span><span class="token punctuation">;</span>mainJLabel<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>outnum<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//添加事件</span>close<span class="token punctuation">.</span><span class="token function">addActionListener</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>go<span class="token punctuation">.</span><span class="token function">addActionListener</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>again<span class="token punctuation">.</span><span class="token function">addActionListener</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>tel<span class="token punctuation">.</span><span class="token function">addActionListener</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setVisible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setDefaultCloseOperation</span><span class="token punctuation">(</span>EXIT_ON_CLOSE<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">actionPerformed</span><span class="token punctuation">(</span><span class="token class-name">ActionEvent</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">==</span>close<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"关闭游戏"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">==</span>go<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"确定答案"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>getnum<span class="token punctuation">.</span><span class="token function">getText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">==</span>randNum<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">JOptionPane</span><span class="token punctuation">.</span><span class="token function">showMessageDialog</span><span class="token punctuation">(</span><span class="token class-name">GuessNumFrame</span><span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">,</span><span class="token string">"恭喜你答对了，数字是"</span><span class="token operator">+</span>randNum<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>getnum<span class="token punctuation">.</span><span class="token function">getText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">></span>randNum<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"猜的有点大"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>outnum<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span><span class="token string">"猜的有点大"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>getnum<span class="token punctuation">.</span><span class="token function">getText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&lt;</span>randNum<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"猜的有点小"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>outnum<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span><span class="token string">"猜的有点小"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">==</span>again<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"再来一次"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>getnum<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>outnum<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>randNum <span class="token operator">=</span> rand<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">==</span>tel<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"告诉我吧"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"数字是"</span><span class="token operator">+</span>randNum<span class="token punctuation">)</span><span class="token punctuation">;</span>outnum<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span><span class="token string">"数字是"</span><span class="token operator">+</span>randNum<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">GuessNumFrame</span> frame <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GuessNumFrame</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>LocationUtil 类:</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">top<span class="token punctuation">.</span>handsomelv<span class="token punctuation">.</span>study<span class="token punctuation">.</span>util</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>awt<span class="token punctuation">.</span>event<span class="token punctuation">.</span></span><span class="token class-name">MouseAdapter</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>awt<span class="token punctuation">.</span>event<span class="token punctuation">.</span></span><span class="token class-name">MouseEvent</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>awt<span class="token punctuation">.</span>event<span class="token punctuation">.</span></span><span class="token class-name">MouseMotionAdapter</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>swing<span class="token punctuation">.</span></span><span class="token class-name">JFrame</span></span><span class="token punctuation">;</span><span class="token comment">/* * 封装一个工具类 * 设计模式的一种：高内聚，低耦合 * 1）点击窗口的时候，输出点击的位置x,y * 2）鼠标操作，窗体跟随鼠标移动 *  */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LocationUtil</span> <span class="token punctuation">&#123;</span><span class="token class-name">JFrame</span> fram<span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token keyword">boolean</span> isDraging <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token keyword">int</span> xx<span class="token punctuation">,</span>yy<span class="token punctuation">;</span><span class="token comment">//重写构造器，添加形参</span><span class="token keyword">public</span> <span class="token class-name">LocationUtil</span><span class="token punctuation">(</span><span class="token class-name">JFrame</span> frame<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>fram <span class="token operator">=</span>frame<span class="token punctuation">;</span><span class="token comment">//监听事件</span>fram<span class="token punctuation">.</span><span class="token function">addMouseListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MouseAdapter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">mousePressed</span><span class="token punctuation">(</span><span class="token class-name">MouseEvent</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">mousePressed</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>isDraging <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>xx <span class="token operator">=</span> e<span class="token punctuation">.</span><span class="token function">getX</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>yy <span class="token operator">=</span> e<span class="token punctuation">.</span><span class="token function">getY</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"=="</span><span class="token operator">+</span>xx<span class="token operator">+</span><span class="token string">":"</span><span class="token operator">+</span>yy<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">mouseReleased</span><span class="token punctuation">(</span><span class="token class-name">MouseEvent</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">mouseReleased</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>isDraging <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>fram<span class="token punctuation">.</span><span class="token function">addMouseMotionListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MouseMotionAdapter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">mouseDragged</span><span class="token punctuation">(</span><span class="token class-name">MouseEvent</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">mouseDragged</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>isDraging<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">int</span> left <span class="token operator">=</span> fram<span class="token punctuation">.</span><span class="token function">getLocation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>x<span class="token punctuation">;</span><span class="token keyword">int</span> top <span class="token operator">=</span> fram<span class="token punctuation">.</span><span class="token function">getLocation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>y<span class="token punctuation">;</span>fram<span class="token punctuation">.</span><span class="token function">setLocation</span><span class="token punctuation">(</span>left<span class="token operator">+</span>e<span class="token punctuation">.</span><span class="token function">getX</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>top<span class="token operator">+</span>e<span class="token punctuation">.</span><span class="token function">getY</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h2 id="效果结果图"><a href="#效果结果图" class="headerlink" title="效果结果图"></a>效果结果图</h2><p><img src="/images/posts/Java_Learn/university_2_summ_holid/GuessNumGame/%E6%95%88%E6%9E%9C%E7%BB%93%E6%9E%9C%E5%9B%BE.png" alt="效果结果图" loading="lazy"></p>]]></content>
      
      
      <categories>
          
          <category> Out_Learn </category>
          
          <category> _Play </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java复习第二弹</title>
      <link href="/2021/07/11/Java_Learn/Part2/"/>
      <url>/2021/07/11/Java_Learn/Part2/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><img src="https://www.w3cschool.cn/attachments/image/20161101/1477969977993875.png" alt="java" loading="lazy"></p><span id="more"></span><h2 id="基本数据类型之间的运算规则"><a href="#基本数据类型之间的运算规则" class="headerlink" title="基本数据类型之间的运算规则:"></a>基本数据类型之间的运算规则:</h2><blockquote><p>前提:这里讨论只是7种基本数据类型变量间的运算。不包含boolean类型的。<br>1．自动类型提升:<br>结论:当容量小的数据类型的变量与容量大的数据类型的变量做运算时，结果自动提升为容量byte . char . short –&gt; int –&gt; long –&gt;float –&gt; double<br>特别的:当byte、char、 short三种类型的变量做运算时，结果为int型<br>说明:此时的容量大小指的是，表示数的范围的大和小。比如: float容量要大于long的容量<br>2.强制类型转换:<br>自动类型转换的逆过程，将容量大的数据类型转换为容量小的数据类型。使用时要加上强制转换符:()，但可能造成精度降低或溢出,格外要注意<br>通常，字符串不能直接转换为基本类型，但通过基本类型对应的包装类则可以实现把字符串转换成基本类型。<br>如: String a =“43”; int i = Integer.parselnt(a);&gt;boolean类型不可以转换为其它的数据类型。</p></blockquote><h2 id="String类型变量的使用"><a href="#String类型变量的使用" class="headerlink" title="String类型变量的使用"></a>String类型变量的使用</h2><blockquote><ol><li>String属于引用数据类型,翻译为:字符串<br>2．声明string类型变量时,使用一对””</li><li>String可以和8种基本数据类型变量做运算，且运算只能是连接运算:+4．运算的结果仍然是String类型</li></ol></blockquote><h2 id="运算表格"><a href="#运算表格" class="headerlink" title="运算表格"></a>运算表格</h2><table><thead><tr><th align="center">运算符</th><th align="center">运算</th><th align="center">范例</th><th align="center">结果</th></tr></thead><tbody><tr><td align="center">+</td><td align="center">正号</td><td align="center">+3</td><td align="center">3</td></tr><tr><td align="center">-</td><td align="center">负号</td><td align="center">b=4;-b</td><td align="center">-4</td></tr><tr><td align="center">+</td><td align="center">加</td><td align="center">5+5</td><td align="center">10</td></tr><tr><td align="center">-</td><td align="center">减</td><td align="center">6-4</td><td align="center">2</td></tr><tr><td align="center">*</td><td align="center">乘</td><td align="center">3*4</td><td align="center">12</td></tr><tr><td align="center">/</td><td align="center">除</td><td align="center">5/5</td><td align="center">1</td></tr><tr><td align="center">%</td><td align="center">取模(取余)</td><td align="center">7%5</td><td align="center">2</td></tr><tr><td align="center">++</td><td align="center">自增(前):先运算后取值</td><td align="center">a=2,b=++a;</td><td align="center">a=3;b=3</td></tr><tr><td align="center">++</td><td align="center">自增(后):先取值后运算</td><td align="center">a=2;b=a++;</td><td align="center">a=3;b=2</td></tr><tr><td align="center">–</td><td align="center">自减(前):先运算后取值</td><td align="center">a=2;b=–a</td><td align="center">a=1;b=1</td></tr><tr><td align="center">–</td><td align="center">自减(后):先取值后运算</td><td align="center">a=2;b=a–</td><td align="center">a=1;b=2</td></tr><tr><td align="center">+</td><td align="center">字符串连接</td><td align="center">“He””+ llo”</td><td align="center">“Hello”</td></tr></tbody></table><h2 id="运算符号"><a href="#运算符号" class="headerlink" title="运算符号"></a>运算符号</h2><blockquote><p>当“=”两侧数据类型不一致时，可以使用自动类取转换或使用强制类型转换原则进行处理。<br>支持连续赋值。<br>扩展赋值运算符:+=，-=，*=，/=，%=</p></blockquote><h2 id="比较运算符"><a href="#比较运算符" class="headerlink" title="比较运算符"></a>比较运算符</h2><table><thead><tr><th align="center">运算符</th><th align="center">运算</th><th align="center">范例</th><th align="center">结果</th></tr></thead><tbody><tr><td align="center">==</td><td align="center">相等于</td><td align="center">4==3</td><td align="center">false</td></tr><tr><td align="center">!=</td><td align="center">不等于</td><td align="center">4!=3</td><td align="center">true</td></tr><tr><td align="center">&lt;</td><td align="center">小于</td><td align="center">4&lt;3</td><td align="center">false</td></tr><tr><td align="center">&gt;</td><td align="center">大于</td><td align="center">4&gt;3</td><td align="center">true</td></tr><tr><td align="center">&lt;=</td><td align="center">小于等于</td><td align="center">4&lt;=3</td><td align="center">false</td></tr><tr><td align="center">&gt;=</td><td align="center">大于等于</td><td align="center">4&gt;=3</td><td align="center">true</td></tr><tr><td align="center">instanceof</td><td align="center">检查是否是类的对象</td><td align="center">“Hello”instanceof String</td><td align="center">true</td></tr></tbody></table><blockquote><p>比较运算符的结果都是boolean型，也就是要么是true，要么是false。<br>比较运算符“==”不能误写成“=”。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Out_Learn </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java复习第一弹</title>
      <link href="/2021/07/08/Java_Learn/Part1/"/>
      <url>/2021/07/08/Java_Learn/Part1/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><img src="https://www.w3cschool.cn/attachments/image/20161101/1477969977993875.png" alt="java" loading="lazy"></p><span id="more"></span><h2 id="第一个java程序"><a href="#第一个java程序" class="headerlink" title="第一个java程序"></a>第一个java程序</h2><p>初学一门编程语言当然先学的是Hello World!<br>代码如下：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Hello</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Hello world!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h2 id="注释种类"><a href="#注释种类" class="headerlink" title="注释种类"></a>注释种类</h2><p>java的注释和C语言极其相似<br>单行注释：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Hello world!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//Hello world 输出语句</span></code></pre><p>多行注释：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">/*以下为Hello world 源程序*/</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Hello</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Hello world!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>文档注释（Java特有)&gt;格式:</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">/**@author指定java程序的作者@version指定源文件的版本*/</span></code></pre><p>注释内容可以被JDK提供的工具 javadoc所解析，生成一套以网页文件形式体现的该程序的说明文档。</p><h2 id="标识符及命名规则"><a href="#标识符及命名规则" class="headerlink" title="标识符及命名规则"></a>标识符及命名规则</h2><p>标识符:</p><blockquote><p>Java对各种变量、方法和类等要素命名时使用的字符序列称为标识符&gt;技巧:凡是自己可以起名字的地方都叫标识符。<br>定义合法标识符规则:<br>由26个英文字母大小写，0-9，_或$组成≥数字不可以开头。<br>不可以使用关键字和保留字，但能包含关键字和保留字。&gt;Java中严格区分大小写，长度无限制。<br>标识符不能包含空格。</p></blockquote><h2 id="Java中的名称命名规范"><a href="#Java中的名称命名规范" class="headerlink" title="Java中的名称命名规范"></a>Java中的名称命名规范</h2><blockquote><p>包名:多单词组成时所有字母都小写:xxxyyyzzz<br>类名、接口名:多单词组成时，所有单词的首字母大写:XxxYyyZzz<br>变量名、方法名:多单词组成时，第一个单词首字母小写，第二个单词开始每个单词首字母大写:xxxYyyZzz<br>常量名:所有字母都大写。多单词时每个单词用下划线连接:XXX_YYY_zzz</p></blockquote><div class="warning"><blockquote><p>注意1。在起名字时，为了提高阅读性，要尽量有意义，“见名知意”。<br>注意2、 java采用unicode字符集，因此标识符也可以使用汉字声明，但是不建议使用。</p></blockquote></div><h2 id="变量数据类型"><a href="#变量数据类型" class="headerlink" title="变量数据类型"></a>变量数据类型</h2><p>Java定义的数据类型<br>一、变量按照数据类型来分:<br>基本数据类型:<br>整型:byte \ short \ int \ long浮点型:float \ double<br>字符型:char<br>布尔型:boolean<br>引用数据类型:<br>类(class)<br>接口(interface)数组(array)<br>二、变量在类中声明的位置:<br>成员变量vs局部变量</p>]]></content>
      
      
      <categories>
          
          <category> Out_Learn </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>动态规划——最大字段和</title>
      <link href="/2021/05/07/C_C++/algorithm/dongtai/sum_array/"/>
      <url>/2021/05/07/C_C++/algorithm/dongtai/sum_array/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="【问题描述】"><a href="#【问题描述】" class="headerlink" title="【问题描述】"></a>【问题描述】</h2><p>给定由n个整数组成的序列a1,a2,…,an，求该序列子段和的最大值。当所有整数均为负值时定义其最大子段和为0。<br>依此定义， 例如， 当(a1,a2, a3, a4, a5,a6)=(-2, 11, -4, 13, -5, -2)时，最大子段和为20。</p><span id="more"></span><h2 id="【问题分析】"><a href="#【问题分析】" class="headerlink" title="【问题分析】"></a>【问题分析】</h2><p><img src="/images/posts/C_C++/algorithm/dongtai/sum_array/%E5%AD%90%E9%97%AE%E9%A2%98%E7%95%8C%E5%AE%9A.png" alt="子问题界定" loading="lazy"><br><img src="/images/posts/C_C++/algorithm/dongtai/sum_array/%E9%80%92%E5%BD%92%E6%96%B9%E7%A8%8B.png" alt="递归方程" loading="lazy"></p><h2 id="【代码实现】"><a href="#【代码实现】" class="headerlink" title="【代码实现】"></a>【代码实现】</h2><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> <span class="token function">get_max</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> <span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">;</span><span class="token comment">//输入数组的个数</span><span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token number">1000</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//记录所输入的数组</span><span class="token keyword">int</span> i<span class="token punctuation">,</span>max<span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"输入数组的长度："</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"请输入数组元素：\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>max <span class="token operator">=</span> <span class="token function">get_max</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"该数组序列最大字段和为：\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> max<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">get_max</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> <span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> c<span class="token punctuation">[</span><span class="token number">1000</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> i<span class="token punctuation">;</span><span class="token keyword">int</span> max <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>c<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//核心算法求最大子树和并记录在max中</span><span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>c<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span>c<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> c<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">else</span>c<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>c<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">></span>max<span class="token punctuation">)</span>max <span class="token operator">=</span> c<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> max<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h2 id="【运行结果】"><a href="#【运行结果】" class="headerlink" title="【运行结果】"></a>【运行结果】</h2><blockquote><p>运行结果仅供参考</p></blockquote><p><img src="/images/posts/C_C++/algorithm/dongtai/sum_array/%E6%9C%80%E5%A4%A7%E5%AD%97%E6%AE%B5%E5%92%8C.png" alt="最大字段和" loading="lazy"></p>]]></content>
      
      
      <categories>
          
          <category> AUST_Learn </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>动态规划——最大公共子序列</title>
      <link href="/2021/05/07/C_C++/algorithm/dongtai/max_array/"/>
      <url>/2021/05/07/C_C++/algorithm/dongtai/max_array/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="【问题描述】"><a href="#【问题描述】" class="headerlink" title="【问题描述】"></a>【问题描述】</h2><p>字符序列的子序列是指从给定字符序列中随意地（不一定连续）去掉若干个字符（可能一个也不去掉）后所形成的字符序列。<br>  给定两个字符序列A和B，如果字符序列Z既是A的子序列，又是B的子序列，则称序列Z是A和B的公共子序列。该问题是求两序列A和B的最长公共子序列（LCS）。</p><span id="more"></span><h2 id="【问题分析】"><a href="#【问题分析】" class="headerlink" title="【问题分析】"></a>【问题分析】</h2><p>b[i][j]为子序列（x0，x1，…，xi-1）和（y0，y1，…，yj-1）的最长公共子序列的长度。</p><h2 id="【解决思路】"><a href="#【解决思路】" class="headerlink" title="【解决思路】"></a>【解决思路】</h2><p>引进一个二维数组c[][]，用c[i][j]记录X[i]与Y[j] 的LCS 的长度，b[i][j]记录c[i][j]是通过哪一个子问题的值求得的，以决定搜索的方向。<br>我们是自底向上进行递推计算，那么在计算c[i,j]之前，c[i-1][j-1]，c[i-1][j]与c[i][j-1]均已计算出来。此时我们根据X[i] = Y[j]还是X[i] != Y[j]，就可以计算出c[i][j]。<br>递归方程为：<img src="/images/posts/C_C++/algorithm/dongtai/max_array/%E9%80%92%E5%BD%92.png" alt="递归.PNG" loading="lazy"><br>回溯输出最长公共子序列过程：<img src="/images/posts/C_C++/algorithm/dongtai/max_array/%E5%9B%9E%E6%BA%AF.png" alt="回溯.PNG" loading="lazy"></p><h2 id="【代码实现】"><a href="#【代码实现】" class="headerlink" title="【代码实现】"></a>【代码实现】</h2><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">N</span> <span class="token expression"><span class="token number">100</span></span></span><span class="token keyword">void</span> <span class="token function">LCSLength</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>x<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>y<span class="token punctuation">,</span> <span class="token keyword">int</span> m<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">,</span> <span class="token keyword">int</span> c<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> i<span class="token punctuation">,</span> j<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> m<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> c<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> c<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">&lt;=</span> m<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>x<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> y<span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                c<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> c<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>                b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>c<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">>=</span> c<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                c<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> c<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">else</span><span class="token punctuation">&#123;</span>                c<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> c<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">PrintLCS</span><span class="token punctuation">(</span><span class="token keyword">int</span> b<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>x<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">int</span> j<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> j <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">PrintLCS</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> x<span class="token punctuation">,</span> i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%c "</span><span class="token punctuation">,</span> x<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span>    <span class="token function">PrintLCS</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> x<span class="token punctuation">,</span> i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">else</span>    <span class="token function">PrintLCS</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> x<span class="token punctuation">,</span> i<span class="token punctuation">,</span> j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">char</span> x<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span>y<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment">//char x[N] = &#123;"ABCBDAB"&#125;;</span>    <span class="token comment">//char y[N] = &#123;"BDCABA"&#125;;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"分别输入字符序列x和y：\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> b<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> c<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> m<span class="token punctuation">,</span> n<span class="token punctuation">;</span>    m <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>    n <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">LCSLength</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> m<span class="token punctuation">,</span> n<span class="token punctuation">,</span> c<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"最大公共子序列为：\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">PrintLCS</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> x<span class="token punctuation">,</span> m<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h2 id="【运行结果】"><a href="#【运行结果】" class="headerlink" title="【运行结果】"></a>【运行结果】</h2><blockquote><p>运行结果仅供参考</p></blockquote><p><img src="/images/posts/C_C++/algorithm/dongtai/max_array/%E8%BF%90%E8%A1%8C%E7%BB%93%E6%9E%9C.png" alt="运行结果" loading="lazy"></p>]]></content>
      
      
      <categories>
          
          <category> AUST_Learn </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>动态规划——收花生</title>
      <link href="/2021/05/01/C_C++/algorithm/dongtai/peanuts/"/>
      <url>/2021/05/01/C_C++/algorithm/dongtai/peanuts/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="【问题描述】收获花生问题"><a href="#【问题描述】收获花生问题" class="headerlink" title="【问题描述】收获花生问题"></a>【问题描述】收获花生问题</h3><p>咚咚想摘点花生送给她喜欢的米老鼠。她来到一片有网格状道路的矩形花生地(如下图)，从西北角进去，东南角出来。地里每个道路的交叉点上都有种着一株花生苗，上面有若干颗花生，经过一株花生苗就能摘走该它上面所有的花生。咚咚只能向东或向南走，不能向西或向北走。问咚咚最多能够摘到多少颗花生。<img src="/images/posts/C_C++/algorithm/dongtai/peanuts/tian.jpg" alt="tian" loading="lazy"></p><span id="more"></span><h4 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h4><p>第一行是一个整数T，代表一共有多少组数据。1&lt;=T &lt;= 100<br>接下来是T组数据。<br>每组数据的第一行是两个整数，分别代表花生苗的行数R和列数 C ( 1&lt;= R,C &lt;=100)<br>每组数据的接下来R行数据，从北向南依次描述每行花生苗的情况。每行数据有 C 个整数，按从西向东的顺序描述了该行每株花生苗上的花生数目 M ( 0&lt;= M &lt;= 1000)。</p><h4 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h4><p>对每组输入数据，输出一行，内容为咚咚能摘到得最多的花生颗数。</p><h3 id="【问题分析】"><a href="#【问题分析】" class="headerlink" title="【问题分析】"></a>【问题分析】</h3><p>这道题要用递推，根据题目，只能向东或者向南走，不能向西或向北走。所以这道题不用判断是不是访问过，直接选取最大的经过的数来代替，然后把最后一个数输出就大功告成了。以下是具体思路图片。<img src="/images/posts/C_C++/algorithm/dongtai/peanuts/tgg.png" alt="tgg" loading="lazy"></p><h3 id="【代码实现】"><a href="#【代码实现】" class="headerlink" title="【代码实现】"></a>【代码实现】</h3><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> <span class="token function">max</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span><span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> a<span class="token operator">></span>b<span class="token operator">?</span>a<span class="token operator">:</span>b<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> num<span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"读入数据的次数："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//读入数据的数量</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> t<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>t<span class="token operator">&lt;=</span>num<span class="token punctuation">;</span>t<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//循环t次</span>        <span class="token keyword">int</span> x<span class="token punctuation">,</span>y<span class="token punctuation">,</span>a<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"输入数矩的规格："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>x<span class="token punctuation">,</span><span class="token operator">&amp;</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//读入数矩的大小</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"输入花生苗上花生粒的数量：\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>x<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>y<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>                <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//读入</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>x<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>y<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>                a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">+=</span><span class="token function">max</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//递归查找最大</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"最终获得%d颗花生\n"</span><span class="token punctuation">,</span>a<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//输出最大的结果</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="【输出样例】"><a href="#【输出样例】" class="headerlink" title="【输出样例】"></a>【输出样例】</h3><blockquote><p>输出结果仅供参考</p></blockquote><p><img src="/images/posts/C_C++/algorithm/dongtai/peanuts/%E7%BB%93%E6%9E%9C.png" alt="结果" loading="lazy"></p>]]></content>
      
      
      <categories>
          
          <category> AUST_Learn </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>动态规划——数塔问题</title>
      <link href="/2021/05/01/C_C++/algorithm/dongtai/pyramid%20of%20numbers/"/>
      <url>/2021/05/01/C_C++/algorithm/dongtai/pyramid%20of%20numbers/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="【问题描述】"><a href="#【问题描述】" class="headerlink" title="【问题描述】"></a>【问题描述】</h3><p>有如下图所示的一个数塔，从顶部出发，在每一结点可以选择向左走或是向右走，一直走到底层，要求找出一条路径，使路径上的数值和最大。<br><img src="/images/posts/C_C++/algorithm/dongtai/pyramidofnumbers/%E6%95%B0%E5%A1%94.png" alt="数塔" loading="lazy"></p><span id="more"></span><h3 id="【问题分析】"><a href="#【问题分析】" class="headerlink" title="【问题分析】"></a>【问题分析】</h3><p>有一个r行的数塔，数塔上有若干数字。问从数塔的最高点到底部，在所有的路径中，经过的数字的和最大为多少？</p><pre class="language-bash" data-language="bash"><code class="language-bash">        <span class="token number">9</span>      <span class="token number">12</span> <span class="token number">15</span>    <span class="token number">10</span>  <span class="token number">6</span>  <span class="token number">8</span>  <span class="token number">2</span>  <span class="token number">18</span>  <span class="token number">9</span>   <span class="token number">5</span><span class="token number">19</span>  <span class="token number">7</span>  <span class="token number">10</span>  <span class="token number">4</span>  <span class="token number">16</span></code></pre><p>如上图，是一个5行的数塔，其中9—12—10—18—10的路径经过数字和最大，为59。<br>1.2 解法思路<br>面对数塔问题，使用贪心算法显然是行不通的，比如给的样例，如果使用贪心算法，那选择的路径应当是7—8—1—7—5，其经过数字和只有28，并不是最大。而用深搜DFS很容易算出时间复杂度为 O2^n （因为每个数字都有向左下和右下两种选择），行数一多必定超时。</p><p>所以，数塔问题需要使用动态规划算法。</p><p>我们可以从上往下遍历。</p><p>可以发现，要想经过一个数字，只能从左上角或右上角的数字往下到达。</p><p>所以显然，经过任一数字A时，路径所经过的数字最大和——是这个数字A左上方的数字B以及右上方的数字C两个数字中，所能达到的数字最大和中较大的那一个，再加上该数字A。</p><p>故状态转移方程为： dp[i][j]=max(dp[i-1][j],dp[i-1][j-1])+num[i][j] </p><p>其中i，j表示行数和列数，dp表示储存的最大和，num表示位置上的数字。</p><p> dp[i-1][j] 表示左上角， dp[i-1][j-1] 表示右上角。</p><p>以样例来说明：在经过第三行的数字1时，我们先看它左上角的数字12和右上角的数字15其能达到的最大和。12显然只有9—12一条路径，故最大和是21；15显然也只有9—15一条路径，其最大和是24；两者中较大的是24，故经过6所能达到的最大和是24+6=30。</p><p>这样一步步向下遍历，最后经过每一个位置所能达到的最大和都求出来了，只要从最底下的一行里寻找最大值并输出即可。</p><p>我们也可以从下往上遍历。</p><p>一条路径不管是从上往下走还是从下往上走，其经过的数字和都是一样的，所以这题完全可以变成求——从最底层到最高点所经过的最大数字和。</p><p>其写法与顺序遍历是一样的，只是状态转移时，变成从该数字的左下角和右下角来取max了。逆序遍历的写法相比于顺序遍历优点在于：少了最后一步求最后一行max的过程，可以直接输出最高点所储存的值。</p><h3 id="【代码实现】"><a href="#【代码实现】" class="headerlink" title="【代码实现】"></a>【代码实现】</h3><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> num<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//用于储存数塔每个位置的数字</span><span class="token keyword">int</span> dp<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//用于储存经过数塔每个位置所能达到的最大和</span><span class="token keyword">int</span> <span class="token function">max</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span><span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> a<span class="token operator">></span>b<span class="token operator">?</span>a<span class="token operator">:</span>b<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> r<span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"输入数塔行数："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//输入数塔行数</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"输入数塔数据：\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>r<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>i<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>num<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//输入数塔数据，注意i和j要从1开始，防止数组越界</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>r<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token comment">//共计r行</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>i<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token comment">//每行有j个数字</span>            dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span>dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">+</span>num<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment">//经过该数字的最大和，为左上角和右上角中的max，再加上该数字</span>    <span class="token keyword">int</span> ans<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>r<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>        ans<span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>ans<span class="token punctuation">,</span>dp<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//从最后一行中找到最大数</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"数塔路径和值最大为：%d\n"</span><span class="token punctuation">,</span>ans<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//就是答案</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="【运行结果】"><a href="#【运行结果】" class="headerlink" title="【运行结果】"></a>【运行结果】</h3><blockquote><p>运行结果仅供参考</p></blockquote><p><img src="/images/posts/C_C++/algorithm/dongtai/pyramidofnumbers/%E6%95%B0%E5%A1%94%E7%BB%93%E6%9E%9C.png" alt="数塔结果" loading="lazy"></p>]]></content>
      
      
      <categories>
          
          <category> AUST_Learn </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>云端空调</title>
      <link href="/2021/04/28/Play/air-conditioner/"/>
      <url>/2021/04/28/Play/air-conditioner/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><iframe height="750" src="https://ac.yunyoujun.cn/"></iframe><span id="more"></span><blockquote><p>本空调直接转载于<a href="https://ac.yunyoujun.cn/">云游君大佬的空调</a><br>本空调功能完善，就是没有风</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Play </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Other </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据库常用指令</title>
      <link href="/2021/04/23/Database_Learn/sql/"/>
      <url>/2021/04/23/Database_Learn/sql/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><img src="/images/posts/Database_Learn/sql/mysql.png" alt="mysql" loading="lazy"><br>MYSQL的一些指令，省的自己记不住🙃🙃🙃</p><span id="more"></span><p>MYSQL常用指令</p><h3 id="连接MYSQL"><a href="#连接MYSQL" class="headerlink" title="连接MYSQL"></a>连接MYSQL</h3><p>1、连接到本机上的MySQ：<br>首先在打开cmd窗口，输入mysql -uroot -p ，然后空格进入MySQL控制台，MySQL的提示符是： mysql&gt;。</p><pre class="language-sql" data-language="sql"><code class="language-sql">mysql <span class="token operator">-</span>uroot <span class="token operator">-</span>p <span class="token comment">/*如果刚安装好MySQL，root是没有密码的*/</span></code></pre><p>2、连接到远程主机上的MySQL：<br>假设远程主机的IP为：192.168.206.100，用户名为root,密码为12345678。</p><pre class="language-sql" data-language="sql"><code class="language-sql">mysql<span class="token operator">></span> mysql <span class="token operator">-</span>h192<span class="token punctuation">.</span><span class="token number">168.206</span><span class="token number">.100</span> <span class="token operator">-</span>uroot <span class="token operator">-</span>p12345678<span class="token punctuation">;</span> <span class="token comment">/*u与root可以不加空格*/</span></code></pre><p>3、退出MySQL命令： exit 或 quit（回车）：</p><pre class="language-sql" data-language="sql"><code class="language-sql">mysql<span class="token operator">></span> <span class="token keyword">exit</span><span class="token operator">/</span>quit<span class="token punctuation">;</span></code></pre><h3 id="用户设置"><a href="#用户设置" class="headerlink" title="用户设置"></a>用户设置</h3><h4 id="MySQL–修改密码"><a href="#MySQL–修改密码" class="headerlink" title="MySQL–修改密码"></a>MySQL–修改密码</h4><p>1、root密码为空时，设置root密码：</p><pre class="language-sql" data-language="sql"><code class="language-sql">mysql<span class="token operator">></span> mysqladmin <span class="token operator">-</span>uroot newpassword<span class="token punctuation">;</span>   <span class="token comment">-- 因为开始时root没有密码，所以-p旧密码 可以省略</span></code></pre><p>2、使用 sqladmin 命令修改密码：</p><pre class="language-sql" data-language="sql"><code class="language-sql">mysql<span class="token operator">></span> mysqladmin <span class="token operator">-</span>uroot <span class="token operator">-</span>p123456 password <span class="token number">12345678</span><span class="token punctuation">;</span></code></pre><p>3、使用set passsword命令修改密码：</p><pre class="language-sql" data-language="sql"><code class="language-sql">mysql<span class="token operator">></span> <span class="token keyword">set</span> password <span class="token keyword">for</span> 用户名<span class="token variable">@localhost</span> <span class="token operator">=</span> password<span class="token punctuation">(</span><span class="token string">'新密码'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>4、忘记root密码情况下：<br>    ①关闭正在运行的MySQL服务。<br>    ②打开DOS窗口，转到mysql\bin目录。<br>    ③输入mysqld –skip-grant-tables 回车。–skip-grant-tables 的意思是启动MySQL服务的时候跳过权限表认证。<br>    ④再开一个DOS窗口（因为刚才那个DOS窗口已经不能动了），输入mysql回车，如果成功，将出现MySQL提示符 &gt;。<br>    ⑤连接权限数据库： use mysql; 。<br>    ⑥改密码：update user set password=password(“新密码”) where user=”root”;（别忘了最后加分号） 。<br>    ⑦刷新权限（必须步骤）：flush privileges;　。<br>    ⑧退出mysql  quit；。</p><pre class="language-sql" data-language="sql"><code class="language-sql">mysqld <span class="token comment">--skip-grant-tables   </span>mysql<span class="token operator">></span> <span class="token keyword">use</span> mysql<span class="token punctuation">;</span>   <span class="token comment">--连接权限数据库</span>mysql<span class="token operator">></span> <span class="token keyword">update</span> <span class="token keyword">user</span> <span class="token keyword">set</span> password<span class="token operator">=</span>password<span class="token punctuation">(</span><span class="token string">"新密码"</span><span class="token punctuation">)</span> <span class="token keyword">where</span> <span class="token keyword">user</span><span class="token operator">=</span><span class="token string">"root"</span><span class="token punctuation">;</span>   <span class="token comment">-- 改密码</span>mysql<span class="token operator">></span> flush <span class="token keyword">privileges</span><span class="token punctuation">;</span>    <span class="token comment">-- 刷新权限</span>mysql<span class="token operator">></span> quit<span class="token punctuation">;</span>    <span class="token comment">-- 退出mysql</span></code></pre><h4 id="增加新用户"><a href="#增加新用户" class="headerlink" title="增加新用户"></a>增加新用户</h4><p>注意：和上面不同，下面的因为是MYSQL环境中的命令，所以后面都带一个分号作为命令结束符</p><p>格式：grant select on 数据库.* to 用户名@登录主机 identified by “密码”</p><p>1、增加一个用户test1密码为abc，让他可以在任何主机上登录，并对所有数据库有查询、插入、修改、删除的权限。首先用root用户连入MYSQL，然后键入以下命令：</p><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">grant</span> <span class="token keyword">select</span><span class="token punctuation">,</span><span class="token keyword">insert</span><span class="token punctuation">,</span><span class="token keyword">update</span><span class="token punctuation">,</span><span class="token keyword">delete</span> <span class="token keyword">on</span> <span class="token operator">*</span><span class="token punctuation">.</span><span class="token operator">*</span> <span class="token keyword">to</span> <span class="token punctuation">[</span>email<span class="token operator">=</span>test1@”<span class="token operator">%</span><span class="token punctuation">]</span>test1@”<span class="token operator">%</span><span class="token punctuation">[</span><span class="token operator">/</span>email<span class="token punctuation">]</span>” Identified <span class="token keyword">by</span> “abc”<span class="token punctuation">;</span></code></pre><p>但增加的用户是十分危险的，你想如某个人知道test1的密码，那么他就可以在internet上的任何一台电脑上登录你的mysql数据库并对你的数据可以为所欲为了，解决办法见2。</p><p>2、增加一个用户test2密码为abc,让他只可以在localhost上登录，并可以对数据库mydb进行查询、插入、修改、删除的操作（localhost指本地主机，即MYSQL数据库所在的那台主机），这样用户即使用知道test2的密码，他也无法从internet上直接访问数据库，只能通过MYSQL主机上的web页来访问了。</p><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">grant</span> <span class="token keyword">select</span><span class="token punctuation">,</span><span class="token keyword">insert</span><span class="token punctuation">,</span><span class="token keyword">update</span><span class="token punctuation">,</span><span class="token keyword">delete</span> <span class="token keyword">on</span> mydb<span class="token punctuation">.</span><span class="token operator">*</span> <span class="token keyword">to</span> <span class="token punctuation">[</span>email<span class="token operator">=</span>test2<span class="token variable">@localhost</span><span class="token punctuation">]</span>test2<span class="token variable">@localhost</span><span class="token punctuation">[</span><span class="token operator">/</span>email<span class="token punctuation">]</span> identified <span class="token keyword">by</span> “abc”<span class="token punctuation">;</span></code></pre><p>如果你不想test2有密码，可以再打一个命令将密码消掉。</p><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">grant</span> <span class="token keyword">select</span><span class="token punctuation">,</span><span class="token keyword">insert</span><span class="token punctuation">,</span><span class="token keyword">update</span><span class="token punctuation">,</span><span class="token keyword">delete</span> <span class="token keyword">on</span> mydb<span class="token punctuation">.</span><span class="token operator">*</span> <span class="token keyword">to</span> <span class="token punctuation">[</span>email<span class="token operator">=</span>test2<span class="token variable">@localhost</span><span class="token punctuation">]</span>test2<span class="token variable">@localhost</span><span class="token punctuation">[</span><span class="token operator">/</span>email<span class="token punctuation">]</span> identified <span class="token keyword">by</span> “”<span class="token punctuation">;</span></code></pre><h3 id="MySQL–常用命令"><a href="#MySQL–常用命令" class="headerlink" title="MySQL–常用命令"></a>MySQL–常用命令</h3><h4 id="创建数据库（Create）"><a href="#创建数据库（Create）" class="headerlink" title="创建数据库（Create）"></a>创建数据库（Create）</h4><pre class="language-sql" data-language="sql"><code class="language-sql">mysql<span class="token operator">></span> <span class="token keyword">create</span> <span class="token keyword">database</span> db_name<span class="token punctuation">;</span>  <span class="token comment">-- 创建数据库</span>mysql<span class="token operator">></span> <span class="token keyword">show</span> <span class="token keyword">databases</span><span class="token punctuation">;</span>           <span class="token comment">-- 显示所有的数据库</span>mysql<span class="token operator">></span> <span class="token keyword">drop</span> <span class="token keyword">database</span> db_name<span class="token punctuation">;</span>    <span class="token comment">-- 删除数据库</span>mysql<span class="token operator">></span> <span class="token keyword">use</span> db_name<span class="token punctuation">;</span>              <span class="token comment">-- 选择数据库</span>mysql<span class="token operator">></span> <span class="token keyword">create</span> <span class="token keyword">table</span> tb_name <span class="token punctuation">(</span>字段名 <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">,</span> 字段名 <span class="token keyword">char</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">-- 创建数据表模板</span>mysql<span class="token operator">></span> <span class="token keyword">show</span> <span class="token keyword">tables</span><span class="token punctuation">;</span>              <span class="token comment">-- 显示数据表</span>mysql<span class="token operator">></span> <span class="token keyword">desc</span> tb_name<span class="token punctuation">;</span>           <span class="token comment">-- 显示表结构</span>mysql<span class="token operator">></span> <span class="token keyword">drop</span> <span class="token keyword">table</span> tb_name<span class="token punctuation">;</span>      <span class="token comment">-- 删除表</span></code></pre><p>   例如：</p><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token comment">/*创建学生表*/</span><span class="token keyword">create</span> <span class="token keyword">table</span> Student<span class="token punctuation">(</span>     Sno <span class="token keyword">char</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token keyword">primary</span> <span class="token keyword">key</span><span class="token punctuation">,</span>     Sname <span class="token keyword">char</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token keyword">unique</span><span class="token punctuation">,</span>     Ssex <span class="token keyword">char</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>     Sage <span class="token keyword">smallint</span><span class="token punctuation">,</span>     Sdept <span class="token keyword">char</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="插入数据（Insert）"><a href="#插入数据（Insert）" class="headerlink" title="插入数据（Insert）"></a>插入数据（Insert）</h4><pre><code> insert into 语句用于向表格中插入新的行：</code></pre><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token comment">/*第一种形式无需指定要插入数据的列名，只需提供被插入的值即可：*/</span>mysql<span class="token operator">></span> <span class="token keyword">insert</span> <span class="token keyword">into</span> tb_name <span class="token keyword">values</span> <span class="token punctuation">(</span>value1<span class="token punctuation">,</span>value2<span class="token punctuation">,</span>value3<span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/*第二种形式需要指定列名及被插入的值：*/</span>mysql<span class="token operator">></span> <span class="token keyword">insert</span> <span class="token keyword">into</span> tb_name <span class="token punctuation">(</span>column1<span class="token punctuation">,</span>column2<span class="token punctuation">,</span>column3<span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span> <span class="token keyword">values</span> <span class="token punctuation">(</span>value1<span class="token punctuation">,</span>value2<span class="token punctuation">,</span>value3<span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><pre><code> 例如：</code></pre><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token comment">/*插入数据*/</span> mysql<span class="token operator">></span> <span class="token keyword">insert</span> <span class="token keyword">into</span> Student <span class="token keyword">values</span> <span class="token punctuation">(</span> <span class="token number">20180001</span><span class="token punctuation">,</span><span class="token string">'张三'</span><span class="token punctuation">,</span><span class="token string">'男'</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token string">'CS'</span>）<span class="token punctuation">;</span>mysql<span class="token operator">></span> <span class="token keyword">insert</span> <span class="token keyword">into</span> Student <span class="token keyword">values</span> <span class="token punctuation">(</span> <span class="token number">20180002</span><span class="token punctuation">,</span><span class="token string">'李四'</span><span class="token punctuation">,</span><span class="token string">'男'</span><span class="token punctuation">,</span><span class="token number">19</span><span class="token punctuation">,</span><span class="token string">'CS'</span>）<span class="token punctuation">;</span>mysql<span class="token operator">></span> <span class="token keyword">insert</span> <span class="token keyword">into</span> Student <span class="token punctuation">(</span>Sno<span class="token punctuation">,</span>Sname<span class="token punctuation">,</span>Ssex<span class="token punctuation">,</span>Sage<span class="token punctuation">,</span>Sdept<span class="token punctuation">)</span> <span class="token keyword">values</span> <span class="token punctuation">(</span> <span class="token number">20180003</span><span class="token punctuation">,</span><span class="token string">'王五'</span><span class="token punctuation">,</span><span class="token string">'男'</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">,</span><span class="token string">'MA'</span>）<span class="token punctuation">;</span>mysql<span class="token operator">></span> <span class="token keyword">insert</span> <span class="token keyword">into</span> Student <span class="token punctuation">(</span>Sno<span class="token punctuation">,</span>Sname<span class="token punctuation">,</span>Ssex<span class="token punctuation">,</span>Sage<span class="token punctuation">,</span>Sdept<span class="token punctuation">)</span> <span class="token keyword">values</span> <span class="token punctuation">(</span> <span class="token number">20180004</span><span class="token punctuation">,</span><span class="token string">'赵六'</span><span class="token punctuation">,</span><span class="token string">'男'</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token string">'IS'</span>）<span class="token punctuation">;</span></code></pre><h4 id="查询数据-Select"><a href="#查询数据-Select" class="headerlink" title="查询数据(Select)"></a>查询数据(Select)</h4><h5 id="基础命令"><a href="#基础命令" class="headerlink" title="基础命令"></a>基础命令</h5><p>       select语句除了可以查看数据库中的表格和视图的信息外,还可以查看 SQL Server的系统信息、复制、创建数据表。其查询功能强大，是SQL语言的灵魂语句，也是SQL中使用频率最高的语句。<br>基本select语句：<br>      一个基本的select语句可分解成三个部分：查找什么数据（select）、从哪里查找（from）、查找的条件是什么（where）。<br>      select 语句的一般格式如下：</p><pre class="language-sql" data-language="sql"><code class="language-sql">                                   <span class="token keyword">select</span> <span class="token operator">&lt;</span>目标列表达式列表<span class="token operator">></span>                                   <span class="token punctuation">[</span><span class="token keyword">into</span> 新表名<span class="token punctuation">]</span>                                   <span class="token keyword">from</span> 表名或视图名                                   <span class="token punctuation">[</span><span class="token keyword">where</span> <span class="token operator">&lt;</span>条件<span class="token operator">></span><span class="token punctuation">]</span>                                   <span class="token punctuation">[</span><span class="token keyword">group</span> <span class="token keyword">by</span> <span class="token operator">&lt;</span>分组表达式<span class="token operator">></span><span class="token punctuation">]</span>                                   <span class="token punctuation">[</span><span class="token keyword">having</span> <span class="token operator">&lt;</span>条件<span class="token operator">></span><span class="token punctuation">]</span>                                   <span class="token punctuation">[</span><span class="token keyword">order</span> <span class="token keyword">by</span> <span class="token operator">&lt;</span>排序表达式<span class="token operator">></span><span class="token punctuation">[</span><span class="token keyword">ASC</span><span class="token operator">|</span><span class="token keyword">DESC</span><span class="token punctuation">]</span><span class="token punctuation">]</span></code></pre><p>(一)查询指定的列<br>        1.查询表中所有列<br>              在select语句指定列的位置上使用*号时，表示查询表的所有列。</p><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> tb_name<span class="token punctuation">;</span></code></pre><p>        2.查询表中指定的列<br>              查询多列时，列名之间要用逗号隔开。</p><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> tb_name<span class="token punctuation">.</span><span class="token operator">&lt;</span>字符型字段<span class="token operator">></span><span class="token punctuation">,</span><span class="token operator">&lt;</span>字符型字段<span class="token operator">></span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token keyword">from</span>  tb_name<span class="token punctuation">;</span></code></pre><p>        3.指定查询结果中的列标题<br>              通过指定列标题（也叫列别名）可使输出结果更容易被人理解。<br>              指定列标题时，可在列名之后使用AS子句；也可使用:列别名=&lt;表达式&gt;的形式指定列标题。<br>              AS子句的格式为：列名或计算表达式 [AS] 列标题</p><pre class="language-sql" data-language="sql"><code class="language-sql">              <span class="token keyword">select</span> <span class="token operator">&lt;</span>字符型字段<span class="token operator">></span> <span class="token keyword">as</span> 列标题<span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">&lt;</span>字符型字段<span class="token operator">></span> <span class="token keyword">as</span> 列标题<span class="token number">2</span><span class="token punctuation">,</span> <span class="token operator">&lt;</span>字符型字段<span class="token operator">></span> <span class="token keyword">as</span> 列标题<span class="token number">3</span> <span class="token keyword">from</span> bt_name<span class="token punctuation">;</span></code></pre><p>        4.查询经过计算的列（即表达式的值）<br>             使用select对列进行查询时，不仅可以直接以列的原始值作为结果，而且还可以将列值进行计算后所得值作为查询结果，即select子句可以查询表达式的值,表达式可由列名、常量及算术运算符组成。<br>              查询结果计算列显示“无列名”,一般要给计算列加列标题。<br>              其中：表达式中可以使用的运算符有：加+、减-、乘*、除/、取余%</p><pre class="language-sql" data-language="sql"><code class="language-sql">              <span class="token keyword">select</span> <span class="token operator">&lt;</span>字符型字段<span class="token operator">></span><span class="token punctuation">,</span><span class="token operator">&lt;</span>字符型字段<span class="token operator">></span><span class="token punctuation">,</span>列标题 <span class="token operator">=</span> <span class="token operator">&lt;</span>字符型字段<span class="token operator">></span> <span class="token operator">*</span> n <span class="token keyword">from</span> tb_name<span class="token punctuation">;</span></code></pre><p>(二)选择行：选择表中的部分行或全部行作为查询的结果</p><pre class="language-sql" data-language="sql"><code class="language-sql">        <span class="token keyword">select</span> <span class="token punctuation">[</span><span class="token keyword">all</span><span class="token operator">|</span><span class="token keyword">distinct</span><span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token keyword">top</span> n<span class="token punctuation">[</span><span class="token keyword">percent</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">&lt;</span>目标列表达式列表<span class="token operator">></span> <span class="token keyword">from</span> 表名<span class="token punctuation">;</span></code></pre><p>        1. 消除查询结果中的重复行<br>              对于关系数据库来说，表中的每一行都必须是不同的(即无重复行)。但当对表进行查询时若只选择其中的某些列，查询结果中就可能会出现重复行。<br>              在select语句中使用distinct关键字可以消除结果集中的重复行,</p><pre class="language-sql" data-language="sql"><code class="language-sql">              <span class="token keyword">select</span> <span class="token keyword">distinct</span> <span class="token operator">&lt;</span>字符型字段<span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">,</span><span class="token operator">&lt;</span>字符型字段<span class="token operator">></span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">]</span> <span class="token keyword">from</span> tb_name<span class="token punctuation">;</span></code></pre><p>        2. 限制查询结果中的返回行数<br>              使用top选项可限制查询结果的返回行数，即返回指定个数的记录数。<br>              其中：n是一个正整数，表示返回查询结果集的前n行；若带percent关键字，则表示返回结果集的前n%行。</p><pre class="language-sql" data-language="sql"><code class="language-sql">              <span class="token keyword">select</span>  <span class="token keyword">top</span> n <span class="token keyword">from</span> tb_name<span class="token punctuation">;</span> <span class="token comment">/*查询前 n 的数据*/</span>              <span class="token keyword">select</span> <span class="token keyword">top</span> n <span class="token keyword">percent</span> <span class="token keyword">from</span> tb_name<span class="token punctuation">;</span> <span class="token comment">/*查询前 n% tb_name的数据*/</span></code></pre><p>(三)查询满足条件的行: 用where子句实现条件查询<br>            通过where子句实现,该子句必须紧跟在From子句之后。</p><pre class="language-sql" data-language="sql"><code class="language-sql">            <span class="token keyword">select</span> <span class="token punctuation">[</span><span class="token keyword">all</span><span class="token operator">|</span><span class="token keyword">distinct</span><span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token keyword">top</span> n<span class="token punctuation">[</span><span class="token keyword">percent</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">&lt;</span>目标列表达式列表<span class="token operator">></span> <span class="token keyword">from</span> 表名 <span class="token keyword">where</span> <span class="token operator">&lt;</span>条件<span class="token operator">></span><span class="token punctuation">;</span></code></pre><p>            说明：在查询条件中可使用以下运算符或表达式：<br>                  运算符                 运算符标识<br>                  比较运算符         &lt;=，&lt;，=，&gt;，&gt;=，!=，&lt;&gt;，!&gt;，!&lt;<br>                  范围运算符         between… and，not between… and<br>                  列举运算符         in，not in<br>                  模糊匹配运算符 like，not like<br>                  空值运算符         is null，is not null<br>                  逻辑运算符         and，or，not<br>        1.使用比较运算符：</p><pre class="language-sql" data-language="sql"><code class="language-sql">              <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> tb_name <span class="token keyword">where</span> <span class="token operator">&lt;</span>字符型字段<span class="token operator">></span> <span class="token operator">>=</span> n <span class="token punctuation">;</span></code></pre><p>        2.指定范围：<br>              用于指定范围的关键字有两个：between…and和 not between…and。</p><pre class="language-sql" data-language="sql"><code class="language-sql">              <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> tb_name <span class="token keyword">where</span> <span class="token punctuation">[</span><span class="token operator">not</span><span class="token punctuation">]</span> <span class="token operator">between</span> <span class="token operator">&lt;</span>表达式<span class="token number">1</span><span class="token operator">></span> <span class="token operator">and</span> <span class="token operator">&lt;</span>表达式<span class="token number">2</span><span class="token operator">></span><span class="token punctuation">;</span></code></pre><p>              其中：between关键字之后的是范围的下限（即低值）,and关键字之后的是范围的上限（即高值）<br>              用于查找字段值在（或不在）指定范围的行。<br>       3.使用列举:<br>             使用in关键字可以指定一个值的集合，集合中列出所有可能的值，当表达式的值与集合中的任一元素个匹配时，即返回true，否则返回false。</p><pre class="language-sql" data-language="sql"><code class="language-sql">             模板：<span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> tb_name <span class="token keyword">where</span> <span class="token operator">&lt;</span>字符型字段<span class="token operator">></span> <span class="token punctuation">[</span><span class="token operator">not</span><span class="token punctuation">]</span> <span class="token operator">in</span><span class="token punctuation">(</span>值<span class="token number">1</span><span class="token punctuation">,</span>值<span class="token number">2</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">,</span>值n<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>       4.使用通配符进行模糊查询:<br>             可用like 子句进行字符串的模糊匹配查询，like子句将返回逻辑值（true或False）。</p><pre class="language-sql" data-language="sql"><code class="language-sql">             <span class="token operator">like</span>子句的格式： <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> tb_name <span class="token keyword">where</span> <span class="token operator">&lt;</span>字符型字段<span class="token operator">></span> <span class="token punctuation">[</span><span class="token operator">not</span><span class="token punctuation">]</span> <span class="token operator">like</span> <span class="token operator">&lt;</span>匹配串<span class="token operator">></span><span class="token punctuation">;</span></code></pre><p>             其含义是：查找指定字段值与匹配串相匹配的记录。匹配串中通常含有通配符%和_（下划线）。<br>             其中:  %：代表任意长度（包括0）的字符串<br>       5.使用null的查询<br>             当需要判定一个表达式的值是否为空值时，使用 is null关键字。<br>             当不使用not时，若表达式的值为空值，则返回true，否则返回false；当使用not时，结果刚好相反。</p><pre class="language-sql" data-language="sql"><code class="language-sql">             <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> tb_name <span class="token keyword">where</span> <span class="token operator">&lt;</span>字符型字段<span class="token operator">></span> <span class="token operator">is</span> <span class="token punctuation">[</span><span class="token operator">not</span><span class="token punctuation">]</span> <span class="token boolean">null</span><span class="token punctuation">;</span></code></pre><p>        6.多重条件查询：使用逻辑运算符<br>             逻辑运算符and（与：两个条件都要满足）和or（或：满足其中一个条件即可）可用来联接多个查询条件。and的优先级高于or,但若使用括号可以改变优先级。</p><pre class="language-sql" data-language="sql"><code class="language-sql">             <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> tb_name <span class="token keyword">where</span> <span class="token operator">&lt;</span>字符型字段<span class="token operator">></span> <span class="token operator">=</span> <span class="token string">'volues'</span> <span class="token operator">and</span> <span class="token operator">&lt;</span>字符型字段<span class="token operator">></span> <span class="token operator">></span> n<span class="token punctuation">;</span></code></pre><p>(四)对查询结果排序<br>        order by子句可用于对查询结果按照一个或多个字段的值（或表达式的值）进行升序（ASC）或降序（DESC）排列，默认为升序。</p><pre class="language-sql" data-language="sql"><code class="language-sql">        <span class="token keyword">order</span> <span class="token keyword">by</span> &#123;排序表达式<span class="token punctuation">[</span><span class="token keyword">ASC</span><span class="token operator">|</span><span class="token keyword">DESC</span><span class="token punctuation">]</span>&#125;<span class="token punctuation">[</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span></code></pre><p>        其中：排序表达式既可以是单个的一个字段，也可以是由字段、函数、常量等组成的表达式，或一个正整数。</p><pre class="language-sql" data-language="sql"><code class="language-sql">        <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> tb_name <span class="token keyword">order</span> <span class="token keyword">by</span> <span class="token operator">&lt;</span>排序表达式<span class="token operator">></span> <span class="token operator">&lt;</span>排序方法<span class="token operator">></span><span class="token punctuation">;</span></code></pre><p>(五)使用统计函数:又称集函数，聚合函数<br>        在对表进行检索时，经常需要对结果进行计算或统计，T-SQL提供了一些统计函数（也称集函数或聚合函数），用来增强检索功能。统计函数用于计算表中的数据，即利用这些函数对一组数据进行计算，并返回单一的值。<br>        常用统计函数表<br>              函数名      功能<br>              AVG         求平均值<br>              count        求记录个数，返回int类型整数<br>              max          求最大值<br>              min           求最小值<br>              sum          求和<br>        1. SUM和AVG<br>             功能：求指定的数值型表达式的和或平均值。</p><pre class="language-sql" data-language="sql"><code class="language-sql">             <span class="token keyword">select</span> <span class="token function">avg</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>字符型字段<span class="token operator">></span><span class="token punctuation">)</span> <span class="token keyword">as</span> 平均数<span class="token punctuation">,</span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>字符型字段<span class="token operator">></span><span class="token punctuation">)</span> <span class="token keyword">as</span> 总数 <span class="token keyword">from</span> tb_name <span class="token keyword">where</span> <span class="token operator">&lt;</span>字符型字段<span class="token operator">></span> <span class="token operator">=</span><span class="token string">'字符串'</span><span class="token punctuation">;</span></code></pre><p>        2. Max和Min<br>             功能：求指定表达式的最大值或最小值。</p><pre class="language-sql" data-language="sql"><code class="language-sql">             <span class="token keyword">select</span> <span class="token function">max</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>字符型字段<span class="token operator">></span><span class="token punctuation">)</span> <span class="token keyword">as</span> 最大值<span class="token punctuation">,</span><span class="token function">min</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>字符型字段<span class="token operator">></span><span class="token punctuation">)</span> <span class="token keyword">as</span> 最小值 <span class="token keyword">from</span> tb_name<span class="token punctuation">;</span></code></pre><p>        3. count<br>             该函数有两种格式：count(<em>)和count([all]|[distinct] 字段名），为避免出错，查询记录个数一般使用count(</em>)，而查询某字段有几种取值用count(distinct 字段名）。<br>             (1).count(*):<br>                 功能：统计记录总数。</p><pre class="language-sql" data-language="sql"><code class="language-sql">                 <span class="token keyword">select</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">as</span> 总数 <span class="token keyword">from</span> tb_name<span class="token punctuation">;</span></code></pre><p>             (2).count([all]|[distinct] 字段名）<br>                 功能：统计指定字段值不为空的记录个数，字段的数据类型可以是text、image、ntext、uniqueidentifier之外的任何类型。</p><pre class="language-sql" data-language="sql"><code class="language-sql">                 <span class="token keyword">select</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>字符型字段<span class="token operator">></span><span class="token punctuation">)</span> <span class="token keyword">as</span> 总数 <span class="token keyword">from</span> tb_name<span class="token punctuation">;</span></code></pre><p>(六)对查询结果分组<br>        group by子句用于将查询结果表按某一列或多列值进行分组，列值相等的为一组，每组统计出一个结果。该子句常与统计函数一起使用进行分组统计。<br>        格式为：group by 分组字段[,…n][having &lt;条件表达式&gt;]；<br>        1.在使用group by子句后<br>             select列表中只能包含：group by子句中所指定的分组字段及统计函数。<br>        2.having子句的用法<br>             having子句必须与group by 子句配合使用，用于对分组后的结果进行筛选（筛选条件中常含有统计函数）。<br>        3. 分组查询时不含统计函数的条件<br>             通常使用where子句；含有统计函数的条件,则只能用having子句。</p><pre class="language-sql" data-language="sql"><code class="language-sql">             <span class="token keyword">select</span> <span class="token operator">&lt;</span>字符型字段<span class="token operator">></span><span class="token punctuation">,</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">as</span> 列标题 <span class="token keyword">from</span> tb_name <span class="token keyword">where</span> <span class="token operator">&lt;</span>字符型字段<span class="token operator">>=</span><span class="token string">'字符串'</span> <span class="token keyword">group</span> <span class="token keyword">by</span> <span class="token operator">&lt;</span>字符型字段<span class="token operator">></span><span class="token punctuation">;</span></code></pre><h5 id="特殊功能"><a href="#特殊功能" class="headerlink" title="特殊功能"></a>特殊功能</h5><p>1.显示MYSQL的版本</p><pre class="language-sql" data-language="sql"><code class="language-sql">mysql<span class="token operator">></span> <span class="token keyword">select</span> version<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> </code></pre><ol start="2"><li>显示当前时间<pre class="language-sql" data-language="sql"><code class="language-sql">mysql<span class="token operator">></span> <span class="token keyword">select</span> <span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> </code></pre></li><li>显示年月日<pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> DAYOFMONTH<span class="token punctuation">(</span><span class="token keyword">CURRENT_DATE</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">select</span> <span class="token keyword">MONTH</span><span class="token punctuation">(</span><span class="token keyword">CURRENT_DATE</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">select</span> <span class="token keyword">YEAR</span><span class="token punctuation">(</span><span class="token keyword">CURRENT_DATE</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">select</span> <span class="token keyword">YEAR</span><span class="token punctuation">(</span><span class="token keyword">CURRENT_DATE</span><span class="token punctuation">)</span><span class="token punctuation">;</span> </code></pre></li><li>显示字符串<pre class="language-sql" data-language="sql"><code class="language-sql">mysql<span class="token operator">></span> <span class="token keyword">select</span> <span class="token string">"welecome to my blog!"</span><span class="token punctuation">;</span> </code></pre></li><li>当计算器用<pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">4</span> <span class="token operator">*</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">10</span> <span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">25</span><span class="token punctuation">;</span> </code></pre></li><li>串接字符串<pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> CONCAT<span class="token punctuation">(</span>f_name<span class="token punctuation">,</span> <span class="token string">" "</span><span class="token punctuation">,</span> l_name<span class="token punctuation">)</span> <span class="token keyword">as</span> Name <span class="token keyword">from</span> employee_data <span class="token keyword">where</span> title <span class="token operator">=</span> <span class="token string">'Marketing Executive'</span><span class="token punctuation">;</span> </code></pre></li></ol><h4 id="修改数据-Update）"><a href="#修改数据-Update）" class="headerlink" title="修改数据(Update）"></a>修改数据(Update）</h4><p>    Update 语句用于修改表中的数据。</p><pre class="language-sql" data-language="sql"><code class="language-sql">          <span class="token keyword">update</span> tb_name <span class="token keyword">set</span> 列名称 <span class="token operator">=</span> 新值 <span class="token keyword">where</span> 列名称 <span class="token operator">=</span> 某值<span class="token punctuation">;</span></code></pre><h4 id="删除数据-Delete"><a href="#删除数据-Delete" class="headerlink" title="删除数据(Delete)"></a>删除数据(Delete)</h4><p>      删除单行</p><pre class="language-sql" data-language="sql"><code class="language-sql">          <span class="token keyword">delete</span> <span class="token keyword">from</span> tb_name <span class="token keyword">where</span> 列名称 <span class="token operator">=</span> 某值<span class="token punctuation">;</span></code></pre><p>      删除所有行<br>          可以在不删除表的情况下删除所有的行。这意味着表的结构、属性和索引都是完整的：</p><pre class="language-sql" data-language="sql"><code class="language-sql">          格式：<span class="token keyword">delete</span> <span class="token operator">*</span> <span class="token keyword">from</span> tb_name   或  <span class="token keyword">delete</span> <span class="token keyword">from</span> tb_name<span class="token punctuation">;</span></code></pre><h3 id="MySQL-–-alter命令"><a href="#MySQL-–-alter命令" class="headerlink" title="MySQL – alter命令"></a>MySQL – alter命令</h3><p>alter add命令用来增加表的字段。<br>alter add命令格式：alter table 表名 add字段 类型 其他;</p><p>例如，在表MyClass中添加了一个字段passtest，类型为int(4)，默认值为0：</p><pre class="language-sql" data-language="sql"><code class="language-sql">mysql<span class="token operator">></span> <span class="token keyword">alter</span> <span class="token keyword">table</span> MyClass <span class="token keyword">add</span> passtest <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token string">'0'</span><span class="token punctuation">;</span></code></pre><p>添加两个字段 </p><pre class="language-sql" data-language="sql"><code class="language-sql">mysql<span class="token operator">></span> <span class="token keyword">alter</span> <span class="token keyword">table</span> Person <span class="token keyword">add</span> age <span class="token keyword">int</span><span class="token punctuation">,</span><span class="token keyword">add</span> address <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">;</span> </code></pre><p>删除两个字段</p><pre class="language-sql" data-language="sql"><code class="language-sql">mysql<span class="token operator">></span> <span class="token keyword">alter</span> <span class="token keyword">table</span> Person <span class="token keyword">drop</span> <span class="token keyword">column</span> age<span class="token punctuation">,</span><span class="token keyword">drop</span> <span class="token keyword">column</span> address<span class="token punctuation">;</span></code></pre><p>修改字段的注释</p><pre class="language-sql" data-language="sql"><code class="language-sql">mysql<span class="token operator">></span> <span class="token keyword">alter</span> <span class="token keyword">table</span> <span class="token identifier"><span class="token punctuation">`</span>student<span class="token punctuation">`</span></span> <span class="token keyword">modify</span> <span class="token keyword">column</span> <span class="token identifier"><span class="token punctuation">`</span>id<span class="token punctuation">`</span></span> <span class="token keyword">comment</span> <span class="token string">'学号'</span><span class="token punctuation">;</span></code></pre><ol><li>加索引<br> mysql&gt; alter table 表名 add index 索引名 (字段名1[，字段名2 …]);<pre class="language-sql" data-language="sql"><code class="language-sql">mysql<span class="token operator">></span> <span class="token keyword">alter</span> <span class="token keyword">table</span> employee <span class="token keyword">add</span> <span class="token keyword">index</span> emp_name <span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li>加主关键字的索引<br> mysql&gt; alter table 表名 add primary key (字段名);<pre class="language-sql" data-language="sql"><code class="language-sql">mysql<span class="token operator">></span> <span class="token keyword">alter</span> <span class="token keyword">table</span> employee <span class="token keyword">add</span> <span class="token keyword">primary</span> <span class="token keyword">key</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li>加唯一限制条件的索引<br> mysql&gt; alter table 表名 add unique 索引名 (字段名);<pre class="language-sql" data-language="sql"><code class="language-sql">mysql<span class="token operator">></span> <span class="token keyword">alter</span> <span class="token keyword">table</span> employee <span class="token keyword">add</span> <span class="token keyword">unique</span> emp_name2<span class="token punctuation">(</span>cardnumber<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li>删除某个索引<br> mysql&gt; alter table 表名 drop index 索引名;<pre class="language-sql" data-language="sql"><code class="language-sql">mysql<span class="token operator">></span><span class="token keyword">alter</span> <span class="token keyword">table</span> employee <span class="token keyword">drop</span> <span class="token keyword">index</span> emp_name<span class="token punctuation">;</span></code></pre></li><li>增加字段<pre class="language-sql" data-language="sql"><code class="language-sql">mysql<span class="token operator">></span> <span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> table_name <span class="token keyword">ADD</span> field_name field_type<span class="token punctuation">;</span></code></pre></li><li>修改原字段名称及类型<pre class="language-sql" data-language="sql"><code class="language-sql">mysql<span class="token operator">></span> <span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> table_name CHANGE old_field_name new_field_name field_type<span class="token punctuation">;</span></code></pre></li><li>删除字段<pre class="language-sql" data-language="sql"><code class="language-sql">MySQL <span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> table_name <span class="token keyword">DROP</span> field_name<span class="token punctuation">;</span></code></pre><h3 id="备份数据库"><a href="#备份数据库" class="headerlink" title="备份数据库"></a>备份数据库</h3></li></ol><blockquote><p>命令在DOS的[url=file://\mysql\bin]\mysql\bin[/url]目录下执行</p></blockquote><hr><p>1.导出整个数据库<br>导出文件默认是存在mysql\bin目录下</p><pre class="language-sql" data-language="sql"><code class="language-sql">mysqldump <span class="token operator">-</span>u 用户名 <span class="token operator">-</span>p 数据库名 <span class="token operator">></span> 导出的文件名mysqldump <span class="token operator">-</span>u user_name <span class="token operator">-</span>p123456 database_name <span class="token operator">></span> outfile_name<span class="token punctuation">.</span><span class="token keyword">sql</span></code></pre><p>2.导出一个表</p><pre class="language-sql" data-language="sql"><code class="language-sql">mysqldump <span class="token operator">-</span>u 用户名 <span class="token operator">-</span>p 数据库名 表名<span class="token operator">></span> 导出的文件名mysqldump <span class="token operator">-</span>u user_name <span class="token operator">-</span>p database_name table_name <span class="token operator">></span> outfile_name<span class="token punctuation">.</span><span class="token keyword">sql</span></code></pre><p>3.导出一个数据库结构</p><pre class="language-sql" data-language="sql"><code class="language-sql">mysqldump <span class="token operator">-</span>u user_name <span class="token operator">-</span>p <span class="token operator">-</span>d –<span class="token keyword">add</span><span class="token operator">-</span><span class="token keyword">drop</span><span class="token operator">-</span><span class="token keyword">table</span> database_name <span class="token operator">></span> outfile_name<span class="token punctuation">.</span><span class="token keyword">sql</span><span class="token operator">-</span>d 没有数据 –<span class="token keyword">add</span><span class="token operator">-</span><span class="token keyword">drop</span><span class="token operator">-</span><span class="token keyword">table</span> 在每个<span class="token keyword">create</span>语句之前增加一个<span class="token keyword">drop</span> <span class="token keyword">table</span></code></pre><p>4.带语言参数导出</p><pre class="language-sql" data-language="sql"><code class="language-sql">mysqldump <span class="token operator">-</span>uroot <span class="token operator">-</span>p –<span class="token keyword">default</span><span class="token operator">-</span><span class="token keyword">character</span><span class="token operator">-</span><span class="token keyword">set</span><span class="token operator">=</span>latin1 –<span class="token keyword">set</span><span class="token operator">-</span><span class="token keyword">charset</span><span class="token operator">=</span>gbk –skip<span class="token operator">-</span>opt database_name <span class="token operator">></span> outfile_name<span class="token punctuation">.</span><span class="token keyword">sql</span></code></pre><p>例如，将aaa库备份到文件back_aaa中：</p><pre class="language-sql" data-language="sql"><code class="language-sql">　　<span class="token punctuation">[</span>root<span class="token variable">@test1</span> root<span class="token punctuation">]</span><span class="token comment"># cd　/home/data/mysql</span>　　<span class="token punctuation">[</span>root<span class="token variable">@test1</span> mysql<span class="token punctuation">]</span><span class="token comment"># mysqldump -u root -p --opt aaa > back_aaa</span></code></pre><h3 id="MySQL-–-应用"><a href="#MySQL-–-应用" class="headerlink" title="MySQL – 应用"></a>MySQL – 应用</h3><pre><code>            学生-课程数据库</code></pre><p> 学生表：Student（Sno，Sname，Ssex，Sage，Sdept）<br> 课程表：Course（Cno，Cname，Cpno，Ccredit）<br> 学生选课表：SC（Sno，Cno，Grade）<br> 关系的主码加下划线表示。各个表中的数据示例如图所示：</p><pre><code>        Student表</code></pre><table><thead><tr><th align="center">Sno</th><th align="center">Sname</th><th>Ssex</th><th align="center">Sage</th><th align="center">Sdept</th></tr></thead><tbody><tr><td align="center">20180001</td><td align="center">张三</td><td>男</td><td align="center">20</td><td align="center">CS</td></tr><tr><td align="center">20180002</td><td align="center">李四</td><td>男</td><td align="center">19</td><td align="center">CS</td></tr><tr><td align="center">20180003</td><td align="center">王五</td><td>男</td><td align="center">18</td><td align="center">MA</td></tr><tr><td align="center">20180004</td><td align="center">赵六</td><td>男</td><td align="center">20</td><td align="center">IS</td></tr></tbody></table><pre><code>        Course表</code></pre><table><thead><tr><th align="center">Cno</th><th align="center">Cname</th><th align="center">Cpno</th><th align="center">Ccredit</th></tr></thead><tbody><tr><td align="center">1</td><td align="center">数据库</td><td align="center">5</td><td align="center">4</td></tr><tr><td align="center">2</td><td align="center">数学</td><td align="center"></td><td align="center">2</td></tr><tr><td align="center">3</td><td align="center">信息系统</td><td align="center">1</td><td align="center">4</td></tr><tr><td align="center">4</td><td align="center">操作系统</td><td align="center">6</td><td align="center">3</td></tr><tr><td align="center">5</td><td align="center">数据结构</td><td align="center">7</td><td align="center">4</td></tr><tr><td align="center">6</td><td align="center">数据处理</td><td align="center"></td><td align="center">2</td></tr><tr><td align="center">7</td><td align="center">PASCAL语言</td><td align="center">6</td><td align="center">4</td></tr></tbody></table><pre><code>        SC表</code></pre><table><thead><tr><th align="center">Sno</th><th align="center">Cno</th><th align="center">Grade</th></tr></thead><tbody><tr><td align="center">20180001</td><td align="center">2</td><td align="center">85</td></tr><tr><td align="center">20180001</td><td align="center">3</td><td align="center">88</td></tr><tr><td align="center">20180002</td><td align="center">2</td><td align="center">90</td></tr><tr><td align="center">20180002</td><td align="center">3</td><td align="center">80</td></tr></tbody></table><p>建立一个“学生”表Student：</p><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">table</span> Student<span class="token punctuation">(</span>  Sno <span class="token keyword">char</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span> <span class="token keyword">primary</span> <span class="token keyword">key</span><span class="token punctuation">,</span> <span class="token comment">/*列级完整性约束条件，Sno是主码*/</span>  Sname <span class="token keyword">char</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token keyword">unique</span><span class="token punctuation">,</span> <span class="token comment">/* Sname取唯一值*/</span>  Ssex <span class="token keyword">char</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  Sage <span class="token keyword">smallint</span><span class="token punctuation">,</span>  Sdept <span class="token keyword">char</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>建立一个“课程”表Course：</p><pre class="language-sql" data-language="sql"><code class="language-sql">建立一个“课程”表Course：<span class="token keyword">create</span> <span class="token keyword">table</span> Course<span class="token punctuation">(</span>  Sno <span class="token keyword">char</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token keyword">primary</span> <span class="token keyword">key</span><span class="token punctuation">,</span> <span class="token comment">/*列级完整性约束条件，Cname不能取空值*/</span>  Sname <span class="token keyword">char</span><span class="token punctuation">(</span><span class="token number">40</span><span class="token punctuation">)</span> <span class="token operator">not</span> <span class="token boolean">null</span><span class="token punctuation">,</span> <span class="token comment">/*Cpno的含义是先修课*/</span>  Cpno <span class="token keyword">char</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  Ccredit <span class="token keyword">smallint</span><span class="token punctuation">,</span>  <span class="token keyword">foreign</span> <span class="token keyword">key</span> <span class="token punctuation">(</span>Cpno<span class="token punctuation">)</span> <span class="token keyword">references</span> Course<span class="token punctuation">(</span>Cno<span class="token punctuation">)</span> <span class="token comment">/*表级完整性约束条件，Cpno是外码，被参照表是Course，被参照列是Cno*/</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>建立学生选课表SC：</p><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">table</span> SC<span class="token punctuation">(</span>  Sno <span class="token keyword">char</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  Cno <span class="token keyword">char</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  Grade <span class="token keyword">smallint</span><span class="token punctuation">,</span>  frimary <span class="token keyword">key</span> <span class="token punctuation">(</span>Sno<span class="token punctuation">,</span>Cno<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">/*主码由两个属性构成，必须作为表级完整性进行定义*/</span>  <span class="token keyword">foreign</span> <span class="token keyword">key</span> <span class="token punctuation">(</span>Sno<span class="token punctuation">)</span> <span class="token keyword">references</span> Student<span class="token punctuation">(</span>Sno<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">/*表级完整性约束条件，Sno是外码，被参照表是Student*/</span>  <span class="token keyword">foreign</span> <span class="token keyword">key</span> <span class="token punctuation">(</span>Cno<span class="token punctuation">)</span> <span class="token keyword">references</span> Course<span class="token punctuation">(</span>Cno<span class="token punctuation">)</span>   <span class="token comment">/*表级完整性约束条件，Cno是外码，被参照表是Course */</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Out_Learn </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微博文章图片获取（no相册）</title>
      <link href="/2021/04/23/Python/weibo_getpic/"/>
      <url>/2021/04/23/Python/weibo_getpic/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><img src="/images/posts/Python/crawler/%E7%88%AC%E8%99%AB.png" alt="爬虫" loading="lazy"><br>    注：no cookie</p><span id="more"></span><h2 id="快速开始"><a href="#快速开始" class="headerlink" title="快速开始"></a>快速开始</h2><h3 id="选定接收地址和爬取对象"><a href="#选定接收地址和爬取对象" class="headerlink" title="选定接收地址和爬取对象"></a>选定接收地址和爬取对象</h3><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment">#选定的接收地址</span>path <span class="token operator">=</span> <span class="token string">''</span><span class="token comment">#爬取对象的ID</span><span class="token builtin">id</span> <span class="token operator">=</span> <span class="token string">''</span>proxy_addr <span class="token operator">=</span> <span class="token string">"122.241.72.191:808"</span>pic_num <span class="token operator">=</span> <span class="token number">0</span>weibo_name <span class="token operator">=</span> <span class="token string">""</span><span class="token comment">#微博名称，即所要保存的文件夹名称</span></code></pre><h3 id="request-访问获取网页信息"><a href="#request-访问获取网页信息" class="headerlink" title="request 访问获取网页信息"></a>request 访问获取网页信息</h3><p>通过运用python中的request库，requests 库中的 get()方法能向服务器发送了一个请求，请求类型为HTTP协议的GET方式，对网页信息进行读取。将需要接收的编码以utf-8的形式接收。代理服务器（Proxy Server）的功能是代理网络用户去取得网络信息。形象地说，它是网络信息的中转站，是个人网络和Internet服务商之间的中间代理机构，负责转发合法的网络信息，对转发进行控制和登记</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">use_proxy</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> proxy_addr<span class="token punctuation">)</span><span class="token punctuation">:</span>    req <span class="token operator">=</span> urllib<span class="token punctuation">.</span>request<span class="token punctuation">.</span>Request<span class="token punctuation">(</span>url<span class="token punctuation">)</span>    req<span class="token punctuation">.</span>add_header<span class="token punctuation">(</span><span class="token string">"User-Agent"</span><span class="token punctuation">,</span><span class="token string">"Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/49.0.2623.221 Safari/537.36 SE 2.X MetaSr 1.0"</span><span class="token punctuation">)</span>    proxy <span class="token operator">=</span> urllib<span class="token punctuation">.</span>request<span class="token punctuation">.</span>ProxyHandler<span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">'http'</span><span class="token punctuation">:</span> proxy_addr<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    opener <span class="token operator">=</span> urllib<span class="token punctuation">.</span>request<span class="token punctuation">.</span>build_opener<span class="token punctuation">(</span>proxy<span class="token punctuation">,</span> urllib<span class="token punctuation">.</span>request<span class="token punctuation">.</span>HTTPHandler<span class="token punctuation">)</span>    urllib<span class="token punctuation">.</span>request<span class="token punctuation">.</span>install_opener<span class="token punctuation">(</span>opener<span class="token punctuation">)</span>    data <span class="token operator">=</span> urllib<span class="token punctuation">.</span>request<span class="token punctuation">.</span>urlopen<span class="token punctuation">(</span>req<span class="token punctuation">)</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">,</span> <span class="token string">'ignore'</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> data</code></pre><h3 id="获取爬取对象的基本信息"><a href="#获取爬取对象的基本信息" class="headerlink" title="获取爬取对象的基本信息"></a>获取爬取对象的基本信息</h3><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">get_userInfo</span><span class="token punctuation">(</span><span class="token builtin">id</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    url <span class="token operator">=</span> <span class="token string">'https://m.weibo.cn/api/container/getIndex?type=uid&amp;value='</span> <span class="token operator">+</span> <span class="token builtin">id</span>    data <span class="token operator">=</span> use_proxy<span class="token punctuation">(</span>url<span class="token punctuation">,</span> proxy_addr<span class="token punctuation">)</span>    content <span class="token operator">=</span> json<span class="token punctuation">.</span>loads<span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'data'</span><span class="token punctuation">)</span>    profile_image_url <span class="token operator">=</span> content<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'userInfo'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'profile_image_url'</span><span class="token punctuation">)</span>    description <span class="token operator">=</span> content<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'userInfo'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'description'</span><span class="token punctuation">)</span>    profile_url <span class="token operator">=</span> content<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'userInfo'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'profile_url'</span><span class="token punctuation">)</span>    verified <span class="token operator">=</span> content<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'userInfo'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'verified'</span><span class="token punctuation">)</span>    guanzhu <span class="token operator">=</span> content<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'userInfo'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'follow_count'</span><span class="token punctuation">)</span>    name <span class="token operator">=</span> content<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'userInfo'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'screen_name'</span><span class="token punctuation">)</span>    fensi <span class="token operator">=</span> content<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'userInfo'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'followers_count'</span><span class="token punctuation">)</span>    gender <span class="token operator">=</span> content<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'userInfo'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'gender'</span><span class="token punctuation">)</span>    urank <span class="token operator">=</span> content<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'userInfo'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'urank'</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"微博昵称："</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">"\n"</span> <span class="token operator">+</span> <span class="token string">"微博主页地址："</span> <span class="token operator">+</span> profile_url <span class="token operator">+</span> <span class="token string">"\n"</span> <span class="token operator">+</span> <span class="token string">"微博头像地址："</span> <span class="token operator">+</span> profile_image_url <span class="token operator">+</span> <span class="token string">"\n"</span> <span class="token operator">+</span> <span class="token string">"是否认证："</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>        verified<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"\n"</span> <span class="token operator">+</span> <span class="token string">"微博说明："</span> <span class="token operator">+</span> description <span class="token operator">+</span> <span class="token string">"\n"</span> <span class="token operator">+</span> <span class="token string">"关注人数："</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>guanzhu<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"\n"</span> <span class="token operator">+</span> <span class="token string">"粉丝数："</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>        fensi<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"\n"</span> <span class="token operator">+</span> <span class="token string">"性别："</span> <span class="token operator">+</span> gender <span class="token operator">+</span> <span class="token string">"\n"</span> <span class="token operator">+</span> <span class="token string">"微博等级："</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>urank<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"\n"</span><span class="token punctuation">)</span></code></pre><h3 id="对爬取对象的微博逐页进行爬取"><a href="#对爬取对象的微博逐页进行爬取" class="headerlink" title="对爬取对象的微博逐页进行爬取"></a>对爬取对象的微博逐页进行爬取</h3><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">get_weibo</span><span class="token punctuation">(</span><span class="token builtin">id</span><span class="token punctuation">,</span> <span class="token builtin">file</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">global</span> pic_num    i <span class="token operator">=</span> <span class="token number">1</span>    <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>        url <span class="token operator">=</span> <span class="token string">'https://m.weibo.cn/api/container/getIndex?type=uid&amp;value='</span> <span class="token operator">+</span> <span class="token builtin">id</span>        weibo_url <span class="token operator">=</span> <span class="token string">'https://m.weibo.cn/api/container/getIndex?type=uid&amp;value='</span> <span class="token operator">+</span> <span class="token builtin">id</span> <span class="token operator">+</span> <span class="token string">'&amp;containerid='</span> <span class="token operator">+</span> get_containerid<span class="token punctuation">(</span>            url<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'&amp;page='</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>            data <span class="token operator">=</span> use_proxy<span class="token punctuation">(</span>weibo_url<span class="token punctuation">,</span> proxy_addr<span class="token punctuation">)</span>            content <span class="token operator">=</span> json<span class="token punctuation">.</span>loads<span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'data'</span><span class="token punctuation">)</span>            cards <span class="token operator">=</span> content<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'cards'</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>cards<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>cards<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"-----正在爬取第"</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"页，第"</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"条微博------"</span><span class="token punctuation">)</span>                    card_type <span class="token operator">=</span> cards<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'card_type'</span><span class="token punctuation">)</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>card_type <span class="token operator">==</span> <span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                        mblog <span class="token operator">=</span> cards<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'mblog'</span><span class="token punctuation">)</span>                        attitudes_count <span class="token operator">=</span> mblog<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'attitudes_count'</span><span class="token punctuation">)</span>                        comments_count <span class="token operator">=</span> mblog<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'comments_count'</span><span class="token punctuation">)</span>                        created_at <span class="token operator">=</span> mblog<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'created_at'</span><span class="token punctuation">)</span>                        reposts_count <span class="token operator">=</span> mblog<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'reposts_count'</span><span class="token punctuation">)</span>                        scheme <span class="token operator">=</span> cards<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'scheme'</span><span class="token punctuation">)</span>                        text <span class="token operator">=</span> mblog<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'text'</span><span class="token punctuation">)</span>                        <span class="token keyword">if</span> mblog<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'pics'</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token boolean">None</span><span class="token punctuation">:</span>                            <span class="token comment"># print(mblog.get('original_pic'))</span>                            <span class="token comment"># print(mblog.get('pics'))</span>                            pic_archive <span class="token operator">=</span> mblog<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'pics'</span><span class="token punctuation">)</span>                            <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>pic_archive<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                                pic_num <span class="token operator">+=</span> <span class="token number">1</span>                                <span class="token keyword">print</span><span class="token punctuation">(</span>pic_archive<span class="token punctuation">[</span>_<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'large'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'url'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>                                imgurl <span class="token operator">=</span> pic_archive<span class="token punctuation">[</span>_<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'large'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'url'</span><span class="token punctuation">]</span>                                img <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>imgurl<span class="token punctuation">)</span>                                f <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span>path <span class="token operator">+</span> weibo_name <span class="token operator">+</span> <span class="token string">'\\'</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>pic_num<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>imgurl<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">'ab'</span><span class="token punctuation">)</span>  <span class="token comment"># 存储图片，多媒体文件需要参数b（二进制文件）</span>                                f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>img<span class="token punctuation">.</span>content<span class="token punctuation">)</span>  <span class="token comment"># 多媒体存储content</span>                                f<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>                        <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token builtin">file</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> fh<span class="token punctuation">:</span>                            fh<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">"----第"</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"页，第"</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"条微博----"</span> <span class="token operator">+</span> <span class="token string">"\n"</span><span class="token punctuation">)</span>                            fh<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">"微博地址："</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>scheme<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"\n"</span> <span class="token operator">+</span> <span class="token string">"发布时间："</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>                                created_at<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"\n"</span> <span class="token operator">+</span> <span class="token string">"微博内容："</span> <span class="token operator">+</span> text <span class="token operator">+</span> <span class="token string">"\n"</span> <span class="token operator">+</span> <span class="token string">"点赞数："</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>                                attitudes_count<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"\n"</span> <span class="token operator">+</span> <span class="token string">"评论数："</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>comments_count<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"\n"</span> <span class="token operator">+</span> <span class="token string">"转发数："</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>                                reposts_count<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"\n"</span><span class="token punctuation">)</span>                i <span class="token operator">+=</span> <span class="token number">1</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                <span class="token keyword">break</span>        <span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>            <span class="token keyword">pass</span></code></pre><h3 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h3><p>完整代码如下：</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment"># -*- coding: utf-8 -*-</span><span class="token keyword">import</span> urllib<span class="token punctuation">.</span>request<span class="token keyword">import</span> json<span class="token keyword">import</span> requests<span class="token keyword">import</span> ospath <span class="token operator">=</span> <span class="token string">''</span><span class="token builtin">id</span> <span class="token operator">=</span> <span class="token string">''</span>proxy_addr <span class="token operator">=</span> <span class="token string">"122.241.72.191:808"</span>pic_num <span class="token operator">=</span> <span class="token number">0</span>weibo_name <span class="token operator">=</span> <span class="token string">""</span><span class="token keyword">def</span> <span class="token function">use_proxy</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> proxy_addr<span class="token punctuation">)</span><span class="token punctuation">:</span>    req <span class="token operator">=</span> urllib<span class="token punctuation">.</span>request<span class="token punctuation">.</span>Request<span class="token punctuation">(</span>url<span class="token punctuation">)</span>    req<span class="token punctuation">.</span>add_header<span class="token punctuation">(</span><span class="token string">"User-Agent"</span><span class="token punctuation">,</span><span class="token string">"Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/49.0.2623.221 Safari/537.36 SE 2.X MetaSr 1.0"</span><span class="token punctuation">)</span>    proxy <span class="token operator">=</span> urllib<span class="token punctuation">.</span>request<span class="token punctuation">.</span>ProxyHandler<span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">'http'</span><span class="token punctuation">:</span> proxy_addr<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    opener <span class="token operator">=</span> urllib<span class="token punctuation">.</span>request<span class="token punctuation">.</span>build_opener<span class="token punctuation">(</span>proxy<span class="token punctuation">,</span> urllib<span class="token punctuation">.</span>request<span class="token punctuation">.</span>HTTPHandler<span class="token punctuation">)</span>    urllib<span class="token punctuation">.</span>request<span class="token punctuation">.</span>install_opener<span class="token punctuation">(</span>opener<span class="token punctuation">)</span>    data <span class="token operator">=</span> urllib<span class="token punctuation">.</span>request<span class="token punctuation">.</span>urlopen<span class="token punctuation">(</span>req<span class="token punctuation">)</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">,</span> <span class="token string">'ignore'</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> data<span class="token keyword">def</span> <span class="token function">get_containerid</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">:</span>    data <span class="token operator">=</span> use_proxy<span class="token punctuation">(</span>url<span class="token punctuation">,</span> proxy_addr<span class="token punctuation">)</span>    content <span class="token operator">=</span> json<span class="token punctuation">.</span>loads<span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'data'</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> data <span class="token keyword">in</span> content<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'tabsInfo'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'tabs'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>data<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'tab_type'</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">'weibo'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            containerid <span class="token operator">=</span> data<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'containerid'</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> containerid<span class="token keyword">def</span> <span class="token function">get_userInfo</span><span class="token punctuation">(</span><span class="token builtin">id</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    url <span class="token operator">=</span> <span class="token string">'https://m.weibo.cn/api/container/getIndex?type=uid&amp;value='</span> <span class="token operator">+</span> <span class="token builtin">id</span>    data <span class="token operator">=</span> use_proxy<span class="token punctuation">(</span>url<span class="token punctuation">,</span> proxy_addr<span class="token punctuation">)</span>    content <span class="token operator">=</span> json<span class="token punctuation">.</span>loads<span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'data'</span><span class="token punctuation">)</span>    profile_image_url <span class="token operator">=</span> content<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'userInfo'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'profile_image_url'</span><span class="token punctuation">)</span>    description <span class="token operator">=</span> content<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'userInfo'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'description'</span><span class="token punctuation">)</span>    profile_url <span class="token operator">=</span> content<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'userInfo'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'profile_url'</span><span class="token punctuation">)</span>    verified <span class="token operator">=</span> content<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'userInfo'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'verified'</span><span class="token punctuation">)</span>    guanzhu <span class="token operator">=</span> content<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'userInfo'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'follow_count'</span><span class="token punctuation">)</span>    name <span class="token operator">=</span> content<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'userInfo'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'screen_name'</span><span class="token punctuation">)</span>    fensi <span class="token operator">=</span> content<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'userInfo'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'followers_count'</span><span class="token punctuation">)</span>    gender <span class="token operator">=</span> content<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'userInfo'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'gender'</span><span class="token punctuation">)</span>    urank <span class="token operator">=</span> content<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'userInfo'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'urank'</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"微博昵称："</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">"\n"</span> <span class="token operator">+</span> <span class="token string">"微博主页地址："</span> <span class="token operator">+</span> profile_url <span class="token operator">+</span> <span class="token string">"\n"</span> <span class="token operator">+</span> <span class="token string">"微博头像地址："</span> <span class="token operator">+</span> profile_image_url <span class="token operator">+</span> <span class="token string">"\n"</span> <span class="token operator">+</span> <span class="token string">"是否认证："</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>        verified<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"\n"</span> <span class="token operator">+</span> <span class="token string">"微博说明："</span> <span class="token operator">+</span> description <span class="token operator">+</span> <span class="token string">"\n"</span> <span class="token operator">+</span> <span class="token string">"关注人数："</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>guanzhu<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"\n"</span> <span class="token operator">+</span> <span class="token string">"粉丝数："</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>        fensi<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"\n"</span> <span class="token operator">+</span> <span class="token string">"性别："</span> <span class="token operator">+</span> gender <span class="token operator">+</span> <span class="token string">"\n"</span> <span class="token operator">+</span> <span class="token string">"微博等级："</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>urank<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">get_weibo</span><span class="token punctuation">(</span><span class="token builtin">id</span><span class="token punctuation">,</span> <span class="token builtin">file</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">global</span> pic_num    i <span class="token operator">=</span> <span class="token number">1</span>    <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>        url <span class="token operator">=</span> <span class="token string">'https://m.weibo.cn/api/container/getIndex?type=uid&amp;value='</span> <span class="token operator">+</span> <span class="token builtin">id</span>        weibo_url <span class="token operator">=</span> <span class="token string">'https://m.weibo.cn/api/container/getIndex?type=uid&amp;value='</span> <span class="token operator">+</span> <span class="token builtin">id</span> <span class="token operator">+</span> <span class="token string">'&amp;containerid='</span> <span class="token operator">+</span> get_containerid<span class="token punctuation">(</span>            url<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'&amp;page='</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>            data <span class="token operator">=</span> use_proxy<span class="token punctuation">(</span>weibo_url<span class="token punctuation">,</span> proxy_addr<span class="token punctuation">)</span>            content <span class="token operator">=</span> json<span class="token punctuation">.</span>loads<span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'data'</span><span class="token punctuation">)</span>            cards <span class="token operator">=</span> content<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'cards'</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>cards<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>cards<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"-----正在爬取第"</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"页，第"</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"条微博------"</span><span class="token punctuation">)</span>                    card_type <span class="token operator">=</span> cards<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'card_type'</span><span class="token punctuation">)</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>card_type <span class="token operator">==</span> <span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                        mblog <span class="token operator">=</span> cards<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'mblog'</span><span class="token punctuation">)</span>                        attitudes_count <span class="token operator">=</span> mblog<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'attitudes_count'</span><span class="token punctuation">)</span>                        comments_count <span class="token operator">=</span> mblog<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'comments_count'</span><span class="token punctuation">)</span>                        created_at <span class="token operator">=</span> mblog<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'created_at'</span><span class="token punctuation">)</span>                        reposts_count <span class="token operator">=</span> mblog<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'reposts_count'</span><span class="token punctuation">)</span>                        scheme <span class="token operator">=</span> cards<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'scheme'</span><span class="token punctuation">)</span>                        text <span class="token operator">=</span> mblog<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'text'</span><span class="token punctuation">)</span>                        <span class="token keyword">if</span> mblog<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'pics'</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token boolean">None</span><span class="token punctuation">:</span>                            <span class="token comment"># print(mblog.get('original_pic'))</span>                            <span class="token comment"># print(mblog.get('pics'))</span>                            pic_archive <span class="token operator">=</span> mblog<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'pics'</span><span class="token punctuation">)</span>                            <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>pic_archive<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                                pic_num <span class="token operator">+=</span> <span class="token number">1</span>                                <span class="token keyword">print</span><span class="token punctuation">(</span>pic_archive<span class="token punctuation">[</span>_<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'large'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'url'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>                                imgurl <span class="token operator">=</span> pic_archive<span class="token punctuation">[</span>_<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'large'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'url'</span><span class="token punctuation">]</span>                                img <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>imgurl<span class="token punctuation">)</span>                                f <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span>path <span class="token operator">+</span> weibo_name <span class="token operator">+</span> <span class="token string">'\\'</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>pic_num<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>imgurl<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">'ab'</span><span class="token punctuation">)</span>  <span class="token comment"># 存储图片，多媒体文件需要参数b（二进制文件）</span>                                f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>img<span class="token punctuation">.</span>content<span class="token punctuation">)</span>  <span class="token comment"># 多媒体存储content</span>                                f<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>                        <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token builtin">file</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> fh<span class="token punctuation">:</span>                            fh<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">"----第"</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"页，第"</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"条微博----"</span> <span class="token operator">+</span> <span class="token string">"\n"</span><span class="token punctuation">)</span>                            fh<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">"微博地址："</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>scheme<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"\n"</span> <span class="token operator">+</span> <span class="token string">"发布时间："</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>                                created_at<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"\n"</span> <span class="token operator">+</span> <span class="token string">"微博内容："</span> <span class="token operator">+</span> text <span class="token operator">+</span> <span class="token string">"\n"</span> <span class="token operator">+</span> <span class="token string">"点赞数："</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>                                attitudes_count<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"\n"</span> <span class="token operator">+</span> <span class="token string">"评论数："</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>comments_count<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"\n"</span> <span class="token operator">+</span> <span class="token string">"转发数："</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>                                reposts_count<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"\n"</span><span class="token punctuation">)</span>                i <span class="token operator">+=</span> <span class="token number">1</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                <span class="token keyword">break</span>        <span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>            <span class="token keyword">pass</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>isdir<span class="token punctuation">(</span>path <span class="token operator">+</span> weibo_name<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">pass</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        os<span class="token punctuation">.</span>mkdir<span class="token punctuation">(</span>path <span class="token operator">+</span> weibo_name<span class="token punctuation">)</span>    <span class="token builtin">file</span> <span class="token operator">=</span> path <span class="token operator">+</span> weibo_name <span class="token operator">+</span> <span class="token string">'\\'</span> <span class="token operator">+</span> weibo_name <span class="token operator">+</span> <span class="token string">".txt"</span>    get_userInfo<span class="token punctuation">(</span><span class="token builtin">id</span><span class="token punctuation">)</span>    get_weibo<span class="token punctuation">(</span><span class="token builtin">id</span><span class="token punctuation">,</span> <span class="token builtin">file</span><span class="token punctuation">)</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Out_Learn </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2021/04/22/hello-world/"/>
      <url>/2021/04/22/hello-world/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class="language-bash" data-language="bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class="language-bash" data-language="bash"><code class="language-bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class="language-bash" data-language="bash"><code class="language-bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class="language-bash" data-language="bash"><code class="language-bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
